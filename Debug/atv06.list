
atv06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  0000b1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  0000b1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  0000a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800982c  0800982c  0000a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009830  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08009890  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08009930  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051b4  200001a0  080099d0  0000b1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005354  080099d0  0000b354  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000223e0  00000000  00000000  0000b1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000442b  00000000  00000000  0002d5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b50  00000000  00000000  000319e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001549  00000000  00000000  00033530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004fde  00000000  00000000  00034a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000205b7  00000000  00000000  00039a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011364d  00000000  00000000  0005a00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016d65b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007974  00000000  00000000  0016d6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  00175014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	080096d4 	.word	0x080096d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	080096d4 	.word	0x080096d4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fe40 	bl	8001296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f85d 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9cb 	bl	80009b4 <MX_GPIO_Init>
  MX_ETH_Init();
 800061e:	f000 f91d 	bl	800085c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000622:	f000 f969 	bl	80008f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000626:	f000 f997 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800062a:	f000 f8c5 	bl	80007b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062e:	f004 fe7d 	bl	800532c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semButton */
  semButtonHandle = osSemaphoreNew(1, 1, &semButton_attributes);
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <main+0x98>)
 8000634:	2101      	movs	r1, #1
 8000636:	2001      	movs	r0, #1
 8000638:	f004 ffb6 	bl	80055a8 <osSemaphoreNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a1a      	ldr	r2, [pc, #104]	@ (80006a8 <main+0x9c>)
 8000640:	6013      	str	r3, [r2, #0]
  //semButtonHandle = osSemaphoreNew(1, 0, NULL);

  /* creation of semDone */
  semDoneHandle = osSemaphoreNew(1, 1, &semDone_attributes);
 8000642:	4a1a      	ldr	r2, [pc, #104]	@ (80006ac <main+0xa0>)
 8000644:	2101      	movs	r1, #1
 8000646:	2001      	movs	r0, #1
 8000648:	f004 ffae 	bl	80055a8 <osSemaphoreNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <main+0xa4>)
 8000650:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  const osMessageQueueAttr_t myQueue01_attributes = { .name = "myQueue01" };
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <main+0xa8>)
 8000664:	603b      	str	r3, [r7, #0]
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (N_SAMPLES, sizeof(uint16_t), &myQueue01_attributes);
 8000666:	463b      	mov	r3, r7
 8000668:	461a      	mov	r2, r3
 800066a:	2102      	movs	r1, #2
 800066c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000670:	f005 f8f4 	bl	800585c <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <main+0xac>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskProdutora */
  TaskProdutoraHandle = osThreadNew(StartTaskprodutora, NULL, &TaskProdutora_attributes);
 800067a:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <main+0xb0>)
 800067c:	2100      	movs	r1, #0
 800067e:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <main+0xb4>)
 8000680:	f004 febe 	bl	8005400 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <main+0xb8>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of TaskConsumidora */
  TaskConsumidoraHandle = osThreadNew(StartTaskConsumidora, NULL, &TaskConsumidora_attributes);
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <main+0xbc>)
 800068c:	2100      	movs	r1, #0
 800068e:	480f      	ldr	r0, [pc, #60]	@ (80006cc <main+0xc0>)
 8000690:	f004 feb6 	bl	8005400 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <main+0xc4>)
 8000698:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800069a:	f004 fe7b 	bl	8005394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <main+0x92>
 80006a2:	bf00      	nop
 80006a4:	080097b4 	.word	0x080097b4
 80006a8:	20000860 	.word	0x20000860
 80006ac:	080097c4 	.word	0x080097c4
 80006b0:	20000864 	.word	0x20000864
 80006b4:	0800970c 	.word	0x0800970c
 80006b8:	2000085c 	.word	0x2000085c
 80006bc:	0800976c 	.word	0x0800976c
 80006c0:	08000b29 	.word	0x08000b29
 80006c4:	20000854 	.word	0x20000854
 80006c8:	08009790 	.word	0x08009790
 80006cc:	08000ba5 	.word	0x08000ba5
 80006d0:	20000858 	.word	0x20000858

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2234      	movs	r2, #52	@ 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f008 fb78 	bl	8008dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f8:	f002 f966 	bl	80029c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <SystemClock_Config+0xdc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemClock_Config+0xdc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0xdc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xe0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemClock_Config+0xe0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f002 f993 	bl	8002a88 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 fa8e 	bl	8000c88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f002 f93c 	bl	80029e8 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000776:	f000 fa87 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2103      	movs	r1, #3
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fc24 	bl	8002fe4 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007a2:	f000 fa71 	bl	8000c88 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	@ 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007cc:	4a21      	ldr	r2, [pc, #132]	@ (8000854 <MX_ADC1_Init+0x9c>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_ADC1_Init+0x98>)
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <MX_ADC1_Init+0xa0>)
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_ADC1_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_ADC1_Init+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_ADC1_Init+0x98>)
 8000814:	2201      	movs	r2, #1
 8000816:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_ADC1_Init+0x98>)
 800081a:	f000 fd8d 	bl	8001338 <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 fa30 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_ADC1_Init+0x98>)
 800083a:	f000 ff27 	bl	800168c <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000844:	f000 fa20 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200001f4 	.word	0x200001f4
 8000854:	40012000 	.word	0x40012000
 8000858:	0f000001 	.word	0x0f000001

0800085c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000860:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ETH_Init+0x84>)
 8000862:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <MX_ETH_Init+0x88>)
 8000864:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000874:	22e1      	movs	r2, #225	@ 0xe1
 8000876:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_ETH_Init+0x84>)
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800088e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_ETH_Init+0x84>)
 8000892:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000896:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_ETH_Init+0x84>)
 800089a:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <MX_ETH_Init+0x90>)
 800089c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008a0:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_ETH_Init+0x94>)
 80008a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008ae:	f001 fa23 	bl	8001cf8 <HAL_ETH_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 f9e6 	bl	8000c88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008bc:	2238      	movs	r2, #56	@ 0x38
 80008be:	2100      	movs	r1, #0
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008c2:	f008 fa89 	bl	8008dd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008c8:	2221      	movs	r2, #33	@ 0x21
 80008ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000023c 	.word	0x2000023c
 80008e4:	40028000 	.word	0x40028000
 80008e8:	20000868 	.word	0x20000868
 80008ec:	20000100 	.word	0x20000100
 80008f0:	20000060 	.word	0x20000060
 80008f4:	200001bc 	.word	0x200001bc

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f003 fca0 	bl	8004280 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f99f 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002ec 	.word	0x200002ec
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2206      	movs	r2, #6
 8000968:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2202      	movs	r2, #2
 800096e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2202      	movs	r2, #2
 800097a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2201      	movs	r2, #1
 8000980:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2201      	movs	r2, #1
 8000992:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	f001 fed9 	bl	8002752 <HAL_PCD_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f96f 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000374 	.word	0x20000374

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	@ 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b47      	ldr	r3, [pc, #284]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a46      	ldr	r2, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	4b41      	ldr	r3, [pc, #260]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a40      	ldr	r2, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a34      	ldr	r2, [pc, #208]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a28      	ldr	r2, [pc, #160]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a60:	4822      	ldr	r0, [pc, #136]	@ (8000aec <MX_GPIO_Init+0x138>)
 8000a62:	f001 fe43 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4821      	ldr	r0, [pc, #132]	@ (8000af0 <MX_GPIO_Init+0x13c>)
 8000a6c:	f001 fe3e 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481b      	ldr	r0, [pc, #108]	@ (8000af4 <MX_GPIO_Init+0x140>)
 8000a88:	f001 fc84 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_GPIO_Init+0x138>)
 8000aa6:	f001 fc75 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aaa:	2340      	movs	r3, #64	@ 0x40
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <MX_GPIO_Init+0x13c>)
 8000ac2:	f001 fc67 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_GPIO_Init+0x13c>)
 8000ada:	f001 fc5b 	bl	8002394 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	@ 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020800 	.word	0x40020800

08000af8 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(USER_Btn_Pin) != RESET) {
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <EXTI15_10_IRQHandler+0x28>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <EXTI15_10_IRQHandler+0x22>
	    __HAL_GPIO_EXTI_CLEAR_IT(USER_Btn_Pin);
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <EXTI15_10_IRQHandler+0x28>)
 8000b0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0e:	615a      	str	r2, [r3, #20]
	    osSemaphoreRelease(semButtonHandle);
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <EXTI15_10_IRQHandler+0x2c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fe49 	bl	80057ac <osSemaphoreRelease>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40013c00 	.word	0x40013c00
 8000b24:	20000860 	.word	0x20000860

08000b28 <StartTaskprodutora>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskprodutora */
void StartTaskprodutora(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t sample;
	  for (;;) {
	    osSemaphoreAcquire(semButtonHandle, osWaitForever);
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <StartTaskprodutora+0x6c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fdd1 	bl	80056e0 <osSemaphoreAcquire>
	    for (uint32_t i = 0; i < N_SAMPLES; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e01c      	b.n	8000b7e <StartTaskprodutora+0x56>
	      HAL_ADC_Start(&hadc1);
 8000b44:	4814      	ldr	r0, [pc, #80]	@ (8000b98 <StartTaskprodutora+0x70>)
 8000b46:	f000 fc3b 	bl	80013c0 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4e:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <StartTaskprodutora+0x70>)
 8000b50:	f000 fd04 	bl	800155c <HAL_ADC_PollForConversion>
	      sample = HAL_ADC_GetValue(&hadc1);
 8000b54:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <StartTaskprodutora+0x70>)
 8000b56:	f000 fd8c 	bl	8001672 <HAL_ADC_GetValue>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	817b      	strh	r3, [r7, #10]
	      osMessageQueuePut(myQueue01Handle, &sample, 0, osWaitForever);
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <StartTaskprodutora+0x74>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 010a 	add.w	r1, r7, #10
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f004 fefb 	bl	8005968 <osMessageQueuePut>
	      osDelay(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f004 fcea 	bl	800554c <osDelay>
	    for (uint32_t i = 0; i < N_SAMPLES; i++) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b84:	d3de      	bcc.n	8000b44 <StartTaskprodutora+0x1c>
	    }
	    osSemaphoreRelease(semDoneHandle);
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <StartTaskprodutora+0x78>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fe0e 	bl	80057ac <osSemaphoreRelease>
	    osSemaphoreAcquire(semButtonHandle, osWaitForever);
 8000b90:	e7ce      	b.n	8000b30 <StartTaskprodutora+0x8>
 8000b92:	bf00      	nop
 8000b94:	20000860 	.word	0x20000860
 8000b98:	200001f4 	.word	0x200001f4
 8000b9c:	2000085c 	.word	0x2000085c
 8000ba0:	20000864 	.word	0x20000864

08000ba4 <StartTaskConsumidora>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskConsumidora */
void StartTaskConsumidora(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09a      	sub	sp, #104	@ 0x68
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskConsumidora */

	char msg[64];
	uint16_t sample;
	  for (;;) {
	    osSemaphoreAcquire(semDoneHandle, osWaitForever);
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <StartTaskConsumidora+0xa8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fd93 	bl	80056e0 <osSemaphoreAcquire>
	    uint32_t sum = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	    // Read and transmit all samples from queue
	    for (uint32_t i = 0; i < N_SAMPLES; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000bc2:	e023      	b.n	8000c0c <StartTaskConsumidora+0x68>
	      osMessageQueueGet(myQueue01Handle, &sample, NULL, osWaitForever);
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <StartTaskConsumidora+0xac>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	f107 010a 	add.w	r1, r7, #10
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f004 ff3d 	bl	8005a50 <osMessageQueueGet>
	      sum += sample;
 8000bd6:	897b      	ldrh	r3, [r7, #10]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bdc:	4413      	add	r3, r2
 8000bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      int len = snprintf(msg, sizeof(msg), "Amostra[%lu] = %u\r\n", i, sample);
 8000be0:	897b      	ldrh	r3, [r7, #10]
 8000be2:	f107 000c 	add.w	r0, r7, #12
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bea:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <StartTaskConsumidora+0xb0>)
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	f008 f8bd 	bl	8008d6c <sniprintf>
 8000bf2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	      HAL_UART_Transmit(&huart3, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	4815      	ldr	r0, [pc, #84]	@ (8000c58 <StartTaskConsumidora+0xb4>)
 8000c02:	f003 fb8b 	bl	800431c <HAL_UART_Transmit>
	    for (uint32_t i = 0; i < N_SAMPLES; i++) {
 8000c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c08:	3301      	adds	r3, #1
 8000c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c12:	d3d7      	bcc.n	8000bc4 <StartTaskConsumidora+0x20>
	    }
	    // Calculate and transmit mean
	    uint32_t mean_int = (sum + N_SAMPLES/2) / N_SAMPLES;
 8000c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c16:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1a:	0a9b      	lsrs	r3, r3, #10
 8000c1c:	657b      	str	r3, [r7, #84]	@ 0x54
	    int len = snprintf(msg, sizeof(msg), "Média ADC: %lu\r\n", mean_int);
 8000c1e:	f107 000c 	add.w	r0, r7, #12
 8000c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <StartTaskConsumidora+0xb8>)
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	f008 f8a0 	bl	8008d6c <sniprintf>
 8000c2c:	6538      	str	r0, [r7, #80]	@ 0x50
	    HAL_UART_Transmit(&huart3, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f107 010c 	add.w	r1, r7, #12
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <StartTaskConsumidora+0xb4>)
 8000c3c:	f003 fb6e 	bl	800431c <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c44:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <StartTaskConsumidora+0xbc>)
 8000c46:	f001 fd6a 	bl	800271e <HAL_GPIO_TogglePin>
	  for (;;) {
 8000c4a:	e7af      	b.n	8000bac <StartTaskConsumidora+0x8>
 8000c4c:	20000864 	.word	0x20000864
 8000c50:	2000085c 	.word	0x2000085c
 8000c54:	0800972c 	.word	0x0800972c
 8000c58:	200002ec 	.word	0x200002ec
 8000c5c:	08009740 	.word	0x08009740
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c76:	f000 fb1b 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010000 	.word	0x40010000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 ffe7 	bl	8001ca4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <HAL_ADC_MspInit+0x74>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d123      	bne.n	8000d4e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_ADC_MspInit+0x78>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_ADC_MspInit+0x7c>)
 8000d4a:	f001 fb23 	bl	8002394 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	@ 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a4e      	ldr	r2, [pc, #312]	@ (8000ebc <HAL_ETH_MspInit+0x158>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f040 8096 	bne.w	8000eb4 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d88:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d94:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d9c:	623b      	str	r3, [r7, #32]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	4b47      	ldr	r3, [pc, #284]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	4a46      	ldr	r2, [pc, #280]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000da6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dac:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	4a40      	ldr	r2, [pc, #256]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ddc:	4b38      	ldr	r3, [pc, #224]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b35      	ldr	r3, [pc, #212]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	4a34      	ldr	r2, [pc, #208]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df4:	4b32      	ldr	r3, [pc, #200]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e18:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <HAL_ETH_MspInit+0x15c>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e30:	2332      	movs	r3, #50	@ 0x32
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e40:	230b      	movs	r3, #11
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <HAL_ETH_MspInit+0x160>)
 8000e4c:	f001 faa2 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e50:	2386      	movs	r3, #134	@ 0x86
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <HAL_ETH_MspInit+0x164>)
 8000e6c:	f001 fa92 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <HAL_ETH_MspInit+0x168>)
 8000e8e:	f001 fa81 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <HAL_ETH_MspInit+0x16c>)
 8000eb0:	f001 fa70 	bl	8002394 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	@ 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40028000 	.word	0x40028000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40021800 	.word	0x40021800

08000ed4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2290      	movs	r2, #144	@ 0x90
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 ff6f 	bl	8008dd8 <memset>
  if(huart->Instance==USART3)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <HAL_UART_MspInit+0xb4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d13c      	bne.n	8000f7e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fabe 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f1e:	f7ff feb3 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a19      	ldr	r2, [pc, #100]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_UART_MspInit+0xb8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_UART_MspInit+0xbc>)
 8000f7a:	f001 fa0b 	bl	8002394 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	37b8      	adds	r7, #184	@ 0xb8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40004800 	.word	0x40004800
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ae      	sub	sp, #184	@ 0xb8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2290      	movs	r2, #144	@ 0x90
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 ff0f 	bl	8008dd8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fc2:	d159      	bne.n	8001078 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fc4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fa5d 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fe0:	f7ff fe52 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	4a25      	ldr	r2, [pc, #148]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff0:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ffc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001016:	230a      	movs	r3, #10
 8001018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001020:	4619      	mov	r1, r3
 8001022:	4818      	ldr	r0, [pc, #96]	@ (8001084 <HAL_PCD_MspInit+0xf0>)
 8001024:	f001 f9b6 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001040:	4619      	mov	r1, r3
 8001042:	4810      	ldr	r0, [pc, #64]	@ (8001084 <HAL_PCD_MspInit+0xf0>)
 8001044:	f001 f9a6 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104c:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 800104e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001052:	6353      	str	r3, [r2, #52]	@ 0x34
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106a:	6453      	str	r3, [r2, #68]	@ 0x44
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <HAL_PCD_MspInit+0xec>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	37b8      	adds	r7, #184	@ 0xb8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <HAL_InitTick+0xcc>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	4a2d      	ldr	r2, [pc, #180]	@ (8001154 <HAL_InitTick+0xcc>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <HAL_InitTick+0xcc>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f9b8 	bl	8003430 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010c0:	f002 f9a2 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80010c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_InitTick+0xd0>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	3b01      	subs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_InitTick+0xd4>)
 80010d6:	4a22      	ldr	r2, [pc, #136]	@ (8001160 <HAL_InitTick+0xd8>)
 80010d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_InitTick+0xd4>)
 80010dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_InitTick+0xd4>)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_InitTick+0xd4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_InitTick+0xd4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <HAL_InitTick+0xd4>)
 80010fc:	f002 fdf2 	bl	8003ce4 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <HAL_InitTick+0xd4>)
 8001110:	f002 fe4a 	bl	8003da8 <HAL_TIM_Base_Start_IT>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800111a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111e:	2b00      	cmp	r3, #0
 8001120:	d111      	bne.n	8001146 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001122:	2019      	movs	r0, #25
 8001124:	f000 fdda 	bl	8001cdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d808      	bhi.n	8001140 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	2019      	movs	r0, #25
 8001134:	f000 fdb6 	bl	8001ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_InitTick+0xdc>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e002      	b.n	8001146 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800114a:	4618      	mov	r0, r3
 800114c:	3730      	adds	r7, #48	@ 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	431bde83 	.word	0x431bde83
 800115c:	20000870 	.word	0x20000870
 8001160:	40010000 	.word	0x40010000
 8001164:	20000004 	.word	0x20000004

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011a6:	f002 fe77 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000870 	.word	0x20000870

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f007 fe00 	bl	8008de8 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20080000 	.word	0x20080000
 8001214:	00000400 	.word	0x00000400
 8001218:	200008bc 	.word	0x200008bc
 800121c:	20005358 	.word	0x20005358

08001220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800127c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001248:	f7ff ffea 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	@ (8001284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	@ (8001290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001272:	f007 fdbf 	bl	8008df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff f9c9 	bl	800060c <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001288:	08009830 	.word	0x08009830
  ldr r2, =_sbss
 800128c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001290:	20005354 	.word	0x20005354

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>

08001296 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 fcf7 	bl	8001c8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a0:	200f      	movs	r0, #15
 80012a2:	f7ff fef1 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a6:	f7ff fcf5 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	200008c0 	.word	0x200008c0

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200008c0 	.word	0x200008c0

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff ffee 	bl	80012d8 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffde 	bl	80012d8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e031      	b.n	80013b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fcc4 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_ADC_Init+0x84>)
 800137c:	4013      	ands	r3, r2
 800137e:	f043 0202 	orr.w	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fada 	bl	8001940 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a2:	e001      	b.n	80013a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	ffffeefd 	.word	0xffffeefd

080013c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Start+0x1a>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e0ad      	b.n	8001536 <HAL_ADC_Start+0x176>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d018      	beq.n	8001422 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001400:	4b50      	ldr	r3, [pc, #320]	@ (8001544 <HAL_ADC_Start+0x184>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a50      	ldr	r2, [pc, #320]	@ (8001548 <HAL_ADC_Start+0x188>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9a      	lsrs	r2, r3, #18
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001414:	e002      	b.n	800141c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3b01      	subs	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d175      	bne.n	800151c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001434:	4b45      	ldr	r3, [pc, #276]	@ (800154c <HAL_ADC_Start+0x18c>)
 8001436:	4013      	ands	r3, r2
 8001438:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001456:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800146a:	d106      	bne.n	800147a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	f023 0206 	bic.w	r2, r3, #6
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	645a      	str	r2, [r3, #68]	@ 0x44
 8001478:	e002      	b.n	8001480 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001490:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_ADC_Start+0x190>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d143      	bne.n	8001534 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e03a      	b.n	8001534 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <HAL_ADC_Start+0x194>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10e      	bne.n	80014e6 <HAL_ADC_Start+0x126>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_ADC_Start+0x190>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d120      	bne.n	8001534 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_ADC_Start+0x198>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d11b      	bne.n	8001534 <HAL_ADC_Start+0x174>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d114      	bne.n	8001534 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	e00b      	b.n	8001534 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	f043 0210 	orr.w	r2, r3, #16
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83
 800154c:	fffff8fe 	.word	0xfffff8fe
 8001550:	40012300 	.word	0x40012300
 8001554:	40012000 	.word	0x40012000
 8001558:	40012200 	.word	0x40012200

0800155c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001578:	d113      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001588:	d10b      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e063      	b.n	800166a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015a2:	f7ff fe99 	bl	80012d8 <HAL_GetTick>
 80015a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015a8:	e021      	b.n	80015ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d01d      	beq.n	80015ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_ADC_PollForConversion+0x6c>
 80015b8:	f7ff fe8e 	bl	80012d8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d212      	bcs.n	80015ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d00b      	beq.n	80015ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f043 0204 	orr.w	r2, r3, #4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e03d      	b.n	800166a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d1d6      	bne.n	80015aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0212 	mvn.w	r2, #18
 8001604:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d123      	bne.n	8001668 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d11f      	bne.n	8001668 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e13a      	b.n	800191e <HAL_ADC_ConfigChannel+0x292>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d93a      	bls.n	800172e <HAL_ADC_ConfigChannel+0xa2>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016c0:	d035      	beq.n	800172e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8f      	ldr	r2, [pc, #572]	@ (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	e039      	b.n	800177c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	4603      	mov	r3, r0
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4403      	add	r3, r0
 8001720:	3b1e      	subs	r3, #30
 8001722:	409a      	lsls	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172c:	e026      	b.n	800177c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43da      	mvns	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	400a      	ands	r2, r1
 8001754:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6919      	ldr	r1, [r3, #16]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	4603      	mov	r3, r0
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4403      	add	r3, r0
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	409a      	lsls	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b06      	cmp	r3, #6
 8001782:	d824      	bhi.n	80017ce <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	3b05      	subs	r3, #5
 8001796:	221f      	movs	r2, #31
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43da      	mvns	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	400a      	ands	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b05      	subs	r3, #5
 80017c0:	fa00 f203 	lsl.w	r2, r0, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80017cc:	e04c      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d824      	bhi.n	8001820 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	3b23      	subs	r3, #35	@ 0x23
 80017e8:	221f      	movs	r2, #31
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b23      	subs	r3, #35	@ 0x23
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	631a      	str	r2, [r3, #48]	@ 0x30
 800181e:	e023      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b41      	subs	r3, #65	@ 0x41
 8001832:	221f      	movs	r2, #31
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b41      	subs	r3, #65	@ 0x41
 800185c:	fa00 f203 	lsl.w	r2, r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a30      	ldr	r2, [pc, #192]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10a      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1fc>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800187c:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 8001882:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001886:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10f      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x226>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b12      	cmp	r3, #18
 8001898:	d10b      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800189a:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018a4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a22      	ldr	r2, [pc, #136]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d12b      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x288>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x242>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b11      	cmp	r3, #17
 80018cc:	d122      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018d8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a15      	ldr	r2, [pc, #84]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018e4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_ADC_ConfigChannel+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a11      	ldr	r2, [pc, #68]	@ (800193c <HAL_ADC_ConfigChannel+0x2b0>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9a      	lsrs	r2, r3, #18
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001906:	e002      	b.n	800190e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	10000012 	.word	0x10000012
 8001930:	40012000 	.word	0x40012000
 8001934:	40012300 	.word	0x40012300
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83

08001940 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001948:	4b78      	ldr	r3, [pc, #480]	@ (8001b2c <ADC_Init+0x1ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a77      	ldr	r2, [pc, #476]	@ (8001b2c <ADC_Init+0x1ec>)
 800194e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001952:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001954:	4b75      	ldr	r3, [pc, #468]	@ (8001b2c <ADC_Init+0x1ec>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4973      	ldr	r1, [pc, #460]	@ (8001b2c <ADC_Init+0x1ec>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	4a58      	ldr	r2, [pc, #352]	@ (8001b30 <ADC_Init+0x1f0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6899      	ldr	r1, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	e00f      	b.n	8001a3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0202 	bic.w	r2, r2, #2
 8001a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	005a      	lsls	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	3b01      	subs	r3, #1
 8001a94:	035a      	lsls	r2, r3, #13
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	e007      	b.n	8001ab0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	051a      	lsls	r2, r3, #20
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6899      	ldr	r1, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001af2:	025a      	lsls	r2, r3, #9
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6899      	ldr	r1, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	029a      	lsls	r2, r3, #10
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40012300 	.word	0x40012300
 8001b30:	0f000001 	.word	0x0f000001

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	05fa0000 	.word	0x05fa0000

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	@ (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff4c 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb6:	f7ff ff61 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	6978      	ldr	r0, [r7, #20]
 8001cc2:	f7ff ffb1 	bl	8001c28 <NVIC_EncodePriority>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff80 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001cd4:	bf00      	nop
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff54 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e086      	b.n	8001e18 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff f821 	bl	8000d64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <HAL_ETH_Init+0x128>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <HAL_ETH_Init+0x128>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <HAL_ETH_Init+0x128>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e24 <HAL_ETH_Init+0x12c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a39      	ldr	r2, [pc, #228]	@ (8001e24 <HAL_ETH_Init+0x12c>)
 8001d40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d44:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d46:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <HAL_ETH_Init+0x12c>)
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4935      	ldr	r1, [pc, #212]	@ (8001e24 <HAL_ETH_Init+0x12c>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d54:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <HAL_ETH_Init+0x12c>)
 8001d56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff fab2 	bl	80012d8 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d76:	e011      	b.n	8001d9c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d78:	f7ff faae 	bl	80012d8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d86:	d909      	bls.n	8001d9c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	22e0      	movs	r2, #224	@ 0xe0
 8001d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e03d      	b.n	8001e18 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e4      	bne.n	8001d78 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f97a 	bl	80020a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fa25 	bl	8002204 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa7b 	bl	80022b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f9e3 	bl	8002194 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_ETH_Init+0x130>)
 8001dec:	430b      	orrs	r3, r1
 8001dee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001e02:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2210      	movs	r2, #16
 8001e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	00020060 	.word	0x00020060

08001e2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <ETH_SetMACConfig+0x164>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7b9b      	ldrb	r3, [r3, #14]
 8001e4a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	7c12      	ldrb	r2, [r2, #16]
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d102      	bne.n	8001e5a <ETH_SetMACConfig+0x2e>
 8001e54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e58:	e000      	b.n	8001e5c <ETH_SetMACConfig+0x30>
 8001e5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	7c52      	ldrb	r2, [r2, #17]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d102      	bne.n	8001e6c <ETH_SetMACConfig+0x40>
 8001e66:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e6a:	e000      	b.n	8001e6e <ETH_SetMACConfig+0x42>
 8001e6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7fdb      	ldrb	r3, [r3, #31]
 8001e7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	7f92      	ldrb	r2, [r2, #30]
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d102      	bne.n	8001e92 <ETH_SetMACConfig+0x66>
 8001e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e90:	e000      	b.n	8001e94 <ETH_SetMACConfig+0x68>
 8001e92:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7f1b      	ldrb	r3, [r3, #28]
 8001e9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ea2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001eaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d102      	bne.n	8001ebc <ETH_SetMACConfig+0x90>
 8001eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eba:	e000      	b.n	8001ebe <ETH_SetMACConfig+0x92>
 8001ebc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ebe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7bdb      	ldrb	r3, [r3, #15]
 8001ec4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ec6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ed4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff f9fe 	bl	80012f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d101      	bne.n	8001f22 <ETH_SetMACConfig+0xf6>
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	e000      	b.n	8001f24 <ETH_SetMACConfig+0xf8>
 8001f22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f32:	2a01      	cmp	r2, #1
 8001f34:	d101      	bne.n	8001f3a <ETH_SetMACConfig+0x10e>
 8001f36:	2208      	movs	r2, #8
 8001f38:	e000      	b.n	8001f3c <ETH_SetMACConfig+0x110>
 8001f3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f44:	2a01      	cmp	r2, #1
 8001f46:	d101      	bne.n	8001f4c <ETH_SetMACConfig+0x120>
 8001f48:	2204      	movs	r2, #4
 8001f4a:	e000      	b.n	8001f4e <ETH_SetMACConfig+0x122>
 8001f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f56:	2a01      	cmp	r2, #1
 8001f58:	d101      	bne.n	8001f5e <ETH_SetMACConfig+0x132>
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	e000      	b.n	8001f60 <ETH_SetMACConfig+0x134>
 8001f5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff f9b9 	bl	80012f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	fd20810f 	.word	0xfd20810f

08001f94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <ETH_SetDMAConfig+0x110>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7b1b      	ldrb	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <ETH_SetDMAConfig+0x2c>
 8001fba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fbe:	e000      	b.n	8001fc2 <ETH_SetDMAConfig+0x2e>
 8001fc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7b5b      	ldrb	r3, [r3, #13]
 8001fc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	7f52      	ldrb	r2, [r2, #29]
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d102      	bne.n	8001fd8 <ETH_SetDMAConfig+0x44>
 8001fd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fd6:	e000      	b.n	8001fda <ETH_SetDMAConfig+0x46>
 8001fd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7b9b      	ldrb	r3, [r3, #14]
 8001fe0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fe2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7f1b      	ldrb	r3, [r3, #28]
 8001fee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ff0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	7f9b      	ldrb	r3, [r3, #30]
 8001ff6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ff8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ffe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002006:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002008:	4313      	orrs	r3, r2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f960 	bl	80012f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002048:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800204e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002054:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800205c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800205e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002066:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800206c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002076:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800207a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff f931 	bl	80012f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	f8de3f23 	.word	0xf8de3f23

080020a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0a6      	sub	sp, #152	@ 0x98
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020bc:	2300      	movs	r3, #0
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002110:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002114:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800211a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002122:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe7f 	bl	8001e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800213c:	2301      	movs	r3, #1
 800213e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800215e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002162:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002164:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002168:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800216a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff05 	bl	8001f94 <ETH_SetDMAConfig>
}
 800218a:	bf00      	nop
 800218c:	3798      	adds	r7, #152	@ 0x98
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3305      	adds	r3, #5
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	3204      	adds	r2, #4
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <ETH_MACAddressConfig+0x68>)
 80021b6:	4413      	add	r3, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3303      	adds	r3, #3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	061a      	lsls	r2, r3, #24
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3302      	adds	r3, #2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	4313      	orrs	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <ETH_MACAddressConfig+0x6c>)
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40028040 	.word	0x40028040
 8002200:	40028044 	.word	0x40028044

08002204 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e03e      	b.n	8002290 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68d9      	ldr	r1, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	3206      	adds	r2, #6
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d80c      	bhi.n	8002274 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68d9      	ldr	r1, [r3, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	e004      	b.n	800227e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d9bd      	bls.n	8002212 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e048      	b.n	8002356 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002300:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	3212      	adds	r2, #18
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d80c      	bhi.n	8002346 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e004      	b.n	8002350 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d9b3      	bls.n	80022c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002386:	60da      	str	r2, [r3, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e175      	b.n	80026a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8164 	bne.w	800269a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d005      	beq.n	80023ea <HAL_GPIO_Init+0x56>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d130      	bne.n	800244c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 0201 	and.w	r2, r3, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b03      	cmp	r3, #3
 8002456:	d017      	beq.n	8002488 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80be 	beq.w	800269a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b66      	ldr	r3, [pc, #408]	@ (80026b8 <HAL_GPIO_Init+0x324>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a65      	ldr	r2, [pc, #404]	@ (80026b8 <HAL_GPIO_Init+0x324>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b63      	ldr	r3, [pc, #396]	@ (80026b8 <HAL_GPIO_Init+0x324>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002536:	4a61      	ldr	r2, [pc, #388]	@ (80026bc <HAL_GPIO_Init+0x328>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_GPIO_Init+0x32c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d037      	beq.n	80025d2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a57      	ldr	r2, [pc, #348]	@ (80026c4 <HAL_GPIO_Init+0x330>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a56      	ldr	r2, [pc, #344]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a55      	ldr	r2, [pc, #340]	@ (80026cc <HAL_GPIO_Init+0x338>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a54      	ldr	r2, [pc, #336]	@ (80026d0 <HAL_GPIO_Init+0x33c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a53      	ldr	r2, [pc, #332]	@ (80026d4 <HAL_GPIO_Init+0x340>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x22a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	@ (80026d8 <HAL_GPIO_Init+0x344>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a51      	ldr	r2, [pc, #324]	@ (80026dc <HAL_GPIO_Init+0x348>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_GPIO_Init+0x34c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	@ (80026e4 <HAL_GPIO_Init+0x350>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x21a>
 80025aa:	2309      	movs	r3, #9
 80025ac:	e012      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ae:	230a      	movs	r3, #10
 80025b0:	e010      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025b2:	2308      	movs	r3, #8
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x328>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a34      	ldr	r2, [pc, #208]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002646:	4b28      	ldr	r3, [pc, #160]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266a:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_GPIO_Init+0x354>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae86 	bls.w	80023b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40022400 	.word	0x40022400
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002730:	887a      	ldrh	r2, [r7, #2]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	041a      	lsls	r2, r3, #16
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43d9      	mvns	r1, r3
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	400b      	ands	r3, r1
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af02      	add	r7, sp, #8
 8002758:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e108      	b.n	8002976 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fc08 	bl	8000f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002792:	d102      	bne.n	800279a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fb20 	bl	8004de4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7c1a      	ldrb	r2, [r3, #16]
 80027ac:	f88d 2000 	strb.w	r2, [sp]
 80027b0:	3304      	adds	r3, #4
 80027b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b4:	f002 fabc 	bl	8004d30 <USB_CoreInit>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0d5      	b.n	8002976 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 fb18 	bl	8004e06 <USB_SetCurrentMode>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0c6      	b.n	8002976 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e04a      	b.n	8002884 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3315      	adds	r3, #21
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3314      	adds	r3, #20
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	b298      	uxth	r0, r3
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	332e      	adds	r3, #46	@ 0x2e
 800282a:	4602      	mov	r2, r0
 800282c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3318      	adds	r3, #24
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	331c      	adds	r3, #28
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3320      	adds	r3, #32
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3324      	adds	r3, #36	@ 0x24
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3301      	adds	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3af      	bcc.n	80027ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e044      	b.n	800291e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	791b      	ldrb	r3, [r3, #4]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3b5      	bcc.n	8002894 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7c1a      	ldrb	r2, [r3, #16]
 8002930:	f88d 2000 	strb.w	r2, [sp]
 8002934:	3304      	adds	r3, #4
 8002936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002938:	f002 fab2 	bl	8004ea0 <USB_DevInit>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e013      	b.n	8002976 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7b1b      	ldrb	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f80b 	bl	8002980 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fc6d 	bl	800524e <USB_DevDisconnect>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029ae:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	10000003 	.word	0x10000003

080029c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000

080029e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fe:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a16:	f7fe fc5f 	bl	80012d8 <HAL_GetTick>
 8002a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a1c:	e009      	b.n	8002a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a1e:	f7fe fc5b 	bl	80012d8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a2c:	d901      	bls.n	8002a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e022      	b.n	8002a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a32:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7fe fc44 	bl	80012d8 <HAL_GetTick>
 8002a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a52:	e009      	b.n	8002a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a54:	f7fe fc40 	bl	80012d8 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a62:	d901      	bls.n	8002a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e007      	b.n	8002a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a74:	d1ee      	bne.n	8002a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000

08002a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e29b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8087 	beq.w	8002bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aac:	4b96      	ldr	r3, [pc, #600]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab8:	4b93      	ldr	r3, [pc, #588]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d112      	bne.n	8002aea <HAL_RCC_OscConfig+0x62>
 8002ac4:	4b90      	ldr	r3, [pc, #576]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d06c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x130>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d168      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e275      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x7a>
 8002af4:	4b84      	ldr	r3, [pc, #528]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a83      	ldr	r2, [pc, #524]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e02e      	b.n	8002b60 <HAL_RCC_OscConfig+0xd8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x9c>
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b7c      	ldr	r3, [pc, #496]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xd8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	4b76      	ldr	r3, [pc, #472]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a75      	ldr	r2, [pc, #468]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b73      	ldr	r3, [pc, #460]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a72      	ldr	r2, [pc, #456]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xd8>
 8002b48:	4b6f      	ldr	r3, [pc, #444]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6b      	ldr	r2, [pc, #428]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fbb6 	bl	80012d8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fbb2 	bl	80012d8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e229      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe8>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fba2 	bl	80012d8 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb9e 	bl	80012d8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e215      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x110>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d069      	beq.n	8002c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc6:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x190>
 8002bde:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x17a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1e9      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	493d      	ldr	r1, [pc, #244]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e040      	b.n	8002c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a38      	ldr	r2, [pc, #224]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fb54 	bl	80012d8 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c34:	f7fe fb50 	bl	80012d8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1c7      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b30      	ldr	r3, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4929      	ldr	r1, [pc, #164]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a26      	ldr	r2, [pc, #152]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fb30 	bl	80012d8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fb2c 	bl	80012d8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1a3      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d038      	beq.n	8002d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb2:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe fb0d 	bl	80012d8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fb09 	bl	80012d8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e180      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x23a>
 8002ce0:	e01a      	b.n	8002d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe faf3 	bl	80012d8 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7fe faef 	bl	80012d8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d903      	bls.n	8002d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e166      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
 8002d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ee      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a4 	beq.w	8002e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d26:	4b8c      	ldr	r3, [pc, #560]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	4b89      	ldr	r3, [pc, #548]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	4a88      	ldr	r2, [pc, #544]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3e:	4b86      	ldr	r3, [pc, #536]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4e:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_OscConfig+0x4d4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d118      	bne.n	8002d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d5a:	4b80      	ldr	r3, [pc, #512]	@ (8002f5c <HAL_RCC_OscConfig+0x4d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f5c <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fab7 	bl	80012d8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7fe fab3 	bl	80012d8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	@ 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e12a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x4d4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x31a>
 8002d94:	4b70      	ldr	r3, [pc, #448]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d98:	4a6f      	ldr	r2, [pc, #444]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da0:	e02d      	b.n	8002dfe <HAL_RCC_OscConfig+0x376>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x33c>
 8002daa:	4b6b      	ldr	r3, [pc, #428]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a6a      	ldr	r2, [pc, #424]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db6:	4b68      	ldr	r3, [pc, #416]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	4a67      	ldr	r2, [pc, #412]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc2:	e01c      	b.n	8002dfe <HAL_RCC_OscConfig+0x376>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x35e>
 8002dcc:	4b62      	ldr	r3, [pc, #392]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	4a61      	ldr	r2, [pc, #388]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de4:	e00b      	b.n	8002dfe <HAL_RCC_OscConfig+0x376>
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a5b      	ldr	r2, [pc, #364]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	4a58      	ldr	r2, [pc, #352]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d015      	beq.n	8002e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fa67 	bl	80012d8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fa63 	bl	80012d8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0d8      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	4b4c      	ldr	r3, [pc, #304]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ee      	beq.n	8002e0e <HAL_RCC_OscConfig+0x386>
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fa51 	bl	80012d8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fa4d 	bl	80012d8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0c2      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	4b41      	ldr	r3, [pc, #260]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b3d      	ldr	r3, [pc, #244]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a3c      	ldr	r2, [pc, #240]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80ae 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e78:	4b37      	ldr	r3, [pc, #220]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d06d      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d14b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b32      	ldr	r3, [pc, #200]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a31      	ldr	r2, [pc, #196]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fa1e 	bl	80012d8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fa1a 	bl	80012d8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e091      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	019b      	lsls	r3, r3, #6
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe f9ec 	bl	80012d8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe f9e8 	bl	80012d8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e05f      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x47c>
 8002f22:	e057      	b.n	8002fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0b      	ldr	r2, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f9d2 	bl	80012d8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f9ce 	bl	80012d8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e045      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4b0>
 8002f56:	e03d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x54c>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f60:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCC_OscConfig+0x558>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d030      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d129      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d122      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d119      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10f      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d0      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b67      	ldr	r3, [pc, #412]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 020f 	bic.w	r2, r3, #15
 8003012:	4965      	ldr	r1, [pc, #404]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b63      	ldr	r3, [pc, #396]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b8      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003044:	4b59      	ldr	r3, [pc, #356]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a58      	ldr	r2, [pc, #352]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800304e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800305c:	4b53      	ldr	r3, [pc, #332]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a52      	ldr	r2, [pc, #328]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b50      	ldr	r3, [pc, #320]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	494d      	ldr	r1, [pc, #308]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d040      	beq.n	8003108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b47      	ldr	r3, [pc, #284]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e07f      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b41      	ldr	r3, [pc, #260]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e073      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3d      	ldr	r3, [pc, #244]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b39      	ldr	r3, [pc, #228]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4936      	ldr	r1, [pc, #216]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d8:	f7fe f8fe 	bl	80012d8 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe f8fa 	bl	80012d8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e053      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2d      	ldr	r3, [pc, #180]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d210      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	4922      	ldr	r1, [pc, #136]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e032      	b.n	800319e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003144:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4916      	ldr	r1, [pc, #88]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	490e      	ldr	r1, [pc, #56]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003176:	f000 f821 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800317a:	4602      	mov	r2, r0
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	490a      	ldr	r1, [pc, #40]	@ (80031b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003188:	5ccb      	ldrb	r3, [r1, r3]
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ff76 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00
 80031ac:	40023800 	.word	0x40023800
 80031b0:	080097d4 	.word	0x080097d4
 80031b4:	20000000 	.word	0x20000000
 80031b8:	20000004 	.word	0x20000004

080031bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b094      	sub	sp, #80	@ 0x50
 80031c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c8:	2300      	movs	r3, #0
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031cc:	2300      	movs	r3, #0
 80031ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d4:	4b79      	ldr	r3, [pc, #484]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d00d      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x40>
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	f200 80e1 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ee:	e0db      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b73      	ldr	r3, [pc, #460]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031f4:	e0db      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f6:	4b73      	ldr	r3, [pc, #460]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80031f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031fa:	e0d8      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fc:	4b6f      	ldr	r3, [pc, #444]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003204:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003206:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003212:	4b6a      	ldr	r3, [pc, #424]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2200      	movs	r2, #0
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800321c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	@ 0x34
 800322a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800322e:	4622      	mov	r2, r4
 8003230:	462b      	mov	r3, r5
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	0159      	lsls	r1, r3, #5
 800323c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003240:	0150      	lsls	r0, r2, #5
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4621      	mov	r1, r4
 8003248:	1a51      	subs	r1, r2, r1
 800324a:	6139      	str	r1, [r7, #16]
 800324c:	4629      	mov	r1, r5
 800324e:	eb63 0301 	sbc.w	r3, r3, r1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003260:	4659      	mov	r1, fp
 8003262:	018b      	lsls	r3, r1, #6
 8003264:	4651      	mov	r1, sl
 8003266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326a:	4651      	mov	r1, sl
 800326c:	018a      	lsls	r2, r1, #6
 800326e:	4651      	mov	r1, sl
 8003270:	ebb2 0801 	subs.w	r8, r2, r1
 8003274:	4659      	mov	r1, fp
 8003276:	eb63 0901 	sbc.w	r9, r3, r1
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328e:	4690      	mov	r8, r2
 8003290:	4699      	mov	r9, r3
 8003292:	4623      	mov	r3, r4
 8003294:	eb18 0303 	adds.w	r3, r8, r3
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	462b      	mov	r3, r5
 800329c:	eb49 0303 	adc.w	r3, r9, r3
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ae:	4629      	mov	r1, r5
 80032b0:	024b      	lsls	r3, r1, #9
 80032b2:	4621      	mov	r1, r4
 80032b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b8:	4621      	mov	r1, r4
 80032ba:	024a      	lsls	r2, r1, #9
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c2:	2200      	movs	r2, #0
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032cc:	f7fd f808 	bl	80002e0 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d8:	e058      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	4611      	mov	r1, r2
 80032e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0159      	lsls	r1, r3, #5
 8003302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003306:	0150      	lsls	r0, r2, #5
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4641      	mov	r1, r8
 800330e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003312:	4649      	mov	r1, r9
 8003314:	eb63 0b01 	sbc.w	fp, r3, r1
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800332c:	ebb2 040a 	subs.w	r4, r2, sl
 8003330:	eb63 050b 	sbc.w	r5, r3, fp
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	00eb      	lsls	r3, r5, #3
 800333e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4643      	mov	r3, r8
 800334a:	18e3      	adds	r3, r4, r3
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	464b      	mov	r3, r9
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003362:	4629      	mov	r1, r5
 8003364:	028b      	lsls	r3, r1, #10
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336c:	4621      	mov	r1, r4
 800336e:	028a      	lsls	r2, r1, #10
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	61fa      	str	r2, [r7, #28]
 800337c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003380:	f7fc ffae 	bl	80002e0 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800339c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800339e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3750      	adds	r7, #80	@ 0x50
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	080097e4 	.word	0x080097e4

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffdc 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0b5b      	lsrs	r3, r3, #13
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	080097e4 	.word	0x080097e4

08003430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <HAL_RCC_GetClockConfig+0x5c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <HAL_RCC_GetClockConfig+0x60>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40023c00 	.word	0x40023c00

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d012      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034bc:	4b69      	ldr	r3, [pc, #420]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a68      	ldr	r2, [pc, #416]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	4b66      	ldr	r3, [pc, #408]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	4964      	ldr	r1, [pc, #400]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d017      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	4959      	ldr	r1, [pc, #356]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800350c:	d101      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800350e:	2301      	movs	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800352a:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003530:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	494a      	ldr	r1, [pc, #296]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 808b 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b3a      	ldr	r3, [pc, #232]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4a39      	ldr	r2, [pc, #228]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6413      	str	r3, [r2, #64]	@ 0x40
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003590:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a34      	ldr	r2, [pc, #208]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd fe9c 	bl	80012d8 <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fd fe98 	bl	80012d8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e38f      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c2:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d035      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d02e      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003600:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003602:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003608:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d114      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd fe60 	bl	80012d8 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fd fe5c 	bl	80012d8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e351      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ee      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800364a:	d111      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003658:	4b04      	ldr	r3, [pc, #16]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800365a:	400b      	ands	r3, r1
 800365c:	4901      	ldr	r1, [pc, #4]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
 8003662:	e00b      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000
 800366c:	0ffffcff 	.word	0x0ffffcff
 8003670:	4bac      	ldr	r3, [pc, #688]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4aab      	ldr	r2, [pc, #684]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800367a:	6093      	str	r3, [r2, #8]
 800367c:	4ba9      	ldr	r3, [pc, #676]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	49a6      	ldr	r1, [pc, #664]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	4313      	orrs	r3, r2
 800368c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800369a:	4ba2      	ldr	r3, [pc, #648]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a0:	4aa0      	ldr	r2, [pc, #640]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036aa:	4b9e      	ldr	r3, [pc, #632]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	499b      	ldr	r1, [pc, #620]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c8:	4b96      	ldr	r3, [pc, #600]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d6:	4993      	ldr	r1, [pc, #588]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f8:	498a      	ldr	r1, [pc, #552]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800370c:	4b85      	ldr	r3, [pc, #532]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	4982      	ldr	r1, [pc, #520]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800372e:	4b7d      	ldr	r3, [pc, #500]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003734:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4979      	ldr	r1, [pc, #484]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003750:	4b74      	ldr	r3, [pc, #464]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	4971      	ldr	r1, [pc, #452]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003772:	4b6c      	ldr	r3, [pc, #432]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f023 020c 	bic.w	r2, r3, #12
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	4968      	ldr	r1, [pc, #416]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003794:	4b63      	ldr	r3, [pc, #396]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	4960      	ldr	r1, [pc, #384]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	4957      	ldr	r1, [pc, #348]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d8:	4b52      	ldr	r3, [pc, #328]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	494f      	ldr	r1, [pc, #316]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	4946      	ldr	r1, [pc, #280]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800381c:	4b41      	ldr	r3, [pc, #260]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	493e      	ldr	r1, [pc, #248]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800383e:	4b39      	ldr	r3, [pc, #228]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003844:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	4935      	ldr	r1, [pc, #212]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003860:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800386e:	492d      	ldr	r1, [pc, #180]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d011      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003882:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003890:	4924      	ldr	r1, [pc, #144]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800389c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038a0:	d101      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d0:	4914      	ldr	r1, [pc, #80]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f4:	490b      	ldr	r1, [pc, #44]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003908:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003918:	4902      	ldr	r1, [pc, #8]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003934:	4b8a      	ldr	r3, [pc, #552]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	4986      	ldr	r1, [pc, #536]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003958:	4b81      	ldr	r3, [pc, #516]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800395e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003968:	497d      	ldr	r1, [pc, #500]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d006      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80d6 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003984:	4b76      	ldr	r3, [pc, #472]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a75      	ldr	r2, [pc, #468]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800398e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003990:	f7fd fca2 	bl	80012d8 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003998:	f7fd fc9e 	bl	80012d8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e195      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d021      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039de:	0e1b      	lsrs	r3, r3, #24
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	019a      	lsls	r2, r3, #6
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	4958      	ldr	r1, [pc, #352]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a30:	d129      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a32:	4b4b      	ldr	r3, [pc, #300]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a40:	4b47      	ldr	r3, [pc, #284]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a46:	0f1b      	lsrs	r3, r3, #28
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	019a      	lsls	r2, r3, #6
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	493e      	ldr	r1, [pc, #248]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a74:	f023 021f 	bic.w	r2, r3, #31
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	4938      	ldr	r1, [pc, #224]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a92:	4b33      	ldr	r3, [pc, #204]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a98:	0e1b      	lsrs	r3, r3, #24
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa6:	0f1b      	lsrs	r3, r3, #28
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	019a      	lsls	r2, r3, #6
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	061b      	lsls	r3, r3, #24
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	071b      	lsls	r3, r3, #28
 8003ac6:	4926      	ldr	r1, [pc, #152]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	019a      	lsls	r2, r3, #6
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	071b      	lsls	r3, r3, #28
 8003af6:	491a      	ldr	r1, [pc, #104]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003afe:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0a:	f7fd fbe5 	bl	80012d8 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b12:	f7fd fbe1 	bl	80012d8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	@ 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0d8      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f040 80ce 	bne.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd fbc8 	bl	80012d8 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b4c:	f7fd fbc4 	bl	80012d8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d904      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0bb      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b64:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b70:	d0ec      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02e      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12a      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b9a:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	0f1b      	lsrs	r3, r3, #28
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	019a      	lsls	r2, r3, #6
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	4944      	ldr	r1, [pc, #272]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bdc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	493d      	ldr	r1, [pc, #244]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c04:	d11d      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c06:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c14:	4b32      	ldr	r3, [pc, #200]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	019a      	lsls	r2, r3, #6
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	4929      	ldr	r1, [pc, #164]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	0e1b      	lsrs	r3, r3, #24
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	019a      	lsls	r2, r3, #6
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	071b      	lsls	r3, r3, #28
 8003c82:	4917      	ldr	r1, [pc, #92]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	4911      	ldr	r1, [pc, #68]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd fb14 	bl	80012d8 <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb4:	f7fd fb10 	bl	80012d8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e007      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd2:	d1ef      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f841 	bl	8003d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f9e8 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e054      	b.n	8003e6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a26      	ldr	r2, [pc, #152]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d01d      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	@ (8003e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e88 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	@ (8003e8c <HAL_TIM_Base_Start_IT+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x80>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d115      	bne.n	8003e54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_TIM_Base_Start_IT+0xec>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d015      	beq.n	8003e66 <HAL_TIM_Base_Start_IT+0xbe>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e40:	d011      	beq.n	8003e66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	e008      	b.n	8003e66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40001800 	.word	0x40001800
 8003e94:	00010007 	.word	0x00010007

08003e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0202 	mvn.w	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8e9 	bl	80040ba <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8db 	bl	80040a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8ec 	bl	80040ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0204 	mvn.w	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8c3 	bl	80040ba <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8b5 	bl	80040a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8c6 	bl	80040ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0208 	mvn.w	r2, #8
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f89d 	bl	80040ba <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f88f 	bl	80040a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8a0 	bl	80040ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f877 	bl	80040ba <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f869 	bl	80040a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f87a 	bl	80040ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fe30 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f913 	bl	8004258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f90b 	bl	800426c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f834 	bl	80040e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0220 	mvn.w	r2, #32
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8d3 	bl	8004244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a43      	ldr	r2, [pc, #268]	@ (8004218 <TIM_Base_SetConfig+0x120>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004116:	d00f      	beq.n	8004138 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	@ (800421c <TIM_Base_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00b      	beq.n	8004138 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3f      	ldr	r2, [pc, #252]	@ (8004220 <TIM_Base_SetConfig+0x128>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3e      	ldr	r2, [pc, #248]	@ (8004224 <TIM_Base_SetConfig+0x12c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3d      	ldr	r2, [pc, #244]	@ (8004228 <TIM_Base_SetConfig+0x130>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a32      	ldr	r2, [pc, #200]	@ (8004218 <TIM_Base_SetConfig+0x120>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d02b      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004158:	d027      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <TIM_Base_SetConfig+0x124>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d023      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2e      	ldr	r2, [pc, #184]	@ (8004220 <TIM_Base_SetConfig+0x128>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01f      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2d      	ldr	r2, [pc, #180]	@ (8004224 <TIM_Base_SetConfig+0x12c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01b      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <TIM_Base_SetConfig+0x130>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d017      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2b      	ldr	r2, [pc, #172]	@ (800422c <TIM_Base_SetConfig+0x134>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2a      	ldr	r2, [pc, #168]	@ (8004230 <TIM_Base_SetConfig+0x138>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00f      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a29      	ldr	r2, [pc, #164]	@ (8004234 <TIM_Base_SetConfig+0x13c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a28      	ldr	r2, [pc, #160]	@ (8004238 <TIM_Base_SetConfig+0x140>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a27      	ldr	r2, [pc, #156]	@ (800423c <TIM_Base_SetConfig+0x144>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <TIM_Base_SetConfig+0x148>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d108      	bne.n	80041bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <TIM_Base_SetConfig+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0xf2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a10      	ldr	r2, [pc, #64]	@ (8004228 <TIM_Base_SetConfig+0x130>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d103      	bne.n	80041f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40010400 	.word	0x40010400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40001800 	.word	0x40001800
 800423c:	40001c00 	.word	0x40001c00
 8004240:	40002000 	.word	0x40002000

08004244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e040      	b.n	8004314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fe16 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	@ 0x24
 80042ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb16 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8af 	bl	8004430 <UART_SetConfig>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01b      	b.n	8004314 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb95 	bl	8004a3c <UART_CheckIdleState>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004330:	2b20      	cmp	r3, #32
 8004332:	d177      	bne.n	8004424 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Transmit+0x24>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e070      	b.n	8004426 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2221      	movs	r2, #33	@ 0x21
 8004350:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004352:	f7fc ffc1 	bl	80012d8 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x68>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800438c:	e02f      	b.n	80043ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fbf7 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e03b      	b.n	8004426 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	3302      	adds	r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e007      	b.n	80043dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1c9      	bne.n	800438e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	@ 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fbc1 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e005      	b.n	8004426 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4ba6      	ldr	r3, [pc, #664]	@ (80046f4 <UART_SetConfig+0x2c4>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	430b      	orrs	r3, r1
 8004466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a94      	ldr	r2, [pc, #592]	@ (80046f8 <UART_SetConfig+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d120      	bne.n	80044ee <UART_SetConfig+0xbe>
 80044ac:	4b93      	ldr	r3, [pc, #588]	@ (80046fc <UART_SetConfig+0x2cc>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d816      	bhi.n	80044e8 <UART_SetConfig+0xb8>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0x90>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044d7 	.word	0x080044d7
 80044cc:	080044e3 	.word	0x080044e3
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e150      	b.n	8004778 <UART_SetConfig+0x348>
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e14d      	b.n	8004778 <UART_SetConfig+0x348>
 80044dc:	2304      	movs	r3, #4
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e14a      	b.n	8004778 <UART_SetConfig+0x348>
 80044e2:	2308      	movs	r3, #8
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e147      	b.n	8004778 <UART_SetConfig+0x348>
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e144      	b.n	8004778 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a83      	ldr	r2, [pc, #524]	@ (8004700 <UART_SetConfig+0x2d0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d132      	bne.n	800455e <UART_SetConfig+0x12e>
 80044f8:	4b80      	ldr	r3, [pc, #512]	@ (80046fc <UART_SetConfig+0x2cc>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d828      	bhi.n	8004558 <UART_SetConfig+0x128>
 8004506:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <UART_SetConfig+0xdc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004541 	.word	0x08004541
 8004510:	08004559 	.word	0x08004559
 8004514:	08004559 	.word	0x08004559
 8004518:	08004559 	.word	0x08004559
 800451c:	0800454d 	.word	0x0800454d
 8004520:	08004559 	.word	0x08004559
 8004524:	08004559 	.word	0x08004559
 8004528:	08004559 	.word	0x08004559
 800452c:	08004547 	.word	0x08004547
 8004530:	08004559 	.word	0x08004559
 8004534:	08004559 	.word	0x08004559
 8004538:	08004559 	.word	0x08004559
 800453c:	08004553 	.word	0x08004553
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e118      	b.n	8004778 <UART_SetConfig+0x348>
 8004546:	2302      	movs	r3, #2
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e115      	b.n	8004778 <UART_SetConfig+0x348>
 800454c:	2304      	movs	r3, #4
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e112      	b.n	8004778 <UART_SetConfig+0x348>
 8004552:	2308      	movs	r3, #8
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e10f      	b.n	8004778 <UART_SetConfig+0x348>
 8004558:	2310      	movs	r3, #16
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e10c      	b.n	8004778 <UART_SetConfig+0x348>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a68      	ldr	r2, [pc, #416]	@ (8004704 <UART_SetConfig+0x2d4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d120      	bne.n	80045aa <UART_SetConfig+0x17a>
 8004568:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <UART_SetConfig+0x2cc>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004572:	2b30      	cmp	r3, #48	@ 0x30
 8004574:	d013      	beq.n	800459e <UART_SetConfig+0x16e>
 8004576:	2b30      	cmp	r3, #48	@ 0x30
 8004578:	d814      	bhi.n	80045a4 <UART_SetConfig+0x174>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d009      	beq.n	8004592 <UART_SetConfig+0x162>
 800457e:	2b20      	cmp	r3, #32
 8004580:	d810      	bhi.n	80045a4 <UART_SetConfig+0x174>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <UART_SetConfig+0x15c>
 8004586:	2b10      	cmp	r3, #16
 8004588:	d006      	beq.n	8004598 <UART_SetConfig+0x168>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x174>
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e0f2      	b.n	8004778 <UART_SetConfig+0x348>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e0ef      	b.n	8004778 <UART_SetConfig+0x348>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e0ec      	b.n	8004778 <UART_SetConfig+0x348>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e0e9      	b.n	8004778 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e0e6      	b.n	8004778 <UART_SetConfig+0x348>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a56      	ldr	r2, [pc, #344]	@ (8004708 <UART_SetConfig+0x2d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0x1c6>
 80045b4:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045be:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c0:	d013      	beq.n	80045ea <UART_SetConfig+0x1ba>
 80045c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045c6:	2b80      	cmp	r3, #128	@ 0x80
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x1ae>
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d810      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x1a8>
 80045d2:	2b40      	cmp	r3, #64	@ 0x40
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x1b4>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x1c0>
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0cc      	b.n	8004778 <UART_SetConfig+0x348>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0c9      	b.n	8004778 <UART_SetConfig+0x348>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0c6      	b.n	8004778 <UART_SetConfig+0x348>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0c3      	b.n	8004778 <UART_SetConfig+0x348>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0c0      	b.n	8004778 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a44      	ldr	r2, [pc, #272]	@ (800470c <UART_SetConfig+0x2dc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x21c>
 8004600:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <UART_SetConfig+0x2cc>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x210>
 8004610:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x204>
 800461c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x1fe>
 8004626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x20a>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x216>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0a1      	b.n	8004778 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e09e      	b.n	8004778 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e09b      	b.n	8004778 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e098      	b.n	8004778 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e095      	b.n	8004778 <UART_SetConfig+0x348>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <UART_SetConfig+0x2e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d125      	bne.n	80046a2 <UART_SetConfig+0x272>
 8004656:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004660:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004664:	d017      	beq.n	8004696 <UART_SetConfig+0x266>
 8004666:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800466a:	d817      	bhi.n	800469c <UART_SetConfig+0x26c>
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004670:	d00b      	beq.n	800468a <UART_SetConfig+0x25a>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004676:	d811      	bhi.n	800469c <UART_SetConfig+0x26c>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <UART_SetConfig+0x254>
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x260>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x26c>
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e076      	b.n	8004778 <UART_SetConfig+0x348>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e073      	b.n	8004778 <UART_SetConfig+0x348>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e070      	b.n	8004778 <UART_SetConfig+0x348>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e06d      	b.n	8004778 <UART_SetConfig+0x348>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e06a      	b.n	8004778 <UART_SetConfig+0x348>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <UART_SetConfig+0x2e4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d138      	bne.n	800471e <UART_SetConfig+0x2ee>
 80046ac:	4b13      	ldr	r3, [pc, #76]	@ (80046fc <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80046b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046ba:	d017      	beq.n	80046ec <UART_SetConfig+0x2bc>
 80046bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046c0:	d82a      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c6:	d00b      	beq.n	80046e0 <UART_SetConfig+0x2b0>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046cc:	d824      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <UART_SetConfig+0x2aa>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d6:	d006      	beq.n	80046e6 <UART_SetConfig+0x2b6>
 80046d8:	e01e      	b.n	8004718 <UART_SetConfig+0x2e8>
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e04b      	b.n	8004778 <UART_SetConfig+0x348>
 80046e0:	2302      	movs	r3, #2
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e048      	b.n	8004778 <UART_SetConfig+0x348>
 80046e6:	2304      	movs	r3, #4
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e045      	b.n	8004778 <UART_SetConfig+0x348>
 80046ec:	2308      	movs	r3, #8
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e042      	b.n	8004778 <UART_SetConfig+0x348>
 80046f2:	bf00      	nop
 80046f4:	efff69f3 	.word	0xefff69f3
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40023800 	.word	0x40023800
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	40011400 	.word	0x40011400
 8004714:	40007800 	.word	0x40007800
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e02c      	b.n	8004778 <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a72      	ldr	r2, [pc, #456]	@ (80048ec <UART_SetConfig+0x4bc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <UART_SetConfig+0x344>
 8004728:	4b71      	ldr	r3, [pc, #452]	@ (80048f0 <UART_SetConfig+0x4c0>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004732:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004736:	d017      	beq.n	8004768 <UART_SetConfig+0x338>
 8004738:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800473c:	d817      	bhi.n	800476e <UART_SetConfig+0x33e>
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004742:	d00b      	beq.n	800475c <UART_SetConfig+0x32c>
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004748:	d811      	bhi.n	800476e <UART_SetConfig+0x33e>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <UART_SetConfig+0x326>
 800474e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004752:	d006      	beq.n	8004762 <UART_SetConfig+0x332>
 8004754:	e00b      	b.n	800476e <UART_SetConfig+0x33e>
 8004756:	2300      	movs	r3, #0
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e00d      	b.n	8004778 <UART_SetConfig+0x348>
 800475c:	2302      	movs	r3, #2
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e00a      	b.n	8004778 <UART_SetConfig+0x348>
 8004762:	2304      	movs	r3, #4
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e007      	b.n	8004778 <UART_SetConfig+0x348>
 8004768:	2308      	movs	r3, #8
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e004      	b.n	8004778 <UART_SetConfig+0x348>
 800476e:	2310      	movs	r3, #16
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e001      	b.n	8004778 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004780:	d15b      	bne.n	800483a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004782:	7ffb      	ldrb	r3, [r7, #31]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d828      	bhi.n	80047da <UART_SetConfig+0x3aa>
 8004788:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <UART_SetConfig+0x360>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
 80047b0:	080047d3 	.word	0x080047d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fe14 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61b8      	str	r0, [r7, #24]
        break;
 80047ba:	e013      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fe fe24 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80047c0:	61b8      	str	r0, [r7, #24]
        break;
 80047c2:	e00f      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b4b      	ldr	r3, [pc, #300]	@ (80048f4 <UART_SetConfig+0x4c4>)
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e00c      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fe fcf7 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 80047ce:	61b8      	str	r0, [r7, #24]
        break;
 80047d0:	e008      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e004      	b.n	80047e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	77bb      	strb	r3, [r7, #30]
        break;
 80047e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d074      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d916      	bls.n	8004834 <UART_SetConfig+0x404>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d212      	bcs.n	8004834 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	b29a      	uxth	r2, r3
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	4313      	orrs	r3, r2
 8004828:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	89fa      	ldrh	r2, [r7, #14]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e04f      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	77bb      	strb	r3, [r7, #30]
 8004838:	e04c      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d828      	bhi.n	8004892 <UART_SetConfig+0x462>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0x418>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	08004893 	.word	0x08004893
 8004858:	08004883 	.word	0x08004883
 800485c:	08004893 	.word	0x08004893
 8004860:	08004893 	.word	0x08004893
 8004864:	08004893 	.word	0x08004893
 8004868:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fe fdb8 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004870:	61b8      	str	r0, [r7, #24]
        break;
 8004872:	e013      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fe fdc8 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8004878:	61b8      	str	r0, [r7, #24]
        break;
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <UART_SetConfig+0x4c4>)
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e00c      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fe fc9b 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8004886:	61b8      	str	r0, [r7, #24]
        break;
 8004888:	e008      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e004      	b.n	800489c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77bb      	strb	r3, [r7, #30]
        break;
 800489a:	bf00      	nop
    }

    if (pclk != 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085a      	lsrs	r2, r3, #1
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	441a      	add	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d909      	bls.n	80048d0 <UART_SetConfig+0x4a0>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c2:	d205      	bcs.n	80048d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	e001      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40007c00 	.word	0x40007c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	@ 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fc44 	bl	80012d8 <HAL_GetTick>
 8004a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d12e      	bne.n	8004abe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88c 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e062      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d149      	bne.n	8004b60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f856 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03c      	beq.n	8004b60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	623b      	str	r3, [r7, #32]
   return(result);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e011      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3758      	adds	r7, #88	@ 0x58
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9c:	e04f      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d04b      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fc fb97 	bl	80012d8 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e04e      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d037      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b80      	cmp	r3, #128	@ 0x80
 8004bd2:	d034      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	d031      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d110      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2208      	movs	r2, #8
 8004bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f838 	bl	8004c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e029      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d111      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f81e 	bl	8004c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00f      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0a0      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b095      	sub	sp, #84	@ 0x54
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d118      	bne.n	8004d0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6979      	ldr	r1, [r7, #20]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	613b      	str	r3, [r7, #16]
   return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e6      	bne.n	8004cdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d22:	bf00      	nop
 8004d24:	3754      	adds	r7, #84	@ 0x54
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 001c 	add.w	r0, r7, #28
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d121      	bne.n	8004d8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	4b21      	ldr	r3, [pc, #132]	@ (8004de0 <USB_CoreInit+0xb0>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa92 	bl	80052ac <USB_CoreReset>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e010      	b.n	8004db0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa86 	bl	80052ac <USB_CoreReset>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004db0:	7fbb      	ldrb	r3, [r7, #30]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10b      	bne.n	8004dce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f043 0206 	orr.w	r2, r3, #6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dda:	b004      	add	sp, #16
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	ffbdffbf 	.word	0xffbdffbf

08004de4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 0201 	bic.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d115      	bne.n	8004e54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e34:	200a      	movs	r0, #10
 8004e36:	f7fc fa5b 	bl	80012f0 <HAL_Delay>
      ms += 10U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	330a      	adds	r3, #10
 8004e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa25 	bl	8005290 <USB_GetMode>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d01e      	beq.n	8004e8a <USB_SetCurrentMode+0x84>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e50:	d9f0      	bls.n	8004e34 <USB_SetCurrentMode+0x2e>
 8004e52:	e01a      	b.n	8004e8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d115      	bne.n	8004e86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e66:	200a      	movs	r0, #10
 8004e68:	f7fc fa42 	bl	80012f0 <HAL_Delay>
      ms += 10U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	330a      	adds	r3, #10
 8004e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa0c 	bl	8005290 <USB_GetMode>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <USB_SetCurrentMode+0x84>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e82:	d9f0      	bls.n	8004e66 <USB_SetCurrentMode+0x60>
 8004e84:	e001      	b.n	8004e8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e005      	b.n	8004e96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e8e:	d101      	bne.n	8004e94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e009      	b.n	8004ed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3340      	adds	r3, #64	@ 0x40
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0e      	cmp	r3, #14
 8004ed8:	d9f2      	bls.n	8004ec0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11c      	bne.n	8004f1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e005      	b.n	8004f28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10d      	bne.n	8004f58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f44:	2100      	movs	r1, #0
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f968 	bl	800521c <USB_SetDevSpeed>
 8004f4c:	e008      	b.n	8004f60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f4e:	2101      	movs	r1, #1
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f963 	bl	800521c <USB_SetDevSpeed>
 8004f56:	e003      	b.n	8004f60 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f58:	2103      	movs	r1, #3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f95e 	bl	800521c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f60:	2110      	movs	r1, #16
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8fa 	bl	800515c <USB_FlushTxFifo>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f924 	bl	80051c0 <USB_FlushRxFifo>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e043      	b.n	8005034 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fc2:	d118      	bne.n	8004ff6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e013      	b.n	8005008 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e008      	b.n	8005008 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	461a      	mov	r2, r3
 8005004:	2300      	movs	r3, #0
 8005006:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005026:	461a      	mov	r2, r3
 8005028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800502c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3301      	adds	r3, #1
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005038:	461a      	mov	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4293      	cmp	r3, r2
 800503e:	d3b5      	bcc.n	8004fac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e043      	b.n	80050ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800505c:	d118      	bne.n	8005090 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e013      	b.n	80050a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005086:	461a      	mov	r2, r3
 8005088:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e008      	b.n	80050a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	461a      	mov	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c0:	461a      	mov	r2, r3
 80050c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3301      	adds	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050d2:	461a      	mov	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d3b5      	bcc.n	8005046 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80050fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f043 0210 	orr.w	r2, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <USB_DevInit+0x2b4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800511c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f043 0208 	orr.w	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005130:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005134:	2b01      	cmp	r3, #1
 8005136:	d105      	bne.n	8005144 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <USB_DevInit+0x2b8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr
 8005154:	803c3800 	.word	0x803c3800
 8005158:	40000004 	.word	0x40000004

0800515c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005176:	d901      	bls.n	800517c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e01b      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	daf2      	bge.n	800516a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	019b      	lsls	r3, r3, #6
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051a0:	d901      	bls.n	80051a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e006      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d0f0      	beq.n	8005194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051d8:	d901      	bls.n	80051de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e018      	b.n	8005210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	daf2      	bge.n	80051cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2210      	movs	r2, #16
 80051ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051fc:	d901      	bls.n	8005202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e006      	b.n	8005210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d0f0      	beq.n	80051f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005268:	f023 0303 	bic.w	r3, r3, #3
 800526c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800527c:	f043 0302 	orr.w	r3, r3, #2
 8005280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0301 	and.w	r3, r3, #1
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052c4:	d901      	bls.n	80052ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e022      	b.n	8005310 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	daf2      	bge.n	80052b8 <USB_CoreReset+0xc>

  count = 10U;
 80052d2:	230a      	movs	r3, #10
 80052d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80052d6:	e002      	b.n	80052de <USB_CoreReset+0x32>
  {
    count--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f9      	bne.n	80052d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052fc:	d901      	bls.n	8005302 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d0f0      	beq.n	80052f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005332:	f3ef 8305 	mrs	r3, IPSR
 8005336:	60bb      	str	r3, [r7, #8]
  return(result);
 8005338:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533e:	f3ef 8310 	mrs	r3, PRIMASK
 8005342:	607b      	str	r3, [r7, #4]
  return(result);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800534a:	f3ef 8311 	mrs	r3, BASEPRI
 800534e:	603b      	str	r3, [r7, #0]
  return(result);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <osKernelInitialize+0x3a>
 8005356:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <osKernelInitialize+0x64>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d103      	bne.n	8005366 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800535e:	f06f 0305 	mvn.w	r3, #5
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e00c      	b.n	8005380 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005366:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <osKernelInitialize+0x64>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d105      	bne.n	800537a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800536e:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <osKernelInitialize+0x64>)
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e002      	b.n	8005380 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800537a:	f04f 33ff 	mov.w	r3, #4294967295
 800537e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	200008c4 	.word	0x200008c4

08005394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800539a:	f3ef 8305 	mrs	r3, IPSR
 800539e:	60bb      	str	r3, [r7, #8]
  return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a6:	f3ef 8310 	mrs	r3, PRIMASK
 80053aa:	607b      	str	r3, [r7, #4]
  return(result);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b2:	f3ef 8311 	mrs	r3, BASEPRI
 80053b6:	603b      	str	r3, [r7, #0]
  return(result);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <osKernelStart+0x3a>
 80053be:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <osKernelStart+0x68>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d103      	bne.n	80053ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80053c6:	f06f 0305 	mvn.w	r3, #5
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e010      	b.n	80053f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053ce:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <osKernelStart+0x68>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d109      	bne.n	80053ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053d6:	f7ff ffa1 	bl	800531c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053da:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <osKernelStart+0x68>)
 80053dc:	2202      	movs	r2, #2
 80053de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053e0:	f001 feea 	bl	80071b8 <vTaskStartScheduler>
      stat = osOK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e002      	b.n	80053f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053f0:	68fb      	ldr	r3, [r7, #12]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200008c4 	.word	0x200008c4

08005400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b090      	sub	sp, #64	@ 0x40
 8005404:	af04      	add	r7, sp, #16
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005410:	f3ef 8305 	mrs	r3, IPSR
 8005414:	61fb      	str	r3, [r7, #28]
  return(result);
 8005416:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 808f 	bne.w	800553c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541e:	f3ef 8310 	mrs	r3, PRIMASK
 8005422:	61bb      	str	r3, [r7, #24]
  return(result);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800542a:	f3ef 8311 	mrs	r3, BASEPRI
 800542e:	617b      	str	r3, [r7, #20]
  return(result);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <osThreadNew+0x3e>
 8005436:	4b44      	ldr	r3, [pc, #272]	@ (8005548 <osThreadNew+0x148>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d07e      	beq.n	800553c <osThreadNew+0x13c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d07b      	beq.n	800553c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005448:	2318      	movs	r3, #24
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d045      	beq.n	80054e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <osThreadNew+0x6a>
        name = attr->name;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <osThreadNew+0x90>
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b38      	cmp	r3, #56	@ 0x38
 8005482:	d805      	bhi.n	8005490 <osThreadNew+0x90>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <osThreadNew+0x94>
        return (NULL);
 8005490:	2300      	movs	r3, #0
 8005492:	e054      	b.n	800553e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <osThreadNew+0xca>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b5b      	cmp	r3, #91	@ 0x5b
 80054b2:	d90a      	bls.n	80054ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <osThreadNew+0xca>
        mem = 1;
 80054c4:	2301      	movs	r3, #1
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	e010      	b.n	80054ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10c      	bne.n	80054ec <osThreadNew+0xec>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <osThreadNew+0xec>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <osThreadNew+0xec>
          mem = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	e001      	b.n	80054ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d110      	bne.n	8005514 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054fa:	9202      	str	r2, [sp, #8]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f001 fc6f 	bl	8006dec <xTaskCreateStatic>
 800550e:	4603      	mov	r3, r0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e013      	b.n	800553c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d110      	bne.n	800553c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	b29a      	uxth	r2, r3
 800551e:	f107 0310 	add.w	r3, r7, #16
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f001 fcc3 	bl	8006eb8 <xTaskCreate>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <osThreadNew+0x13c>
          hTask = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800553c:	693b      	ldr	r3, [r7, #16]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3730      	adds	r7, #48	@ 0x30
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200008c4 	.word	0x200008c4

0800554c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005554:	f3ef 8305 	mrs	r3, IPSR
 8005558:	613b      	str	r3, [r7, #16]
  return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10f      	bne.n	8005580 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005560:	f3ef 8310 	mrs	r3, PRIMASK
 8005564:	60fb      	str	r3, [r7, #12]
  return(result);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800556c:	f3ef 8311 	mrs	r3, BASEPRI
 8005570:	60bb      	str	r3, [r7, #8]
  return(result);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <osDelay+0x3c>
 8005578:	4b0a      	ldr	r3, [pc, #40]	@ (80055a4 <osDelay+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d103      	bne.n	8005588 <osDelay+0x3c>
    stat = osErrorISR;
 8005580:	f06f 0305 	mvn.w	r3, #5
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fdd8 	bl	8007148 <vTaskDelay>
    }
  }

  return (stat);
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200008c4 	.word	0x200008c4

080055a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	@ 0x30
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b8:	f3ef 8305 	mrs	r3, IPSR
 80055bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80055be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8086 	bne.w	80056d2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ca:	617b      	str	r3, [r7, #20]
  return(result);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d105      	bne.n	80055de <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055d2:	f3ef 8311 	mrs	r3, BASEPRI
 80055d6:	613b      	str	r3, [r7, #16]
  return(result);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <osSemaphoreNew+0x3e>
 80055de:	4b3f      	ldr	r3, [pc, #252]	@ (80056dc <osSemaphoreNew+0x134>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d075      	beq.n	80056d2 <osSemaphoreNew+0x12a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d072      	beq.n	80056d2 <osSemaphoreNew+0x12a>
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d86e      	bhi.n	80056d2 <osSemaphoreNew+0x12a>
    mem = -1;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d015      	beq.n	800562c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d006      	beq.n	8005616 <osSemaphoreNew+0x6e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b4f      	cmp	r3, #79	@ 0x4f
 800560e:	d902      	bls.n	8005616 <osSemaphoreNew+0x6e>
        mem = 1;
 8005610:	2301      	movs	r3, #1
 8005612:	623b      	str	r3, [r7, #32]
 8005614:	e00c      	b.n	8005630 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <osSemaphoreNew+0x88>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <osSemaphoreNew+0x88>
          mem = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	e001      	b.n	8005630 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d04c      	beq.n	80056d2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d128      	bne.n	8005690 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10a      	bne.n	800565a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2203      	movs	r2, #3
 800564a:	9200      	str	r2, [sp, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	2100      	movs	r1, #0
 8005650:	2001      	movs	r0, #1
 8005652:	f000 fbc3 	bl	8005ddc <xQueueGenericCreateStatic>
 8005656:	6278      	str	r0, [r7, #36]	@ 0x24
 8005658:	e005      	b.n	8005666 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800565a:	2203      	movs	r2, #3
 800565c:	2100      	movs	r1, #0
 800565e:	2001      	movs	r0, #1
 8005660:	f000 fc43 	bl	8005eea <xQueueGenericCreate>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d022      	beq.n	80056b2 <osSemaphoreNew+0x10a>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01f      	beq.n	80056b2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005672:	2300      	movs	r3, #0
 8005674:	2200      	movs	r2, #0
 8005676:	2100      	movs	r1, #0
 8005678:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800567a:	f000 fd13 	bl	80060a4 <xQueueGenericSend>
 800567e:	4603      	mov	r3, r0
 8005680:	2b01      	cmp	r3, #1
 8005682:	d016      	beq.n	80056b2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005686:	f001 f9db 	bl	8006a40 <vQueueDelete>
            hSemaphore = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e010      	b.n	80056b2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d108      	bne.n	80056a8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	461a      	mov	r2, r3
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fc89 	bl	8005fb6 <xQueueCreateCountingSemaphoreStatic>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80056a6:	e004      	b.n	80056b2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fcc0 	bl	8006030 <xQueueCreateCountingSemaphore>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e001      	b.n	80056ca <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80056ca:	69f9      	ldr	r1, [r7, #28]
 80056cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056ce:	f001 fb05 	bl	8006cdc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3728      	adds	r7, #40	@ 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200008c4 	.word	0x200008c4

080056e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80056f8:	f06f 0303 	mvn.w	r3, #3
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e04b      	b.n	8005798 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005700:	f3ef 8305 	mrs	r3, IPSR
 8005704:	617b      	str	r3, [r7, #20]
  return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10f      	bne.n	800572c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800570c:	f3ef 8310 	mrs	r3, PRIMASK
 8005710:	613b      	str	r3, [r7, #16]
  return(result);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005718:	f3ef 8311 	mrs	r3, BASEPRI
 800571c:	60fb      	str	r3, [r7, #12]
  return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d026      	beq.n	8005772 <osSemaphoreAcquire+0x92>
 8005724:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <osSemaphoreAcquire+0xc4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d122      	bne.n	8005772 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005732:	f06f 0303 	mvn.w	r3, #3
 8005736:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005738:	e02d      	b.n	8005796 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800573e:	f107 0308 	add.w	r3, r7, #8
 8005742:	461a      	mov	r2, r3
 8005744:	2100      	movs	r1, #0
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f001 f8f2 	bl	8006930 <xQueueReceiveFromISR>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d003      	beq.n	800575a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005752:	f06f 0302 	mvn.w	r3, #2
 8005756:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005758:	e01d      	b.n	8005796 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <osSemaphoreAcquire+0xb6>
 8005760:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <osSemaphoreAcquire+0xc8>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005770:	e011      	b.n	8005796 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	69b8      	ldr	r0, [r7, #24]
 8005776:	f000 ffc3 	bl	8006700 <xQueueSemaphoreTake>
 800577a:	4603      	mov	r3, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	d00b      	beq.n	8005798 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005786:	f06f 0301 	mvn.w	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e004      	b.n	8005798 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800578e:	f06f 0302 	mvn.w	r3, #2
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	e000      	b.n	8005798 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005796:	bf00      	nop
      }
    }
  }

  return (stat);
 8005798:	69fb      	ldr	r3, [r7, #28]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200008c4 	.word	0x200008c4
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80057c2:	f06f 0303 	mvn.w	r3, #3
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e03e      	b.n	8005848 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ca:	f3ef 8305 	mrs	r3, IPSR
 80057ce:	617b      	str	r3, [r7, #20]
  return(result);
 80057d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d6:	f3ef 8310 	mrs	r3, PRIMASK
 80057da:	613b      	str	r3, [r7, #16]
  return(result);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057e2:	f3ef 8311 	mrs	r3, BASEPRI
 80057e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <osSemaphoreRelease+0x80>
 80057ee:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <osSemaphoreRelease+0xa8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d11a      	bne.n	800582c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	69b8      	ldr	r0, [r7, #24]
 8005802:	f000 fdfc 	bl	80063fe <xQueueGiveFromISR>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d003      	beq.n	8005814 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800580c:	f06f 0302 	mvn.w	r3, #2
 8005810:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005812:	e018      	b.n	8005846 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d015      	beq.n	8005846 <osSemaphoreRelease+0x9a>
 800581a:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <osSemaphoreRelease+0xac>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800582a:	e00c      	b.n	8005846 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 fc36 	bl	80060a4 <xQueueGenericSend>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d004      	beq.n	8005848 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800583e:	f06f 0302 	mvn.w	r3, #2
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e000      	b.n	8005848 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005846:	bf00      	nop
    }
  }

  return (stat);
 8005848:	69fb      	ldr	r3, [r7, #28]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200008c4 	.word	0x200008c4
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	@ 0x30
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586c:	f3ef 8305 	mrs	r3, IPSR
 8005870:	61bb      	str	r3, [r7, #24]
  return(result);
 8005872:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005874:	2b00      	cmp	r3, #0
 8005876:	d16f      	bne.n	8005958 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005878:	f3ef 8310 	mrs	r3, PRIMASK
 800587c:	617b      	str	r3, [r7, #20]
  return(result);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005884:	f3ef 8311 	mrs	r3, BASEPRI
 8005888:	613b      	str	r3, [r7, #16]
  return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <osMessageQueueNew+0x3c>
 8005890:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <osMessageQueueNew+0x108>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d05f      	beq.n	8005958 <osMessageQueueNew+0xfc>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d05c      	beq.n	8005958 <osMessageQueueNew+0xfc>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d059      	beq.n	8005958 <osMessageQueueNew+0xfc>
    mem = -1;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d029      	beq.n	8005904 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <osMessageQueueNew+0x82>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80058be:	d90e      	bls.n	80058de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <osMessageQueueNew+0x82>
        mem = 1;
 80058d8:	2301      	movs	r3, #1
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	e014      	b.n	8005908 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d110      	bne.n	8005908 <osMessageQueueNew+0xac>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10c      	bne.n	8005908 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <osMessageQueueNew+0xac>
          mem = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	e001      	b.n	8005908 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10b      	bne.n	8005926 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2100      	movs	r1, #0
 8005918:	9100      	str	r1, [sp, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fa5d 	bl	8005ddc <xQueueGenericCreateStatic>
 8005922:	6278      	str	r0, [r7, #36]	@ 0x24
 8005924:	e008      	b.n	8005938 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800592c:	2200      	movs	r2, #0
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fada 	bl	8005eea <xQueueGenericCreate>
 8005936:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	e001      	b.n	8005950 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005950:	69f9      	ldr	r1, [r7, #28]
 8005952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005954:	f001 f9c2 	bl	8006cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800595a:	4618      	mov	r0, r3
 800595c:	3728      	adds	r7, #40	@ 0x28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200008c4 	.word	0x200008c4

08005968 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005980:	f3ef 8305 	mrs	r3, IPSR
 8005984:	61fb      	str	r3, [r7, #28]
  return(result);
 8005986:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10f      	bne.n	80059ac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598c:	f3ef 8310 	mrs	r3, PRIMASK
 8005990:	61bb      	str	r3, [r7, #24]
  return(result);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005998:	f3ef 8311 	mrs	r3, BASEPRI
 800599c:	617b      	str	r3, [r7, #20]
  return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d02c      	beq.n	80059fe <osMessageQueuePut+0x96>
 80059a4:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <osMessageQueuePut+0xe0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d128      	bne.n	80059fe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <osMessageQueuePut+0x56>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <osMessageQueuePut+0x56>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80059be:	f06f 0303 	mvn.w	r3, #3
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059c4:	e039      	b.n	8005a3a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80059ca:	f107 0210 	add.w	r2, r7, #16
 80059ce:	2300      	movs	r3, #0
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	6a38      	ldr	r0, [r7, #32]
 80059d4:	f000 fc70 	bl	80062b8 <xQueueGenericSendFromISR>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d003      	beq.n	80059e6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80059de:	f06f 0302 	mvn.w	r3, #2
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059e4:	e029      	b.n	8005a3a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d026      	beq.n	8005a3a <osMessageQueuePut+0xd2>
 80059ec:	4b17      	ldr	r3, [pc, #92]	@ (8005a4c <osMessageQueuePut+0xe4>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059fc:	e01d      	b.n	8005a3a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <osMessageQueuePut+0xa2>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005a0a:	f06f 0303 	mvn.w	r3, #3
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a10:	e014      	b.n	8005a3c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6a38      	ldr	r0, [r7, #32]
 8005a1a:	f000 fb43 	bl	80060a4 <xQueueGenericSend>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d00b      	beq.n	8005a3c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005a2a:	f06f 0301 	mvn.w	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a30:	e004      	b.n	8005a3c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005a32:	f06f 0302 	mvn.w	r3, #2
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a38:	e000      	b.n	8005a3c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3728      	adds	r7, #40	@ 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	200008c4 	.word	0x200008c4
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	@ 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a66:	f3ef 8305 	mrs	r3, IPSR
 8005a6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a6c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a72:	f3ef 8310 	mrs	r3, PRIMASK
 8005a76:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a82:	617b      	str	r3, [r7, #20]
  return(result);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02c      	beq.n	8005ae4 <osMessageQueueGet+0x94>
 8005a8a:	4b28      	ldr	r3, [pc, #160]	@ (8005b2c <osMessageQueueGet+0xdc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d128      	bne.n	8005ae4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <osMessageQueueGet+0x54>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <osMessageQueueGet+0x54>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005aa4:	f06f 0303 	mvn.w	r3, #3
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005aaa:	e038      	b.n	8005b1e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ab0:	f107 0310 	add.w	r3, r7, #16
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	6a38      	ldr	r0, [r7, #32]
 8005aba:	f000 ff39 	bl	8006930 <xQueueReceiveFromISR>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d003      	beq.n	8005acc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005ac4:	f06f 0302 	mvn.w	r3, #2
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005aca:	e028      	b.n	8005b1e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d025      	beq.n	8005b1e <osMessageQueueGet+0xce>
 8005ad2:	4b17      	ldr	r3, [pc, #92]	@ (8005b30 <osMessageQueueGet+0xe0>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae2:	e01c      	b.n	8005b1e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <osMessageQueueGet+0xa0>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005af0:	f06f 0303 	mvn.w	r3, #3
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af6:	e013      	b.n	8005b20 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	6a38      	ldr	r0, [r7, #32]
 8005afe:	f000 fd17 	bl	8006530 <xQueueReceive>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d00b      	beq.n	8005b20 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005b0e:	f06f 0301 	mvn.w	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b14:	e004      	b.n	8005b20 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1c:	e000      	b.n	8005b20 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3728      	adds	r7, #40	@ 0x28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200008c4 	.word	0x200008c4
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a07      	ldr	r2, [pc, #28]	@ (8005b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a06      	ldr	r2, [pc, #24]	@ (8005b64 <vApplicationGetIdleTaskMemory+0x30>)
 8005b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2280      	movs	r2, #128	@ 0x80
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	200008c8 	.word	0x200008c8
 8005b64:	20000924 	.word	0x20000924

08005b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a07      	ldr	r2, [pc, #28]	@ (8005b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4a06      	ldr	r2, [pc, #24]	@ (8005b98 <vApplicationGetTimerTaskMemory+0x30>)
 8005b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20000b24 	.word	0x20000b24
 8005b98:	20000b80 	.word	0x20000b80

08005b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0208 	add.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f103 0208 	add.w	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f103 0208 	add.w	r2, r3, #8
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d103      	bne.n	8005c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e00c      	b.n	8005c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3308      	adds	r3, #8
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e002      	b.n	8005c6c <vListInsert+0x2e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d2f6      	bcs.n	8005c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6892      	ldr	r2, [r2, #8]
 8005cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d103      	bne.n	8005ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10d      	bne.n	8005d34 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	b672      	cpsid	i
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	b662      	cpsie	i
 8005d2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	e7fd      	b.n	8005d30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005d34:	f002 fd02 	bl	800873c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	441a      	add	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	3b01      	subs	r3, #1
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	441a      	add	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	22ff      	movs	r2, #255	@ 0xff
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	22ff      	movs	r2, #255	@ 0xff
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d114      	bne.n	8005db4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3310      	adds	r3, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fcaa 	bl	80076f0 <xTaskRemoveFromEventList>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <xQueueGenericReset+0xd4>)
 8005da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	e009      	b.n	8005dc8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3310      	adds	r3, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff feef 	bl	8005b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3324      	adds	r3, #36	@ 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff feea 	bl	8005b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dc8:	f002 fcee 	bl	80087a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dcc:	2301      	movs	r3, #1
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	@ 0x38
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10d      	bne.n	8005e0c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	b672      	cpsid	i
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	b662      	cpsie	i
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	b672      	cpsid	i
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	b662      	cpsie	i
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <xQueueGenericCreateStatic+0x5e>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <xQueueGenericCreateStatic+0x62>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueGenericCreateStatic+0x64>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	623b      	str	r3, [r7, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <xQueueGenericCreateStatic+0x90>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueGenericCreateStatic+0x94>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueGenericCreateStatic+0x96>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	61fb      	str	r3, [r7, #28]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e92:	2350      	movs	r3, #80	@ 0x50
 8005e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b50      	cmp	r3, #80	@ 0x50
 8005e9a:	d00d      	beq.n	8005eb8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	b672      	cpsid	i
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	b662      	cpsie	i
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f848 	bl	8005f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3730      	adds	r7, #48	@ 0x30
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08a      	sub	sp, #40	@ 0x28
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <xQueueGenericCreate+0x30>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	b672      	cpsid	i
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	b662      	cpsie	i
 8005f12:	613b      	str	r3, [r7, #16]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e004      	b.n	8005f30 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3350      	adds	r3, #80	@ 0x50
 8005f34:	4618      	mov	r0, r3
 8005f36:	f002 fd2f 	bl	8008998 <pvPortMalloc>
 8005f3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	3350      	adds	r3, #80	@ 0x50
 8005f4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f54:	79fa      	ldrb	r2, [r7, #7]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f805 	bl	8005f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f66:	69bb      	ldr	r3, [r7, #24]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e002      	b.n	8005f92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	69b8      	ldr	r0, [r7, #24]
 8005fa2:	f7ff feaf 	bl	8005d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b08a      	sub	sp, #40	@ 0x28
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10d      	bne.n	8005fe4 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	b672      	cpsid	i
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	b662      	cpsie	i
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d90d      	bls.n	8006008 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	b672      	cpsid	i
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	b662      	cpsie	i
 8006000:	617b      	str	r3, [r7, #20]
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	e7fd      	b.n	8006004 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006008:	2302      	movs	r3, #2
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	2100      	movs	r1, #0
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fee2 	bl	8005ddc <xQueueGenericCreateStatic>
 8006018:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006026:	69fb      	ldr	r3, [r7, #28]
	}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10d      	bne.n	800605c <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	613b      	str	r3, [r7, #16]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d90d      	bls.n	8006080 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	60fb      	str	r3, [r7, #12]
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006080:	2202      	movs	r2, #2
 8006082:	2100      	movs	r1, #0
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff30 	bl	8005eea <xQueueGenericCreate>
 800608a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006098:	697b      	ldr	r3, [r7, #20]
	}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08e      	sub	sp, #56	@ 0x38
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060b2:	2300      	movs	r3, #0
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <xQueueGenericSend+0x38>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSend+0x46>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSend+0x4a>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSend+0x4c>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <xQueueGenericSend+0x6c>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	b672      	cpsid	i
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	b662      	cpsie	i
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d103      	bne.n	800611e <xQueueGenericSend+0x7a>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <xQueueGenericSend+0x7e>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericSend+0x80>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <xQueueGenericSend+0xa0>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	b672      	cpsid	i
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	b662      	cpsie	i
 800613c:	623b      	str	r3, [r7, #32]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006144:	f001 fc9c 	bl	8007a80 <xTaskGetSchedulerState>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <xQueueGenericSend+0xb0>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <xQueueGenericSend+0xb4>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <xQueueGenericSend+0xb6>
 8006158:	2300      	movs	r3, #0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10d      	bne.n	800617a <xQueueGenericSend+0xd6>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006162:	b672      	cpsid	i
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	b662      	cpsie	i
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800617a:	f002 fadf 	bl	800873c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006186:	429a      	cmp	r2, r3
 8006188:	d302      	bcc.n	8006190 <xQueueGenericSend+0xec>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d129      	bne.n	80061e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006196:	f000 fc91 	bl	8006abc <prvCopyDataToQueue>
 800619a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	3324      	adds	r3, #36	@ 0x24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 faa1 	bl	80076f0 <xTaskRemoveFromEventList>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d013      	beq.n	80061dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061b4:	4b3f      	ldr	r3, [pc, #252]	@ (80062b4 <xQueueGenericSend+0x210>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	e00a      	b.n	80061dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061cc:	4b39      	ldr	r3, [pc, #228]	@ (80062b4 <xQueueGenericSend+0x210>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061dc:	f002 fae4 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e063      	b.n	80062ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ea:	f002 fadd 	bl	80087a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e05c      	b.n	80062ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fadd 	bl	80077bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006206:	f002 facf 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800620a:	f001 f841 	bl	8007290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800620e:	f002 fa95 	bl	800873c <vPortEnterCritical>
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006218:	b25b      	sxtb	r3, r3
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d103      	bne.n	8006228 <xQueueGenericSend+0x184>
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800622e:	b25b      	sxtb	r3, r3
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x19a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800623e:	f002 fab3 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006242:	1d3a      	adds	r2, r7, #4
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 facc 	bl	80077e8 <xTaskCheckForTimeOut>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d124      	bne.n	80062a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006258:	f000 fd28 	bl	8006cac <prvIsQueueFull>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f9ea 	bl	8007644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006272:	f000 fcb3 	bl	8006bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006276:	f001 f819 	bl	80072ac <xTaskResumeAll>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	f47f af7c 	bne.w	800617a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006282:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <xQueueGenericSend+0x210>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	e772      	b.n	800617a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006296:	f000 fca1 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800629a:	f001 f807 	bl	80072ac <xTaskResumeAll>
 800629e:	e76c      	b.n	800617a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062a2:	f000 fc9b 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062a6:	f001 f801 	bl	80072ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3738      	adds	r7, #56	@ 0x38
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	@ 0x38
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	b672      	cpsid	i
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	b662      	cpsie	i
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <xQueueGenericSendFromISR+0x42>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xQueueGenericSendFromISR+0x46>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <xQueueGenericSendFromISR+0x48>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10d      	bne.n	8006320 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	623b      	str	r3, [r7, #32]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d103      	bne.n	800632e <xQueueGenericSendFromISR+0x76>
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <xQueueGenericSendFromISR+0x7a>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <xQueueGenericSendFromISR+0x7c>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	b672      	cpsid	i
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	b662      	cpsie	i
 800634c:	61fb      	str	r3, [r7, #28]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006354:	f002 fada 	bl	800890c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006358:	f3ef 8211 	mrs	r2, BASEPRI
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	b672      	cpsid	i
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	b662      	cpsie	i
 8006370:	61ba      	str	r2, [r7, #24]
 8006372:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006374:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	429a      	cmp	r2, r3
 8006382:	d302      	bcc.n	800638a <xQueueGenericSendFromISR+0xd2>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d12c      	bne.n	80063e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800639a:	f000 fb8f 	bl	8006abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800639e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d112      	bne.n	80063ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	3324      	adds	r3, #36	@ 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f99b 	bl	80076f0 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e007      	b.n	80063de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	b25a      	sxtb	r2, r3
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063de:	2301      	movs	r3, #1
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80063e2:	e001      	b.n	80063e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3738      	adds	r7, #56	@ 0x38
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b08e      	sub	sp, #56	@ 0x38
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <xQueueGiveFromISR+0x30>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
 8006426:	623b      	str	r3, [r7, #32]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <xQueueGiveFromISR+0x54>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	b672      	cpsid	i
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	b662      	cpsie	i
 800644a:	61fb      	str	r3, [r7, #28]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <xQueueGiveFromISR+0x64>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <xQueueGiveFromISR+0x68>
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <xQueueGiveFromISR+0x6a>
 8006466:	2300      	movs	r3, #0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10d      	bne.n	8006488 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	61bb      	str	r3, [r7, #24]
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006488:	f002 fa40 	bl	800890c <vPortValidateInterruptPriority>
	__asm volatile
 800648c:	f3ef 8211 	mrs	r2, BASEPRI
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	b672      	cpsid	i
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	b662      	cpsie	i
 80064a4:	617a      	str	r2, [r7, #20]
 80064a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80064a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d22b      	bcs.n	8006514 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d112      	bne.n	80064fe <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	3324      	adds	r3, #36	@ 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f903 	bl	80076f0 <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2201      	movs	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	e007      	b.n	800650e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006502:	3301      	adds	r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	b25a      	sxtb	r2, r3
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800650e:	2301      	movs	r3, #1
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
 8006512:	e001      	b.n	8006518 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006514:	2300      	movs	r3, #0
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f383 8811 	msr	BASEPRI, r3
}
 8006522:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006526:	4618      	mov	r0, r3
 8006528:	3738      	adds	r7, #56	@ 0x38
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08c      	sub	sp, #48	@ 0x30
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10d      	bne.n	8006566 <xQueueReceive+0x36>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	623b      	str	r3, [r7, #32]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <xQueueReceive+0x44>
 800656c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <xQueueReceive+0x48>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <xQueueReceive+0x4a>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <xQueueReceive+0x6a>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	61fb      	str	r3, [r7, #28]
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	e7fd      	b.n	8006596 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800659a:	f001 fa71 	bl	8007a80 <xTaskGetSchedulerState>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <xQueueReceive+0x7a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <xQueueReceive+0x7e>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueReceive+0x80>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10d      	bne.n	80065d0 <xQueueReceive+0xa0>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	61bb      	str	r3, [r7, #24]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d0:	f002 f8b4 	bl	800873c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01f      	beq.n	8006620 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e4:	f000 fad4 	bl	8006b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	3310      	adds	r3, #16
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f877 	bl	80076f0 <xTaskRemoveFromEventList>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006608:	4b3c      	ldr	r3, [pc, #240]	@ (80066fc <xQueueReceive+0x1cc>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006618:	f002 f8c6 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 800661c:	2301      	movs	r3, #1
 800661e:	e069      	b.n	80066f4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006626:	f002 f8bf 	bl	80087a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800662a:	2300      	movs	r3, #0
 800662c:	e062      	b.n	80066f4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006634:	f107 0310 	add.w	r3, r7, #16
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f8bf 	bl	80077bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006642:	f002 f8b1 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006646:	f000 fe23 	bl	8007290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800664a:	f002 f877 	bl	800873c <vPortEnterCritical>
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006654:	b25b      	sxtb	r3, r3
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d103      	bne.n	8006664 <xQueueReceive+0x134>
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800666a:	b25b      	sxtb	r3, r3
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d103      	bne.n	800667a <xQueueReceive+0x14a>
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800667a:	f002 f895 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800667e:	1d3a      	adds	r2, r7, #4
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 f8ae 	bl	80077e8 <xTaskCheckForTimeOut>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d123      	bne.n	80066da <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006694:	f000 faf4 	bl	8006c80 <prvIsQueueEmpty>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d017      	beq.n	80066ce <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	3324      	adds	r3, #36	@ 0x24
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 ffcc 	bl	8007644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ae:	f000 fa95 	bl	8006bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b2:	f000 fdfb 	bl	80072ac <xTaskResumeAll>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d189      	bne.n	80065d0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80066bc:	4b0f      	ldr	r3, [pc, #60]	@ (80066fc <xQueueReceive+0x1cc>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	e780      	b.n	80065d0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d0:	f000 fa84 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066d4:	f000 fdea 	bl	80072ac <xTaskResumeAll>
 80066d8:	e77a      	b.n	80065d0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066dc:	f000 fa7e 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e0:	f000 fde4 	bl	80072ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e6:	f000 facb 	bl	8006c80 <prvIsQueueEmpty>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f43f af6f 	beq.w	80065d0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3730      	adds	r7, #48	@ 0x30
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	e000ed04 	.word	0xe000ed04

08006700 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	@ 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	623b      	str	r3, [r7, #32]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	b672      	cpsid	i
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	b662      	cpsie	i
 8006754:	61fb      	str	r3, [r7, #28]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800675c:	f001 f990 	bl	8007a80 <xTaskGetSchedulerState>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <xQueueSemaphoreTake+0x6c>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueSemaphoreTake+0x70>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <xQueueSemaphoreTake+0x72>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	b672      	cpsid	i
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	b662      	cpsie	i
 800678a:	61bb      	str	r3, [r7, #24]
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	e7fd      	b.n	800678e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006792:	f001 ffd3 	bl	800873c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d024      	beq.n	80067ec <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067b2:	f001 fae7 	bl	8007d84 <pvTaskIncrementMutexHeldCount>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00f      	beq.n	80067e4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	3310      	adds	r3, #16
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 ff91 	bl	80076f0 <xTaskRemoveFromEventList>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067d4:	4b55      	ldr	r3, [pc, #340]	@ (800692c <xQueueSemaphoreTake+0x22c>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067e4:	f001 ffe0 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e09a      	b.n	8006922 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d114      	bne.n	800681c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	b672      	cpsid	i
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	b662      	cpsie	i
 800680c:	617b      	str	r3, [r7, #20]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006814:	f001 ffc8 	bl	80087a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006818:	2300      	movs	r3, #0
 800681a:	e082      	b.n	8006922 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800681c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006822:	f107 030c 	add.w	r3, r7, #12
 8006826:	4618      	mov	r0, r3
 8006828:	f000 ffc8 	bl	80077bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006830:	f001 ffba 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006834:	f000 fd2c 	bl	8007290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006838:	f001 ff80 	bl	800873c <vPortEnterCritical>
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d103      	bne.n	8006852 <xQueueSemaphoreTake+0x152>
 800684a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006858:	b25b      	sxtb	r3, r3
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d103      	bne.n	8006868 <xQueueSemaphoreTake+0x168>
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006868:	f001 ff9e 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800686c:	463a      	mov	r2, r7
 800686e:	f107 030c 	add.w	r3, r7, #12
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f000 ffb7 	bl	80077e8 <xTaskCheckForTimeOut>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d132      	bne.n	80068e6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006880:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006882:	f000 f9fd 	bl	8006c80 <prvIsQueueEmpty>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d026      	beq.n	80068da <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006894:	f001 ff52 	bl	800873c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f90d 	bl	8007abc <xTaskPriorityInherit>
 80068a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80068a4:	f001 ff80 	bl	80087a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068aa:	3324      	adds	r3, #36	@ 0x24
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fec7 	bl	8007644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068b8:	f000 f990 	bl	8006bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068bc:	f000 fcf6 	bl	80072ac <xTaskResumeAll>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f af65 	bne.w	8006792 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80068c8:	4b18      	ldr	r3, [pc, #96]	@ (800692c <xQueueSemaphoreTake+0x22c>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	e75b      	b.n	8006792 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068dc:	f000 f97e 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068e0:	f000 fce4 	bl	80072ac <xTaskResumeAll>
 80068e4:	e755      	b.n	8006792 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068e8:	f000 f978 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068ec:	f000 fcde 	bl	80072ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068f2:	f000 f9c5 	bl	8006c80 <prvIsQueueEmpty>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f43f af4a 	beq.w	8006792 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00d      	beq.n	8006920 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006904:	f001 ff1a 	bl	800873c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006908:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800690a:	f000 f8bf 	bl	8006a8c <prvGetDisinheritPriorityAfterTimeout>
 800690e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006916:	4618      	mov	r0, r3
 8006918:	f001 f9ac 	bl	8007c74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800691c:	f001 ff44 	bl	80087a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006920:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006922:	4618      	mov	r0, r3
 8006924:	3738      	adds	r7, #56	@ 0x38
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08e      	sub	sp, #56	@ 0x38
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	b672      	cpsid	i
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	b662      	cpsie	i
 800695a:	623b      	str	r3, [r7, #32]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <xQueueReceiveFromISR+0x40>
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <xQueueReceiveFromISR+0x44>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <xQueueReceiveFromISR+0x46>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	b672      	cpsid	i
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	b662      	cpsie	i
 800698e:	61fb      	str	r3, [r7, #28]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006996:	f001 ffb9 	bl	800890c <vPortValidateInterruptPriority>
	__asm volatile
 800699a:	f3ef 8211 	mrs	r2, BASEPRI
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	b672      	cpsid	i
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	b662      	cpsie	i
 80069b2:	61ba      	str	r2, [r7, #24]
 80069b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02f      	beq.n	8006a26 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d4:	f000 f8dc 	bl	8006b90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80069e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d112      	bne.n	8006a10 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	3310      	adds	r3, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fe7a 	bl	80076f0 <xTaskRemoveFromEventList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e007      	b.n	8006a20 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	b25a      	sxtb	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a20:	2301      	movs	r3, #1
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a24:	e001      	b.n	8006a2a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3738      	adds	r7, #56	@ 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <vQueueDelete+0x2e>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	b672      	cpsid	i
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	b662      	cpsie	i
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f95e 	bl	8006d30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f002 f858 	bl	8008b34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e001      	b.n	8006aae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aae:	68fb      	ldr	r3, [r7, #12]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10d      	bne.n	8006af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d14d      	bne.n	8006b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f850 	bl	8007b8c <xTaskPriorityDisinherit>
 8006aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	e043      	b.n	8006b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d119      	bne.n	8006b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6858      	ldr	r0, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b04:	461a      	mov	r2, r3
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	f002 f99a 	bl	8008e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d32b      	bcc.n	8006b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	e026      	b.n	8006b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68d8      	ldr	r0, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	f002 f980 	bl	8008e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b48:	425b      	negs	r3, r3
 8006b4a:	441a      	add	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d207      	bcs.n	8006b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	425b      	negs	r3, r3
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d105      	bne.n	8006b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d303      	bcc.n	8006bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68d9      	ldr	r1, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f002 f936 	bl	8008e40 <memcpy>
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006be4:	f001 fdaa 	bl	800873c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf0:	e011      	b.n	8006c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d012      	beq.n	8006c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3324      	adds	r3, #36	@ 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fd76 	bl	80076f0 <xTaskRemoveFromEventList>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c0a:	f000 fe55 	bl	80078b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dce9      	bgt.n	8006bf2 <prvUnlockQueue+0x16>
 8006c1e:	e000      	b.n	8006c22 <prvUnlockQueue+0x46>
					break;
 8006c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	22ff      	movs	r2, #255	@ 0xff
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c2a:	f001 fdbd 	bl	80087a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c2e:	f001 fd85 	bl	800873c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c3a:	e011      	b.n	8006c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d012      	beq.n	8006c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3310      	adds	r3, #16
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fd51 	bl	80076f0 <xTaskRemoveFromEventList>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c54:	f000 fe30 	bl	80078b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dce9      	bgt.n	8006c3c <prvUnlockQueue+0x60>
 8006c68:	e000      	b.n	8006c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	22ff      	movs	r2, #255	@ 0xff
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006c74:	f001 fd98 	bl	80087a8 <vPortExitCritical>
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c88:	f001 fd58 	bl	800873c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e001      	b.n	8006c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c9e:	f001 fd83 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb4:	f001 fd42 	bl	800873c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d102      	bne.n	8006cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e001      	b.n	8006cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f001 fd6b 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e014      	b.n	8006d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006cec:	4a0f      	ldr	r2, [pc, #60]	@ (8006d2c <vQueueAddToRegistry+0x50>)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cf8:	490c      	ldr	r1, [pc, #48]	@ (8006d2c <vQueueAddToRegistry+0x50>)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d02:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <vQueueAddToRegistry+0x50>)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d0e:	e006      	b.n	8006d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	d9e7      	bls.n	8006cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000f80 	.word	0x20000f80

08006d30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e016      	b.n	8006d6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d3e:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <vQueueUnregisterQueue+0x50>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	4413      	add	r3, r2
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d10b      	bne.n	8006d66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <vQueueUnregisterQueue+0x50>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2100      	movs	r1, #0
 8006d54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d58:	4a09      	ldr	r2, [pc, #36]	@ (8006d80 <vQueueUnregisterQueue+0x50>)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	2200      	movs	r2, #0
 8006d62:	605a      	str	r2, [r3, #4]
				break;
 8006d64:	e006      	b.n	8006d74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b07      	cmp	r3, #7
 8006d70:	d9e5      	bls.n	8006d3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20000f80 	.word	0x20000f80

08006d84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d94:	f001 fcd2 	bl	800873c <vPortEnterCritical>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d103      	bne.n	8006dae <vQueueWaitForMessageRestricted+0x2a>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <vQueueWaitForMessageRestricted+0x40>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc4:	f001 fcf0 	bl	80087a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	3324      	adds	r3, #36	@ 0x24
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fc5b 	bl	8007694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dde:	6978      	ldr	r0, [r7, #20]
 8006de0:	f7ff fefc 	bl	8006bdc <prvUnlockQueue>
	}
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08e      	sub	sp, #56	@ 0x38
 8006df0:	af04      	add	r7, sp, #16
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10d      	bne.n	8006e1c <xTaskCreateStatic+0x30>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	b672      	cpsid	i
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	b662      	cpsie	i
 8006e14:	623b      	str	r3, [r7, #32]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <xTaskCreateStatic+0x52>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	b672      	cpsid	i
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	b662      	cpsie	i
 8006e36:	61fb      	str	r3, [r7, #28]
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e3e:	235c      	movs	r3, #92	@ 0x5c
 8006e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e46:	d00d      	beq.n	8006e64 <xTaskCreateStatic+0x78>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	b672      	cpsid	i
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	b662      	cpsie	i
 8006e5c:	61bb      	str	r3, [r7, #24]
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	e7fd      	b.n	8006e60 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01e      	beq.n	8006eaa <xTaskCreateStatic+0xbe>
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01b      	beq.n	8006eaa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e84:	2300      	movs	r3, #0
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	9302      	str	r3, [sp, #8]
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f850 	bl	8006f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ea4:	f000 f8e0 	bl	8007068 <prvAddNewTaskToReadyList>
 8006ea8:	e001      	b.n	8006eae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006eae:	697b      	ldr	r3, [r7, #20]
	}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3728      	adds	r7, #40	@ 0x28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08c      	sub	sp, #48	@ 0x30
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fd63 	bl	8008998 <pvPortMalloc>
 8006ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00e      	beq.n	8006ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006eda:	205c      	movs	r0, #92	@ 0x5c
 8006edc:	f001 fd5c 	bl	8008998 <pvPortMalloc>
 8006ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eee:	e005      	b.n	8006efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f001 fe1f 	bl	8008b34 <vPortFree>
 8006ef6:	e001      	b.n	8006efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	9302      	str	r3, [sp, #8]
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f80e 	bl	8006f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f26:	69f8      	ldr	r0, [r7, #28]
 8006f28:	f000 f89e 	bl	8007068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e002      	b.n	8006f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f38:	69bb      	ldr	r3, [r7, #24]
	}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	21a5      	movs	r1, #165	@ 0xa5
 8006f5c:	f001 ff3c 	bl	8008dd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006f6a:	440b      	add	r3, r1
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f023 0307 	bic.w	r3, r3, #7
 8006f78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00d      	beq.n	8006fa0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	b672      	cpsid	i
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	b662      	cpsie	i
 8006f98:	617b      	str	r3, [r7, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01f      	beq.n	8006fe6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e012      	b.n	8006fd2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	7819      	ldrb	r1, [r3, #0]
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3334      	adds	r3, #52	@ 0x34
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b0f      	cmp	r3, #15
 8006fd6:	d9e9      	bls.n	8006fac <prvInitialiseNewTask+0x6a>
 8006fd8:	e000      	b.n	8006fdc <prvInitialiseNewTask+0x9a>
			{
				break;
 8006fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fe4:	e003      	b.n	8006fee <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	2b37      	cmp	r3, #55	@ 0x37
 8006ff2:	d901      	bls.n	8006ff8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ff4:	2337      	movs	r3, #55	@ 0x37
 8006ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007002:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	2200      	movs	r2, #0
 8007008:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	3304      	adds	r3, #4
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fde4 	bl	8005bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	3318      	adds	r3, #24
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fddf 	bl	8005bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007032:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	2200      	movs	r2, #0
 8007038:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	68f9      	ldr	r1, [r7, #12]
 8007046:	69b8      	ldr	r0, [r7, #24]
 8007048:	f001 fa6c 	bl	8008524 <pxPortInitialiseStack>
 800704c:	4602      	mov	r2, r0
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800705c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800705e:	bf00      	nop
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007070:	f001 fb64 	bl	800873c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007074:	4b2d      	ldr	r3, [pc, #180]	@ (800712c <prvAddNewTaskToReadyList+0xc4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a2c      	ldr	r2, [pc, #176]	@ (800712c <prvAddNewTaskToReadyList+0xc4>)
 800707c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800707e:	4b2c      	ldr	r3, [pc, #176]	@ (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007086:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800708c:	4b27      	ldr	r3, [pc, #156]	@ (800712c <prvAddNewTaskToReadyList+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d110      	bne.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007094:	f000 fc34 	bl	8007900 <prvInitialiseTaskLists>
 8007098:	e00d      	b.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800709a:	4b26      	ldr	r3, [pc, #152]	@ (8007134 <prvAddNewTaskToReadyList+0xcc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070a2:	4b23      	ldr	r3, [pc, #140]	@ (8007130 <prvAddNewTaskToReadyList+0xc8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d802      	bhi.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007130 <prvAddNewTaskToReadyList+0xc8>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070b6:	4b20      	ldr	r3, [pc, #128]	@ (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070cc:	4b1b      	ldr	r3, [pc, #108]	@ (800713c <prvAddNewTaskToReadyList+0xd4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d903      	bls.n	80070dc <prvAddNewTaskToReadyList+0x74>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	4a18      	ldr	r2, [pc, #96]	@ (800713c <prvAddNewTaskToReadyList+0xd4>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4a15      	ldr	r2, [pc, #84]	@ (8007140 <prvAddNewTaskToReadyList+0xd8>)
 80070ea:	441a      	add	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f7fe fd7f 	bl	8005bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070f8:	f001 fb56 	bl	80087a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007134 <prvAddNewTaskToReadyList+0xcc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007104:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	d207      	bcs.n	8007122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007112:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <prvAddNewTaskToReadyList+0xdc>)
 8007114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20001494 	.word	0x20001494
 8007130:	20000fc0 	.word	0x20000fc0
 8007134:	200014a0 	.word	0x200014a0
 8007138:	200014b0 	.word	0x200014b0
 800713c:	2000149c 	.word	0x2000149c
 8007140:	20000fc4 	.word	0x20000fc4
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01a      	beq.n	8007190 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800715a:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <vTaskDelay+0x68>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <vTaskDelay+0x36>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	60bb      	str	r3, [r7, #8]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800717e:	f000 f887 	bl	8007290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007182:	2100      	movs	r1, #0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fe11 	bl	8007dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800718a:	f000 f88f 	bl	80072ac <xTaskResumeAll>
 800718e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007196:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <vTaskDelay+0x6c>)
 8007198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200014bc 	.word	0x200014bc
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071c6:	463a      	mov	r2, r7
 80071c8:	1d39      	adds	r1, r7, #4
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fcb0 	bl	8005b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	2300      	movs	r3, #0
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	460a      	mov	r2, r1
 80071e6:	4924      	ldr	r1, [pc, #144]	@ (8007278 <vTaskStartScheduler+0xc0>)
 80071e8:	4824      	ldr	r0, [pc, #144]	@ (800727c <vTaskStartScheduler+0xc4>)
 80071ea:	f7ff fdff 	bl	8006dec <xTaskCreateStatic>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a23      	ldr	r2, [pc, #140]	@ (8007280 <vTaskStartScheduler+0xc8>)
 80071f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071f4:	4b22      	ldr	r3, [pc, #136]	@ (8007280 <vTaskStartScheduler+0xc8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e001      	b.n	8007206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d102      	bne.n	8007212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800720c:	f000 fe22 	bl	8007e54 <xTimerCreateTimerTask>
 8007210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d118      	bne.n	800724a <vTaskStartScheduler+0x92>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	b672      	cpsid	i
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	b662      	cpsie	i
 800722c:	613b      	str	r3, [r7, #16]
}
 800722e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007230:	4b14      	ldr	r3, [pc, #80]	@ (8007284 <vTaskStartScheduler+0xcc>)
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007238:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <vTaskStartScheduler+0xd0>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800723e:	4b13      	ldr	r3, [pc, #76]	@ (800728c <vTaskStartScheduler+0xd4>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007244:	f001 f9fc 	bl	8008640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007248:	e011      	b.n	800726e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d10d      	bne.n	800726e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	b672      	cpsid	i
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	b662      	cpsie	i
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vTaskStartScheduler+0xb2>
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08009754 	.word	0x08009754
 800727c:	080078d1 	.word	0x080078d1
 8007280:	200014b8 	.word	0x200014b8
 8007284:	200014b4 	.word	0x200014b4
 8007288:	200014a0 	.word	0x200014a0
 800728c:	20001498 	.word	0x20001498

08007290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007294:	4b04      	ldr	r3, [pc, #16]	@ (80072a8 <vTaskSuspendAll+0x18>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a03      	ldr	r2, [pc, #12]	@ (80072a8 <vTaskSuspendAll+0x18>)
 800729c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800729e:	bf00      	nop
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	200014bc 	.word	0x200014bc

080072ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072ba:	4b43      	ldr	r3, [pc, #268]	@ (80073c8 <xTaskResumeAll+0x11c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10d      	bne.n	80072de <xTaskResumeAll+0x32>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c6:	b672      	cpsid	i
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	b662      	cpsie	i
 80072d6:	603b      	str	r3, [r7, #0]
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072de:	f001 fa2d 	bl	800873c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e2:	4b39      	ldr	r3, [pc, #228]	@ (80073c8 <xTaskResumeAll+0x11c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4a37      	ldr	r2, [pc, #220]	@ (80073c8 <xTaskResumeAll+0x11c>)
 80072ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ec:	4b36      	ldr	r3, [pc, #216]	@ (80073c8 <xTaskResumeAll+0x11c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d162      	bne.n	80073ba <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f4:	4b35      	ldr	r3, [pc, #212]	@ (80073cc <xTaskResumeAll+0x120>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05e      	beq.n	80073ba <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fc:	e02f      	b.n	800735e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fe:	4b34      	ldr	r3, [pc, #208]	@ (80073d0 <xTaskResumeAll+0x124>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fcd0 	bl	8005cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3304      	adds	r3, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fccb 	bl	8005cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	4b2d      	ldr	r3, [pc, #180]	@ (80073d4 <xTaskResumeAll+0x128>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d903      	bls.n	800732e <xTaskResumeAll+0x82>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	4a2a      	ldr	r2, [pc, #168]	@ (80073d4 <xTaskResumeAll+0x128>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a27      	ldr	r2, [pc, #156]	@ (80073d8 <xTaskResumeAll+0x12c>)
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe fc56 	bl	8005bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734e:	4b23      	ldr	r3, [pc, #140]	@ (80073dc <xTaskResumeAll+0x130>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007358:	4b21      	ldr	r3, [pc, #132]	@ (80073e0 <xTaskResumeAll+0x134>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735e:	4b1c      	ldr	r3, [pc, #112]	@ (80073d0 <xTaskResumeAll+0x124>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1cb      	bne.n	80072fe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736c:	f000 fb68 	bl	8007a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007370:	4b1c      	ldr	r3, [pc, #112]	@ (80073e4 <xTaskResumeAll+0x138>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737c:	f000 f846 	bl	800740c <xTaskIncrementTick>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007386:	4b16      	ldr	r3, [pc, #88]	@ (80073e0 <xTaskResumeAll+0x134>)
 8007388:	2201      	movs	r2, #1
 800738a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3b01      	subs	r3, #1
 8007390:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f1      	bne.n	800737c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007398:	4b12      	ldr	r3, [pc, #72]	@ (80073e4 <xTaskResumeAll+0x138>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800739e:	4b10      	ldr	r3, [pc, #64]	@ (80073e0 <xTaskResumeAll+0x134>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a6:	2301      	movs	r3, #1
 80073a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073aa:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <xTaskResumeAll+0x13c>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ba:	f001 f9f5 	bl	80087a8 <vPortExitCritical>

	return xAlreadyYielded;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	200014bc 	.word	0x200014bc
 80073cc:	20001494 	.word	0x20001494
 80073d0:	20001454 	.word	0x20001454
 80073d4:	2000149c 	.word	0x2000149c
 80073d8:	20000fc4 	.word	0x20000fc4
 80073dc:	20000fc0 	.word	0x20000fc0
 80073e0:	200014a8 	.word	0x200014a8
 80073e4:	200014a4 	.word	0x200014a4
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f2:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <xTaskGetTickCount+0x1c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20001498 	.word	0x20001498

0800740c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007416:	4b50      	ldr	r3, [pc, #320]	@ (8007558 <xTaskIncrementTick+0x14c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 808c 	bne.w	8007538 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007420:	4b4e      	ldr	r3, [pc, #312]	@ (800755c <xTaskIncrementTick+0x150>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007428:	4a4c      	ldr	r2, [pc, #304]	@ (800755c <xTaskIncrementTick+0x150>)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d123      	bne.n	800747c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007434:	4b4a      	ldr	r3, [pc, #296]	@ (8007560 <xTaskIncrementTick+0x154>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <xTaskIncrementTick+0x4e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	b672      	cpsid	i
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	b662      	cpsie	i
 8007452:	603b      	str	r3, [r7, #0]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xTaskIncrementTick+0x4a>
 800745a:	4b41      	ldr	r3, [pc, #260]	@ (8007560 <xTaskIncrementTick+0x154>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4b40      	ldr	r3, [pc, #256]	@ (8007564 <xTaskIncrementTick+0x158>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a3e      	ldr	r2, [pc, #248]	@ (8007560 <xTaskIncrementTick+0x154>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4a3e      	ldr	r2, [pc, #248]	@ (8007564 <xTaskIncrementTick+0x158>)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	4b3e      	ldr	r3, [pc, #248]	@ (8007568 <xTaskIncrementTick+0x15c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a3c      	ldr	r2, [pc, #240]	@ (8007568 <xTaskIncrementTick+0x15c>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	f000 fae2 	bl	8007a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800747c:	4b3b      	ldr	r3, [pc, #236]	@ (800756c <xTaskIncrementTick+0x160>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	429a      	cmp	r2, r3
 8007484:	d349      	bcc.n	800751a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007486:	4b36      	ldr	r3, [pc, #216]	@ (8007560 <xTaskIncrementTick+0x154>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	4b36      	ldr	r3, [pc, #216]	@ (800756c <xTaskIncrementTick+0x160>)
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	601a      	str	r2, [r3, #0]
					break;
 8007498:	e03f      	b.n	800751a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749a:	4b31      	ldr	r3, [pc, #196]	@ (8007560 <xTaskIncrementTick+0x154>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d203      	bcs.n	80074ba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074b2:	4a2e      	ldr	r2, [pc, #184]	@ (800756c <xTaskIncrementTick+0x160>)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074b8:	e02f      	b.n	800751a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fbf6 	bl	8005cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3318      	adds	r3, #24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fbed 	bl	8005cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074da:	4b25      	ldr	r3, [pc, #148]	@ (8007570 <xTaskIncrementTick+0x164>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d903      	bls.n	80074ea <xTaskIncrementTick+0xde>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a22      	ldr	r2, [pc, #136]	@ (8007570 <xTaskIncrementTick+0x164>)
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007574 <xTaskIncrementTick+0x168>)
 80074f8:	441a      	add	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe fb78 	bl	8005bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750a:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <xTaskIncrementTick+0x16c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	429a      	cmp	r2, r3
 8007512:	d3b8      	bcc.n	8007486 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007518:	e7b5      	b.n	8007486 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800751a:	4b17      	ldr	r3, [pc, #92]	@ (8007578 <xTaskIncrementTick+0x16c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007520:	4914      	ldr	r1, [pc, #80]	@ (8007574 <xTaskIncrementTick+0x168>)
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d907      	bls.n	8007542 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007532:	2301      	movs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e004      	b.n	8007542 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007538:	4b10      	ldr	r3, [pc, #64]	@ (800757c <xTaskIncrementTick+0x170>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	4a0f      	ldr	r2, [pc, #60]	@ (800757c <xTaskIncrementTick+0x170>)
 8007540:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007542:	4b0f      	ldr	r3, [pc, #60]	@ (8007580 <xTaskIncrementTick+0x174>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800754a:	2301      	movs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800754e:	697b      	ldr	r3, [r7, #20]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	200014bc 	.word	0x200014bc
 800755c:	20001498 	.word	0x20001498
 8007560:	2000144c 	.word	0x2000144c
 8007564:	20001450 	.word	0x20001450
 8007568:	200014ac 	.word	0x200014ac
 800756c:	200014b4 	.word	0x200014b4
 8007570:	2000149c 	.word	0x2000149c
 8007574:	20000fc4 	.word	0x20000fc4
 8007578:	20000fc0 	.word	0x20000fc0
 800757c:	200014a4 	.word	0x200014a4
 8007580:	200014a8 	.word	0x200014a8

08007584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800758a:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <vTaskSwitchContext+0xac>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007592:	4b28      	ldr	r3, [pc, #160]	@ (8007634 <vTaskSwitchContext+0xb0>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007598:	e044      	b.n	8007624 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800759a:	4b26      	ldr	r3, [pc, #152]	@ (8007634 <vTaskSwitchContext+0xb0>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	4b25      	ldr	r3, [pc, #148]	@ (8007638 <vTaskSwitchContext+0xb4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e013      	b.n	80075d0 <vTaskSwitchContext+0x4c>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <vTaskSwitchContext+0x46>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vTaskSwitchContext+0x42>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	491a      	ldr	r1, [pc, #104]	@ (800763c <vTaskSwitchContext+0xb8>)
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0e1      	beq.n	80075a8 <vTaskSwitchContext+0x24>
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a13      	ldr	r2, [pc, #76]	@ (800763c <vTaskSwitchContext+0xb8>)
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	3308      	adds	r3, #8
 8007606:	429a      	cmp	r2, r3
 8007608:	d104      	bne.n	8007614 <vTaskSwitchContext+0x90>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4a09      	ldr	r2, [pc, #36]	@ (8007640 <vTaskSwitchContext+0xbc>)
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	4a06      	ldr	r2, [pc, #24]	@ (8007638 <vTaskSwitchContext+0xb4>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6013      	str	r3, [r2, #0]
}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	200014bc 	.word	0x200014bc
 8007634:	200014a8 	.word	0x200014a8
 8007638:	2000149c 	.word	0x2000149c
 800763c:	20000fc4 	.word	0x20000fc4
 8007640:	20000fc0 	.word	0x20000fc0

08007644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10d      	bne.n	8007670 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	b672      	cpsid	i
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	b662      	cpsie	i
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007670:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <vTaskPlaceOnEventList+0x4c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3318      	adds	r3, #24
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fe fae0 	bl	8005c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800767e:	2101      	movs	r1, #1
 8007680:	6838      	ldr	r0, [r7, #0]
 8007682:	f000 fb93 	bl	8007dac <prvAddCurrentTaskToDelayedList>
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000fc0 	.word	0x20000fc0

08007694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10d      	bne.n	80076c2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	b672      	cpsid	i
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	b662      	cpsie	i
 80076ba:	617b      	str	r3, [r7, #20]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <vTaskPlaceOnEventListRestricted+0x58>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3318      	adds	r3, #24
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7fe fa93 	bl	8005bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295
 80076da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	68b8      	ldr	r0, [r7, #8]
 80076e0:	f000 fb64 	bl	8007dac <prvAddCurrentTaskToDelayedList>
	}
 80076e4:	bf00      	nop
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000fc0 	.word	0x20000fc0

080076f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10d      	bne.n	8007722 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	60fb      	str	r3, [r7, #12]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3318      	adds	r3, #24
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fac2 	bl	8005cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772c:	4b1d      	ldr	r3, [pc, #116]	@ (80077a4 <xTaskRemoveFromEventList+0xb4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11d      	bne.n	8007770 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	3304      	adds	r3, #4
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe fab9 	bl	8005cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007742:	4b19      	ldr	r3, [pc, #100]	@ (80077a8 <xTaskRemoveFromEventList+0xb8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d903      	bls.n	8007752 <xTaskRemoveFromEventList+0x62>
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	4a16      	ldr	r2, [pc, #88]	@ (80077a8 <xTaskRemoveFromEventList+0xb8>)
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a13      	ldr	r2, [pc, #76]	@ (80077ac <xTaskRemoveFromEventList+0xbc>)
 8007760:	441a      	add	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	3304      	adds	r3, #4
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f7fe fa44 	bl	8005bf6 <vListInsertEnd>
 800776e:	e005      	b.n	800777c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3318      	adds	r3, #24
 8007774:	4619      	mov	r1, r3
 8007776:	480e      	ldr	r0, [pc, #56]	@ (80077b0 <xTaskRemoveFromEventList+0xc0>)
 8007778:	f7fe fa3d 	bl	8005bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007780:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <xTaskRemoveFromEventList+0xc4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	429a      	cmp	r2, r3
 8007788:	d905      	bls.n	8007796 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800778e:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <xTaskRemoveFromEventList+0xc8>)
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e001      	b.n	800779a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800779a:	697b      	ldr	r3, [r7, #20]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200014bc 	.word	0x200014bc
 80077a8:	2000149c 	.word	0x2000149c
 80077ac:	20000fc4 	.word	0x20000fc4
 80077b0:	20001454 	.word	0x20001454
 80077b4:	20000fc0 	.word	0x20000fc0
 80077b8:	200014a8 	.word	0x200014a8

080077bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <vTaskInternalSetTimeOutState+0x24>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077cc:	4b05      	ldr	r3, [pc, #20]	@ (80077e4 <vTaskInternalSetTimeOutState+0x28>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	605a      	str	r2, [r3, #4]
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	200014ac 	.word	0x200014ac
 80077e4:	20001498 	.word	0x20001498

080077e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	b672      	cpsid	i
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	b662      	cpsie	i
 800780c:	613b      	str	r3, [r7, #16]
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	b672      	cpsid	i
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	b662      	cpsie	i
 800782e:	60fb      	str	r3, [r7, #12]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007836:	f000 ff81 	bl	800873c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800783a:	4b1d      	ldr	r3, [pc, #116]	@ (80078b0 <xTaskCheckForTimeOut+0xc8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d102      	bne.n	800785a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	e023      	b.n	80078a2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b15      	ldr	r3, [pc, #84]	@ (80078b4 <xTaskCheckForTimeOut+0xcc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d007      	beq.n	8007876 <xTaskCheckForTimeOut+0x8e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	e015      	b.n	80078a2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	429a      	cmp	r2, r3
 800787e:	d20b      	bcs.n	8007898 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ff95 	bl	80077bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	e004      	b.n	80078a2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800789e:	2301      	movs	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078a2:	f000 ff81 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 80078a6:	69fb      	ldr	r3, [r7, #28]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3720      	adds	r7, #32
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20001498 	.word	0x20001498
 80078b4:	200014ac 	.word	0x200014ac

080078b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078bc:	4b03      	ldr	r3, [pc, #12]	@ (80078cc <vTaskMissedYield+0x14>)
 80078be:	2201      	movs	r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
}
 80078c2:	bf00      	nop
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200014a8 	.word	0x200014a8

080078d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078d8:	f000 f852 	bl	8007980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078dc:	4b06      	ldr	r3, [pc, #24]	@ (80078f8 <prvIdleTask+0x28>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d9f9      	bls.n	80078d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <prvIdleTask+0x2c>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078f4:	e7f0      	b.n	80078d8 <prvIdleTask+0x8>
 80078f6:	bf00      	nop
 80078f8:	20000fc4 	.word	0x20000fc4
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
 800790a:	e00c      	b.n	8007926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a12      	ldr	r2, [pc, #72]	@ (8007960 <prvInitialiseTaskLists+0x60>)
 8007918:	4413      	add	r3, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe f93e 	bl	8005b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3301      	adds	r3, #1
 8007924:	607b      	str	r3, [r7, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b37      	cmp	r3, #55	@ 0x37
 800792a:	d9ef      	bls.n	800790c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800792c:	480d      	ldr	r0, [pc, #52]	@ (8007964 <prvInitialiseTaskLists+0x64>)
 800792e:	f7fe f935 	bl	8005b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007932:	480d      	ldr	r0, [pc, #52]	@ (8007968 <prvInitialiseTaskLists+0x68>)
 8007934:	f7fe f932 	bl	8005b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007938:	480c      	ldr	r0, [pc, #48]	@ (800796c <prvInitialiseTaskLists+0x6c>)
 800793a:	f7fe f92f 	bl	8005b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800793e:	480c      	ldr	r0, [pc, #48]	@ (8007970 <prvInitialiseTaskLists+0x70>)
 8007940:	f7fe f92c 	bl	8005b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007944:	480b      	ldr	r0, [pc, #44]	@ (8007974 <prvInitialiseTaskLists+0x74>)
 8007946:	f7fe f929 	bl	8005b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800794a:	4b0b      	ldr	r3, [pc, #44]	@ (8007978 <prvInitialiseTaskLists+0x78>)
 800794c:	4a05      	ldr	r2, [pc, #20]	@ (8007964 <prvInitialiseTaskLists+0x64>)
 800794e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007950:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <prvInitialiseTaskLists+0x7c>)
 8007952:	4a05      	ldr	r2, [pc, #20]	@ (8007968 <prvInitialiseTaskLists+0x68>)
 8007954:	601a      	str	r2, [r3, #0]
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000fc4 	.word	0x20000fc4
 8007964:	20001424 	.word	0x20001424
 8007968:	20001438 	.word	0x20001438
 800796c:	20001454 	.word	0x20001454
 8007970:	20001468 	.word	0x20001468
 8007974:	20001480 	.word	0x20001480
 8007978:	2000144c 	.word	0x2000144c
 800797c:	20001450 	.word	0x20001450

08007980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007986:	e019      	b.n	80079bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007988:	f000 fed8 	bl	800873c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798c:	4b10      	ldr	r3, [pc, #64]	@ (80079d0 <prvCheckTasksWaitingTermination+0x50>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe f989 	bl	8005cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <prvCheckTasksWaitingTermination+0x54>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	4a0b      	ldr	r2, [pc, #44]	@ (80079d4 <prvCheckTasksWaitingTermination+0x54>)
 80079a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079a8:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <prvCheckTasksWaitingTermination+0x58>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	4a0a      	ldr	r2, [pc, #40]	@ (80079d8 <prvCheckTasksWaitingTermination+0x58>)
 80079b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079b2:	f000 fef9 	bl	80087a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f810 	bl	80079dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079bc:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <prvCheckTasksWaitingTermination+0x58>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e1      	bne.n	8007988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20001468 	.word	0x20001468
 80079d4:	20001494 	.word	0x20001494
 80079d8:	2000147c 	.word	0x2000147c

080079dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d108      	bne.n	8007a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f89e 	bl	8008b34 <vPortFree>
				vPortFree( pxTCB );
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f89b 	bl	8008b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079fe:	e01b      	b.n	8007a38 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d103      	bne.n	8007a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f892 	bl	8008b34 <vPortFree>
	}
 8007a10:	e012      	b.n	8007a38 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d00d      	beq.n	8007a38 <prvDeleteTCB+0x5c>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	b672      	cpsid	i
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	b662      	cpsie	i
 8007a30:	60fb      	str	r3, [r7, #12]
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	e7fd      	b.n	8007a34 <prvDeleteTCB+0x58>
	}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a46:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <prvResetNextTaskUnblockTime+0x38>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a50:	4b0a      	ldr	r3, [pc, #40]	@ (8007a7c <prvResetNextTaskUnblockTime+0x3c>)
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a58:	e008      	b.n	8007a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <prvResetNextTaskUnblockTime+0x38>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a04      	ldr	r2, [pc, #16]	@ (8007a7c <prvResetNextTaskUnblockTime+0x3c>)
 8007a6a:	6013      	str	r3, [r2, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	2000144c 	.word	0x2000144c
 8007a7c:	200014b4 	.word	0x200014b4

08007a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a86:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <xTaskGetSchedulerState+0x34>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	e008      	b.n	8007aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a94:	4b08      	ldr	r3, [pc, #32]	@ (8007ab8 <xTaskGetSchedulerState+0x38>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	607b      	str	r3, [r7, #4]
 8007aa0:	e001      	b.n	8007aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007aa6:	687b      	ldr	r3, [r7, #4]
	}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	200014a0 	.word	0x200014a0
 8007ab8:	200014bc 	.word	0x200014bc

08007abc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d051      	beq.n	8007b76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b80 <xTaskPriorityInherit+0xc4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d241      	bcs.n	8007b64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	db06      	blt.n	8007af6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae8:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <xTaskPriorityInherit+0xc4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6959      	ldr	r1, [r3, #20]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <xTaskPriorityInherit+0xc8>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	4299      	cmp	r1, r3
 8007b0c:	d122      	bne.n	8007b54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe f8cc 	bl	8005cb0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b18:	4b19      	ldr	r3, [pc, #100]	@ (8007b80 <xTaskPriorityInherit+0xc4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	4b18      	ldr	r3, [pc, #96]	@ (8007b88 <xTaskPriorityInherit+0xcc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d903      	bls.n	8007b36 <xTaskPriorityInherit+0x7a>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	4a15      	ldr	r2, [pc, #84]	@ (8007b88 <xTaskPriorityInherit+0xcc>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4a10      	ldr	r2, [pc, #64]	@ (8007b84 <xTaskPriorityInherit+0xc8>)
 8007b44:	441a      	add	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7fe f852 	bl	8005bf6 <vListInsertEnd>
 8007b52:	e004      	b.n	8007b5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b54:	4b0a      	ldr	r3, [pc, #40]	@ (8007b80 <xTaskPriorityInherit+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e008      	b.n	8007b76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b68:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <xTaskPriorityInherit+0xc4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d201      	bcs.n	8007b76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b72:	2301      	movs	r3, #1
 8007b74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b76:	68fb      	ldr	r3, [r7, #12]
	}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000fc0 	.word	0x20000fc0
 8007b84:	20000fc4 	.word	0x20000fc4
 8007b88:	2000149c 	.word	0x2000149c

08007b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d05c      	beq.n	8007c5c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ba2:	4b31      	ldr	r3, [pc, #196]	@ (8007c68 <xTaskPriorityDisinherit+0xdc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d00d      	beq.n	8007bc8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	b672      	cpsid	i
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	b662      	cpsie	i
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10d      	bne.n	8007bec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	b672      	cpsid	i
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	b662      	cpsie	i
 8007be4:	60bb      	str	r3, [r7, #8]
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d02c      	beq.n	8007c5c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d128      	bne.n	8007c5c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe f84e 	bl	8005cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <xTaskPriorityDisinherit+0xe0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d903      	bls.n	8007c3c <xTaskPriorityDisinherit+0xb0>
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	4a0c      	ldr	r2, [pc, #48]	@ (8007c6c <xTaskPriorityDisinherit+0xe0>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a09      	ldr	r2, [pc, #36]	@ (8007c70 <xTaskPriorityDisinherit+0xe4>)
 8007c4a:	441a      	add	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fd ffcf 	bl	8005bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c5c:	697b      	ldr	r3, [r7, #20]
	}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000fc0 	.word	0x20000fc0
 8007c6c:	2000149c 	.word	0x2000149c
 8007c70:	20000fc4 	.word	0x20000fc4

08007c74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d070      	beq.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	b672      	cpsid	i
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	b662      	cpsie	i
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d902      	bls.n	8007cc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	e002      	b.n	8007cc6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d04e      	beq.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d149      	bne.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cda:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d10d      	bne.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	60bb      	str	r3, [r7, #8]
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	db04      	blt.n	8007d1e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	6959      	ldr	r1, [r3, #20]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007d2e:	4413      	add	r3, r2
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d11c      	bne.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd ffb9 	bl	8005cb0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a07      	ldr	r2, [pc, #28]	@ (8007d7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007d60:	441a      	add	r2, r3
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fd ff44 	bl	8005bf6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d6e:	bf00      	nop
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000fc0 	.word	0x20000fc0
 8007d7c:	20000fc4 	.word	0x20000fc4
 8007d80:	2000149c 	.word	0x2000149c

08007d84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d88:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d90:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d96:	3201      	adds	r2, #1
 8007d98:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	@ (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
	}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	20000fc0 	.word	0x20000fc0

08007dac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007db6:	4b21      	ldr	r3, [pc, #132]	@ (8007e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dbc:	4b20      	ldr	r3, [pc, #128]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fd ff74 	bl	8005cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d10a      	bne.n	8007de6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4819      	ldr	r0, [pc, #100]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x98>)
 8007de0:	f7fd ff09 	bl	8005bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007de4:	e026      	b.n	8007e34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dee:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d209      	bcs.n	8007e12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dfe:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b0f      	ldr	r3, [pc, #60]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fd ff17 	bl	8005c3e <vListInsert>
}
 8007e10:	e010      	b.n	8007e34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e12:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7fd ff0d 	bl	8005c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e24:	4b0a      	ldr	r3, [pc, #40]	@ (8007e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d202      	bcs.n	8007e34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e2e:	4a08      	ldr	r2, [pc, #32]	@ (8007e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6013      	str	r3, [r2, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20001498 	.word	0x20001498
 8007e40:	20000fc0 	.word	0x20000fc0
 8007e44:	20001480 	.word	0x20001480
 8007e48:	20001450 	.word	0x20001450
 8007e4c:	2000144c 	.word	0x2000144c
 8007e50:	200014b4 	.word	0x200014b4

08007e54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	@ 0x28
 8007e58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e5e:	f000 fb21 	bl	80084a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e62:	4b1e      	ldr	r3, [pc, #120]	@ (8007edc <xTimerCreateTimerTask+0x88>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d021      	beq.n	8007eae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e72:	1d3a      	adds	r2, r7, #4
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd fe73 	bl	8005b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	9202      	str	r2, [sp, #8]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	460a      	mov	r2, r1
 8007e94:	4912      	ldr	r1, [pc, #72]	@ (8007ee0 <xTimerCreateTimerTask+0x8c>)
 8007e96:	4813      	ldr	r0, [pc, #76]	@ (8007ee4 <xTimerCreateTimerTask+0x90>)
 8007e98:	f7fe ffa8 	bl	8006dec <xTaskCreateStatic>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ee8 <xTimerCreateTimerTask+0x94>)
 8007ea0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ea2:	4b11      	ldr	r3, [pc, #68]	@ (8007ee8 <xTimerCreateTimerTask+0x94>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10d      	bne.n	8007ed0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007ed0:	697b      	ldr	r3, [r7, #20]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	200014f0 	.word	0x200014f0
 8007ee0:	0800975c 	.word	0x0800975c
 8007ee4:	0800802d 	.word	0x0800802d
 8007ee8:	200014f4 	.word	0x200014f4

08007eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <xTimerGenericCommand+0x34>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	b672      	cpsid	i
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	b662      	cpsie	i
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f20:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <xTimerGenericCommand+0x9c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02a      	beq.n	8007f7e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	dc18      	bgt.n	8007f6c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f3a:	f7ff fda1 	bl	8007a80 <xTaskGetSchedulerState>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d109      	bne.n	8007f58 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f44:	4b10      	ldr	r3, [pc, #64]	@ (8007f88 <xTimerGenericCommand+0x9c>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	f107 0110 	add.w	r1, r7, #16
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f50:	f7fe f8a8 	bl	80060a4 <xQueueGenericSend>
 8007f54:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f56:	e012      	b.n	8007f7e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f58:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <xTimerGenericCommand+0x9c>)
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	f107 0110 	add.w	r1, r7, #16
 8007f60:	2300      	movs	r3, #0
 8007f62:	2200      	movs	r2, #0
 8007f64:	f7fe f89e 	bl	80060a4 <xQueueGenericSend>
 8007f68:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f6a:	e008      	b.n	8007f7e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <xTimerGenericCommand+0x9c>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	f107 0110 	add.w	r1, r7, #16
 8007f74:	2300      	movs	r3, #0
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	f7fe f99e 	bl	80062b8 <xQueueGenericSendFromISR>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3728      	adds	r7, #40	@ 0x28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200014f0 	.word	0x200014f0

08007f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f96:	4b24      	ldr	r3, [pc, #144]	@ (8008028 <prvProcessExpiredTimer+0x9c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fe83 	bl	8005cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d025      	beq.n	8008004 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	18d1      	adds	r1, r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	6978      	ldr	r0, [r7, #20]
 8007fc6:	f000 f8d7 	bl	8008178 <prvInsertTimerInActiveList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d022      	beq.n	8008016 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	6978      	ldr	r0, [r7, #20]
 8007fdc:	f7ff ff86 	bl	8007eec <xTimerGenericCommand>
 8007fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d116      	bne.n	8008016 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	b672      	cpsid	i
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	b662      	cpsie	i
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800800a:	f023 0301 	bic.w	r3, r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	4798      	blx	r3
}
 800801e:	bf00      	nop
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	200014e8 	.word	0x200014e8

0800802c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f859 	bl	80080f0 <prvGetNextExpireTime>
 800803e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f805 	bl	8008054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800804a:	f000 f8d7 	bl	80081fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800804e:	bf00      	nop
 8008050:	e7f0      	b.n	8008034 <prvTimerTask+0x8>
	...

08008054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800805e:	f7ff f917 	bl	8007290 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008062:	f107 0308 	add.w	r3, r7, #8
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f866 	bl	8008138 <prvSampleTimeNow>
 800806c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d130      	bne.n	80080d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <prvProcessTimerOrBlockTask+0x3c>
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	429a      	cmp	r2, r3
 8008080:	d806      	bhi.n	8008090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008082:	f7ff f913 	bl	80072ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff ff7f 	bl	8007f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800808e:	e024      	b.n	80080da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008096:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <prvProcessTimerOrBlockTask+0x90>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <prvProcessTimerOrBlockTask+0x50>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <prvProcessTimerOrBlockTask+0x52>
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080a8:	4b0f      	ldr	r3, [pc, #60]	@ (80080e8 <prvProcessTimerOrBlockTask+0x94>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f7fe fe65 	bl	8006d84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080ba:	f7ff f8f7 	bl	80072ac <xTaskResumeAll>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080c4:	4b09      	ldr	r3, [pc, #36]	@ (80080ec <prvProcessTimerOrBlockTask+0x98>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
}
 80080d4:	e001      	b.n	80080da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080d6:	f7ff f8e9 	bl	80072ac <xTaskResumeAll>
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200014ec 	.word	0x200014ec
 80080e8:	200014f0 	.word	0x200014f0
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008134 <prvGetNextExpireTime+0x44>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <prvGetNextExpireTime+0x16>
 8008102:	2201      	movs	r2, #1
 8008104:	e000      	b.n	8008108 <prvGetNextExpireTime+0x18>
 8008106:	2200      	movs	r2, #0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008114:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <prvGetNextExpireTime+0x44>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e001      	b.n	8008124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008124:	68fb      	ldr	r3, [r7, #12]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	200014e8 	.word	0x200014e8

08008138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008140:	f7ff f954 	bl	80073ec <xTaskGetTickCount>
 8008144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <prvSampleTimeNow+0x3c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	429a      	cmp	r2, r3
 800814e:	d205      	bcs.n	800815c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008150:	f000 f940 	bl	80083d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e002      	b.n	8008162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008162:	4a04      	ldr	r2, [pc, #16]	@ (8008174 <prvSampleTimeNow+0x3c>)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200014f8 	.word	0x200014f8

08008178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d812      	bhi.n	80081c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d302      	bcc.n	80081b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e01b      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081b2:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <prvInsertTimerInActiveList+0x7c>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f7fd fd3e 	bl	8005c3e <vListInsert>
 80081c2:	e012      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d206      	bcs.n	80081da <prvInsertTimerInActiveList+0x62>
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d302      	bcc.n	80081da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e007      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081da:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <prvInsertTimerInActiveList+0x80>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f7fd fd2a 	bl	8005c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081ea:	697b      	ldr	r3, [r7, #20]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200014ec 	.word	0x200014ec
 80081f8:	200014e8 	.word	0x200014e8

080081fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08e      	sub	sp, #56	@ 0x38
 8008200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008202:	e0d4      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	da1b      	bge.n	8008242 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	3304      	adds	r3, #4
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10d      	bne.n	8008232 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	b672      	cpsid	i
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	b662      	cpsie	i
 800822a:	61fb      	str	r3, [r7, #28]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	6850      	ldr	r0, [r2, #4]
 800823a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800823c:	6892      	ldr	r2, [r2, #8]
 800823e:	4611      	mov	r1, r2
 8008240:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f2c0 80b2 	blt.w	80083ae <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800824e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7fd fd28 	bl	8005cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008260:	463b      	mov	r3, r7
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff ff68 	bl	8008138 <prvSampleTimeNow>
 8008268:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b09      	cmp	r3, #9
 800826e:	f200 809b 	bhi.w	80083a8 <prvProcessReceivedCommands+0x1ac>
 8008272:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <prvProcessReceivedCommands+0x7c>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	080082a1 	.word	0x080082a1
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082a1 	.word	0x080082a1
 8008284:	0800831b 	.word	0x0800831b
 8008288:	0800832f 	.word	0x0800832f
 800828c:	0800837f 	.word	0x0800837f
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082a1 	.word	0x080082a1
 8008298:	0800831b 	.word	0x0800831b
 800829c:	0800832f 	.word	0x0800832f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	18d1      	adds	r1, r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c0:	f7ff ff5a 	bl	8008178 <prvInsertTimerInActiveList>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d070      	beq.n	80083ac <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d065      	beq.n	80083ac <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	441a      	add	r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	2300      	movs	r3, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f2:	f7ff fdfb 	bl	8007eec <xTimerGenericCommand>
 80082f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d156      	bne.n	80083ac <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	b672      	cpsid	i
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	b662      	cpsie	i
 8008312:	61bb      	str	r3, [r7, #24]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	b2da      	uxtb	r2, r3
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800832c:	e03f      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10d      	bne.n	800836a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	b672      	cpsid	i
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	b662      	cpsie	i
 8008362:	617b      	str	r3, [r7, #20]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	18d1      	adds	r1, r2, r3
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008378:	f7ff fefe 	bl	8008178 <prvInsertTimerInActiveList>
					break;
 800837c:	e017      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800838c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800838e:	f000 fbd1 	bl	8008b34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008392:	e00c      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800839a:	f023 0301 	bic.w	r3, r3, #1
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083a6:	e002      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <prvProcessReceivedCommands+0x1b2>
					break;
 80083ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ae:	4b08      	ldr	r3, [pc, #32]	@ (80083d0 <prvProcessReceivedCommands+0x1d4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	1d39      	adds	r1, r7, #4
 80083b4:	2200      	movs	r2, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe f8ba 	bl	8006530 <xQueueReceive>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f47f af20 	bne.w	8008204 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	3730      	adds	r7, #48	@ 0x30
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200014f0 	.word	0x200014f0

080083d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083da:	e04b      	b.n	8008474 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083dc:	4b2f      	ldr	r3, [pc, #188]	@ (800849c <prvSwitchTimerLists+0xc8>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e6:	4b2d      	ldr	r3, [pc, #180]	@ (800849c <prvSwitchTimerLists+0xc8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fc5b 	bl	8005cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d031      	beq.n	8008474 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4413      	add	r3, r2
 8008418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	d90e      	bls.n	8008440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800842e:	4b1b      	ldr	r3, [pc, #108]	@ (800849c <prvSwitchTimerLists+0xc8>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7fd fc00 	bl	8005c3e <vListInsert>
 800843e:	e019      	b.n	8008474 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	2100      	movs	r1, #0
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fd4e 	bl	8007eec <xTimerGenericCommand>
 8008450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	603b      	str	r3, [r7, #0]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <prvSwitchTimerLists+0xc8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1ae      	bne.n	80083dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800847e:	4b07      	ldr	r3, [pc, #28]	@ (800849c <prvSwitchTimerLists+0xc8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <prvSwitchTimerLists+0xcc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a04      	ldr	r2, [pc, #16]	@ (800849c <prvSwitchTimerLists+0xc8>)
 800848a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800848c:	4a04      	ldr	r2, [pc, #16]	@ (80084a0 <prvSwitchTimerLists+0xcc>)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6013      	str	r3, [r2, #0]
}
 8008492:	bf00      	nop
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200014e8 	.word	0x200014e8
 80084a0:	200014ec 	.word	0x200014ec

080084a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084aa:	f000 f947 	bl	800873c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084ae:	4b15      	ldr	r3, [pc, #84]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d120      	bne.n	80084f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084b6:	4814      	ldr	r0, [pc, #80]	@ (8008508 <prvCheckForValidListAndQueue+0x64>)
 80084b8:	f7fd fb70 	bl	8005b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084bc:	4813      	ldr	r0, [pc, #76]	@ (800850c <prvCheckForValidListAndQueue+0x68>)
 80084be:	f7fd fb6d 	bl	8005b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084c2:	4b13      	ldr	r3, [pc, #76]	@ (8008510 <prvCheckForValidListAndQueue+0x6c>)
 80084c4:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <prvCheckForValidListAndQueue+0x64>)
 80084c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <prvCheckForValidListAndQueue+0x70>)
 80084ca:	4a10      	ldr	r2, [pc, #64]	@ (800850c <prvCheckForValidListAndQueue+0x68>)
 80084cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084ce:	2300      	movs	r3, #0
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	4b11      	ldr	r3, [pc, #68]	@ (8008518 <prvCheckForValidListAndQueue+0x74>)
 80084d4:	4a11      	ldr	r2, [pc, #68]	@ (800851c <prvCheckForValidListAndQueue+0x78>)
 80084d6:	2110      	movs	r1, #16
 80084d8:	200a      	movs	r0, #10
 80084da:	f7fd fc7f 	bl	8005ddc <xQueueGenericCreateStatic>
 80084de:	4603      	mov	r3, r0
 80084e0:	4a08      	ldr	r2, [pc, #32]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084e4:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	490b      	ldr	r1, [pc, #44]	@ (8008520 <prvCheckForValidListAndQueue+0x7c>)
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fbf2 	bl	8006cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084f8:	f000 f956 	bl	80087a8 <vPortExitCritical>
}
 80084fc:	bf00      	nop
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200014f0 	.word	0x200014f0
 8008508:	200014c0 	.word	0x200014c0
 800850c:	200014d4 	.word	0x200014d4
 8008510:	200014e8 	.word	0x200014e8
 8008514:	200014ec 	.word	0x200014ec
 8008518:	2000159c 	.word	0x2000159c
 800851c:	200014fc 	.word	0x200014fc
 8008520:	08009764 	.word	0x08009764

08008524 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3b04      	subs	r3, #4
 8008534:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800853c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3b04      	subs	r3, #4
 8008542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3b04      	subs	r3, #4
 8008552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008554:	4a0c      	ldr	r2, [pc, #48]	@ (8008588 <pxPortInitialiseStack+0x64>)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3b14      	subs	r3, #20
 800855e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3b04      	subs	r3, #4
 800856a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f06f 0202 	mvn.w	r2, #2
 8008572:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3b20      	subs	r3, #32
 8008578:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	0800858d 	.word	0x0800858d

0800858c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008596:	4b15      	ldr	r3, [pc, #84]	@ (80085ec <prvTaskExitError+0x60>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d00d      	beq.n	80085bc <prvTaskExitError+0x30>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	b672      	cpsid	i
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	b662      	cpsie	i
 80085b4:	60fb      	str	r3, [r7, #12]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <prvTaskExitError+0x2c>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	b672      	cpsid	i
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	b662      	cpsie	i
 80085d0:	60bb      	str	r3, [r7, #8]
}
 80085d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085d4:	bf00      	nop
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0fc      	beq.n	80085d6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	2000000c 	.word	0x2000000c

080085f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085f0:	4b07      	ldr	r3, [pc, #28]	@ (8008610 <pxCurrentTCBConst2>)
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	f380 8809 	msr	PSP, r0
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f380 8811 	msr	BASEPRI, r0
 800860a:	4770      	bx	lr
 800860c:	f3af 8000 	nop.w

08008610 <pxCurrentTCBConst2>:
 8008610:	20000fc0 	.word	0x20000fc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop

08008618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008618:	4808      	ldr	r0, [pc, #32]	@ (800863c <prvPortStartFirstTask+0x24>)
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f380 8808 	msr	MSP, r0
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8814 	msr	CONTROL, r0
 800862a:	b662      	cpsie	i
 800862c:	b661      	cpsie	f
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	df00      	svc	0
 8008638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800863a:	bf00      	nop
 800863c:	e000ed08 	.word	0xe000ed08

08008640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008646:	4b37      	ldr	r3, [pc, #220]	@ (8008724 <xPortStartScheduler+0xe4>)
 8008648:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	22ff      	movs	r2, #255	@ 0xff
 8008656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b2f      	ldr	r3, [pc, #188]	@ (8008728 <xPortStartScheduler+0xe8>)
 800866c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800866e:	4b2f      	ldr	r3, [pc, #188]	@ (800872c <xPortStartScheduler+0xec>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008674:	e009      	b.n	800868a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008676:	4b2d      	ldr	r3, [pc, #180]	@ (800872c <xPortStartScheduler+0xec>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3b01      	subs	r3, #1
 800867c:	4a2b      	ldr	r2, [pc, #172]	@ (800872c <xPortStartScheduler+0xec>)
 800867e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008692:	2b80      	cmp	r3, #128	@ 0x80
 8008694:	d0ef      	beq.n	8008676 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008696:	4b25      	ldr	r3, [pc, #148]	@ (800872c <xPortStartScheduler+0xec>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1c3 0307 	rsb	r3, r3, #7
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d00d      	beq.n	80086be <xPortStartScheduler+0x7e>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	b672      	cpsid	i
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	b662      	cpsie	i
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086be:	4b1b      	ldr	r3, [pc, #108]	@ (800872c <xPortStartScheduler+0xec>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	4a19      	ldr	r2, [pc, #100]	@ (800872c <xPortStartScheduler+0xec>)
 80086c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086c8:	4b18      	ldr	r3, [pc, #96]	@ (800872c <xPortStartScheduler+0xec>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086d0:	4a16      	ldr	r2, [pc, #88]	@ (800872c <xPortStartScheduler+0xec>)
 80086d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086dc:	4b14      	ldr	r3, [pc, #80]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a13      	ldr	r2, [pc, #76]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086e8:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a10      	ldr	r2, [pc, #64]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086f4:	f000 f8dc 	bl	80088b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008734 <xPortStartScheduler+0xf4>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086fe:	f000 f8fb 	bl	80088f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <xPortStartScheduler+0xf8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a0c      	ldr	r2, [pc, #48]	@ (8008738 <xPortStartScheduler+0xf8>)
 8008708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800870c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800870e:	f7ff ff83 	bl	8008618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008712:	f7fe ff37 	bl	8007584 <vTaskSwitchContext>
	prvTaskExitError();
 8008716:	f7ff ff39 	bl	800858c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000e400 	.word	0xe000e400
 8008728:	200015ec 	.word	0x200015ec
 800872c:	200015f0 	.word	0x200015f0
 8008730:	e000ed20 	.word	0xe000ed20
 8008734:	2000000c 	.word	0x2000000c
 8008738:	e000ef34 	.word	0xe000ef34

0800873c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
 8008756:	607b      	str	r3, [r7, #4]
}
 8008758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800875a:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <vPortEnterCritical+0x64>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a0f      	ldr	r2, [pc, #60]	@ (80087a0 <vPortEnterCritical+0x64>)
 8008762:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008764:	4b0e      	ldr	r3, [pc, #56]	@ (80087a0 <vPortEnterCritical+0x64>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d112      	bne.n	8008792 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800876c:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <vPortEnterCritical+0x68>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <vPortEnterCritical+0x56>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	b672      	cpsid	i
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	b662      	cpsie	i
 800878a:	603b      	str	r3, [r7, #0]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <vPortEnterCritical+0x52>
	}
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	2000000c 	.word	0x2000000c
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ae:	4b13      	ldr	r3, [pc, #76]	@ (80087fc <vPortExitCritical+0x54>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <vPortExitCritical+0x2a>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	b672      	cpsid	i
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	b662      	cpsie	i
 80087ca:	607b      	str	r3, [r7, #4]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80087d2:	4b0a      	ldr	r3, [pc, #40]	@ (80087fc <vPortExitCritical+0x54>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <vPortExitCritical+0x54>)
 80087da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <vPortExitCritical+0x54>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <vPortExitCritical+0x48>
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	2000000c 	.word	0x2000000c

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008824:	b672      	cpsid	i
 8008826:	f380 8811 	msr	BASEPRI, r0
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	b662      	cpsie	i
 8008834:	f7fe fea6 	bl	8007584 <vTaskSwitchContext>
 8008838:	f04f 0000 	mov.w	r0, #0
 800883c:	f380 8811 	msr	BASEPRI, r0
 8008840:	bc09      	pop	{r0, r3}
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	6808      	ldr	r0, [r1, #0]
 8008846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	f01e 0f10 	tst.w	lr, #16
 800884e:	bf08      	it	eq
 8008850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008854:	f380 8809 	msr	PSP, r0
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop

08008860 <pxCurrentTCBConst>:
 8008860:	20000fc0 	.word	0x20000fc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	b672      	cpsid	i
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	b662      	cpsie	i
 8008882:	607b      	str	r3, [r7, #4]
}
 8008884:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008886:	f7fe fdc1 	bl	800740c <xTaskIncrementTick>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008890:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <SysTick_Handler+0x44>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f383 8811 	msr	BASEPRI, r3
}
 80088a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088b4:	4b0b      	ldr	r3, [pc, #44]	@ (80088e4 <vPortSetupTimerInterrupt+0x34>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088ba:	4b0b      	ldr	r3, [pc, #44]	@ (80088e8 <vPortSetupTimerInterrupt+0x38>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088c0:	4b0a      	ldr	r3, [pc, #40]	@ (80088ec <vPortSetupTimerInterrupt+0x3c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <vPortSetupTimerInterrupt+0x40>)
 80088c6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ca:	099b      	lsrs	r3, r3, #6
 80088cc:	4a09      	ldr	r2, [pc, #36]	@ (80088f4 <vPortSetupTimerInterrupt+0x44>)
 80088ce:	3b01      	subs	r3, #1
 80088d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088d2:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <vPortSetupTimerInterrupt+0x34>)
 80088d4:	2207      	movs	r2, #7
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	e000e010 	.word	0xe000e010
 80088e8:	e000e018 	.word	0xe000e018
 80088ec:	20000000 	.word	0x20000000
 80088f0:	10624dd3 	.word	0x10624dd3
 80088f4:	e000e014 	.word	0xe000e014

080088f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008908 <vPortEnableVFP+0x10>
 80088fc:	6801      	ldr	r1, [r0, #0]
 80088fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008902:	6001      	str	r1, [r0, #0]
 8008904:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008906:	bf00      	nop
 8008908:	e000ed88 	.word	0xe000ed88

0800890c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008912:	f3ef 8305 	mrs	r3, IPSR
 8008916:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b0f      	cmp	r3, #15
 800891c:	d917      	bls.n	800894e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800891e:	4a1a      	ldr	r2, [pc, #104]	@ (8008988 <vPortValidateInterruptPriority+0x7c>)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008928:	4b18      	ldr	r3, [pc, #96]	@ (800898c <vPortValidateInterruptPriority+0x80>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	7afa      	ldrb	r2, [r7, #11]
 800892e:	429a      	cmp	r2, r3
 8008930:	d20d      	bcs.n	800894e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	b672      	cpsid	i
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	b662      	cpsie	i
 8008946:	607b      	str	r3, [r7, #4]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800894e:	4b10      	ldr	r3, [pc, #64]	@ (8008990 <vPortValidateInterruptPriority+0x84>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <vPortValidateInterruptPriority+0x88>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d90d      	bls.n	800897a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	603b      	str	r3, [r7, #0]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <vPortValidateInterruptPriority+0x6a>
	}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	e000e3f0 	.word	0xe000e3f0
 800898c:	200015ec 	.word	0x200015ec
 8008990:	e000ed0c 	.word	0xe000ed0c
 8008994:	200015f0 	.word	0x200015f0

08008998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	@ 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089a4:	f7fe fc74 	bl	8007290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008b20 <pvPortMalloc+0x188>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089b0:	f000 f920 	bl	8008bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b24 <pvPortMalloc+0x18c>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 8094 	bne.w	8008aea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d020      	beq.n	8008a0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80089c8:	2208      	movs	r2, #8
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d017      	beq.n	8008a0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f023 0307 	bic.w	r3, r3, #7
 80089e0:	3308      	adds	r3, #8
 80089e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <pvPortMalloc+0x72>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	617b      	str	r3, [r7, #20]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d06c      	beq.n	8008aea <pvPortMalloc+0x152>
 8008a10:	4b45      	ldr	r3, [pc, #276]	@ (8008b28 <pvPortMalloc+0x190>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d867      	bhi.n	8008aea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a1a:	4b44      	ldr	r3, [pc, #272]	@ (8008b2c <pvPortMalloc+0x194>)
 8008a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a1e:	4b43      	ldr	r3, [pc, #268]	@ (8008b2c <pvPortMalloc+0x194>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a24:	e004      	b.n	8008a30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d903      	bls.n	8008a42 <pvPortMalloc+0xaa>
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f1      	bne.n	8008a26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a42:	4b37      	ldr	r3, [pc, #220]	@ (8008b20 <pvPortMalloc+0x188>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d04e      	beq.n	8008aea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	4413      	add	r3, r2
 8008a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	2308      	movs	r3, #8
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d922      	bls.n	8008ab4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00d      	beq.n	8008a9c <pvPortMalloc+0x104>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	b672      	cpsid	i
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	b662      	cpsie	i
 8008a94:	613b      	str	r3, [r7, #16]
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f000 f902 	bl	8008cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b28 <pvPortMalloc+0x190>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	4a1a      	ldr	r2, [pc, #104]	@ (8008b28 <pvPortMalloc+0x190>)
 8008ac0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ac2:	4b19      	ldr	r3, [pc, #100]	@ (8008b28 <pvPortMalloc+0x190>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b30 <pvPortMalloc+0x198>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d203      	bcs.n	8008ad6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ace:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <pvPortMalloc+0x190>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a17      	ldr	r2, [pc, #92]	@ (8008b30 <pvPortMalloc+0x198>)
 8008ad4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <pvPortMalloc+0x18c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aea:	f7fe fbdf 	bl	80072ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00d      	beq.n	8008b14 <pvPortMalloc+0x17c>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	b672      	cpsid	i
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	b662      	cpsie	i
 8008b0c:	60fb      	str	r3, [r7, #12]
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <pvPortMalloc+0x178>
	return pvReturn;
 8008b14:	69fb      	ldr	r3, [r7, #28]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3728      	adds	r7, #40	@ 0x28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200051fc 	.word	0x200051fc
 8008b24:	20005208 	.word	0x20005208
 8008b28:	20005200 	.word	0x20005200
 8008b2c:	200051f4 	.word	0x200051f4
 8008b30:	20005204 	.word	0x20005204

08008b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d04e      	beq.n	8008be4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b46:	2308      	movs	r3, #8
 8008b48:	425b      	negs	r3, r3
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	4b24      	ldr	r3, [pc, #144]	@ (8008bec <vPortFree+0xb8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10d      	bne.n	8008b7e <vPortFree+0x4a>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00d      	beq.n	8008ba2 <vPortFree+0x6e>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	b672      	cpsid	i
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	b662      	cpsie	i
 8008b9a:	60bb      	str	r3, [r7, #8]
}
 8008b9c:	bf00      	nop
 8008b9e:	bf00      	nop
 8008ba0:	e7fd      	b.n	8008b9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b11      	ldr	r3, [pc, #68]	@ (8008bec <vPortFree+0xb8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d019      	beq.n	8008be4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d115      	bne.n	8008be4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <vPortFree+0xb8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bc8:	f7fe fb62 	bl	8007290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <vPortFree+0xbc>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4a06      	ldr	r2, [pc, #24]	@ (8008bf0 <vPortFree+0xbc>)
 8008bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f000 f86c 	bl	8008cb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008be0:	f7fe fb64 	bl	80072ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008be4:	bf00      	nop
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20005208 	.word	0x20005208
 8008bf0:	20005200 	.word	0x20005200

08008bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c00:	4b27      	ldr	r3, [pc, #156]	@ (8008ca0 <prvHeapInit+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3307      	adds	r3, #7
 8008c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca0 <prvHeapInit+0xac>)
 8008c24:	4413      	add	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ca4 <prvHeapInit+0xb0>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca4 <prvHeapInit+0xb0>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c40:	2208      	movs	r2, #8
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0307 	bic.w	r3, r3, #7
 8008c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4a15      	ldr	r2, [pc, #84]	@ (8008ca8 <prvHeapInit+0xb4>)
 8008c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c56:	4b14      	ldr	r3, [pc, #80]	@ (8008ca8 <prvHeapInit+0xb4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ca8 <prvHeapInit+0xb4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c74:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <prvHeapInit+0xb4>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4a0a      	ldr	r2, [pc, #40]	@ (8008cac <prvHeapInit+0xb8>)
 8008c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a09      	ldr	r2, [pc, #36]	@ (8008cb0 <prvHeapInit+0xbc>)
 8008c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c8c:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <prvHeapInit+0xc0>)
 8008c8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	200015f4 	.word	0x200015f4
 8008ca4:	200051f4 	.word	0x200051f4
 8008ca8:	200051fc 	.word	0x200051fc
 8008cac:	20005204 	.word	0x20005204
 8008cb0:	20005200 	.word	0x20005200
 8008cb4:	20005208 	.word	0x20005208

08008cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cc0:	4b28      	ldr	r3, [pc, #160]	@ (8008d64 <prvInsertBlockIntoFreeList+0xac>)
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e002      	b.n	8008ccc <prvInsertBlockIntoFreeList+0x14>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d8f7      	bhi.n	8008cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d108      	bne.n	8008cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	441a      	add	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d118      	bne.n	8008d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <prvInsertBlockIntoFreeList+0xb0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d00d      	beq.n	8008d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	e008      	b.n	8008d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d36:	4b0c      	ldr	r3, [pc, #48]	@ (8008d68 <prvInsertBlockIntoFreeList+0xb0>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e003      	b.n	8008d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d002      	beq.n	8008d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	200051f4 	.word	0x200051f4
 8008d68:	200051fc 	.word	0x200051fc

08008d6c <sniprintf>:
 8008d6c:	b40c      	push	{r2, r3}
 8008d6e:	b530      	push	{r4, r5, lr}
 8008d70:	4b18      	ldr	r3, [pc, #96]	@ (8008dd4 <sniprintf+0x68>)
 8008d72:	1e0c      	subs	r4, r1, #0
 8008d74:	681d      	ldr	r5, [r3, #0]
 8008d76:	b09d      	sub	sp, #116	@ 0x74
 8008d78:	da08      	bge.n	8008d8c <sniprintf+0x20>
 8008d7a:	238b      	movs	r3, #139	@ 0x8b
 8008d7c:	602b      	str	r3, [r5, #0]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b01d      	add	sp, #116	@ 0x74
 8008d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d88:	b002      	add	sp, #8
 8008d8a:	4770      	bx	lr
 8008d8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008d9a:	bf14      	ite	ne
 8008d9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008da0:	4623      	moveq	r3, r4
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	9307      	str	r3, [sp, #28]
 8008da6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008daa:	9002      	str	r0, [sp, #8]
 8008dac:	9006      	str	r0, [sp, #24]
 8008dae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008db2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008db4:	ab21      	add	r3, sp, #132	@ 0x84
 8008db6:	a902      	add	r1, sp, #8
 8008db8:	4628      	mov	r0, r5
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	f000 f9a2 	bl	8009104 <_svfiprintf_r>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	bfbc      	itt	lt
 8008dc4:	238b      	movlt	r3, #139	@ 0x8b
 8008dc6:	602b      	strlt	r3, [r5, #0]
 8008dc8:	2c00      	cmp	r4, #0
 8008dca:	d0da      	beq.n	8008d82 <sniprintf+0x16>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e7d6      	b.n	8008d82 <sniprintf+0x16>
 8008dd4:	20000010 	.word	0x20000010

08008dd8 <memset>:
 8008dd8:	4402      	add	r2, r0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d100      	bne.n	8008de2 <memset+0xa>
 8008de0:	4770      	bx	lr
 8008de2:	f803 1b01 	strb.w	r1, [r3], #1
 8008de6:	e7f9      	b.n	8008ddc <memset+0x4>

08008de8 <__errno>:
 8008de8:	4b01      	ldr	r3, [pc, #4]	@ (8008df0 <__errno+0x8>)
 8008dea:	6818      	ldr	r0, [r3, #0]
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000010 	.word	0x20000010

08008df4 <__libc_init_array>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	4d0d      	ldr	r5, [pc, #52]	@ (8008e2c <__libc_init_array+0x38>)
 8008df8:	4c0d      	ldr	r4, [pc, #52]	@ (8008e30 <__libc_init_array+0x3c>)
 8008dfa:	1b64      	subs	r4, r4, r5
 8008dfc:	10a4      	asrs	r4, r4, #2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	42a6      	cmp	r6, r4
 8008e02:	d109      	bne.n	8008e18 <__libc_init_array+0x24>
 8008e04:	4d0b      	ldr	r5, [pc, #44]	@ (8008e34 <__libc_init_array+0x40>)
 8008e06:	4c0c      	ldr	r4, [pc, #48]	@ (8008e38 <__libc_init_array+0x44>)
 8008e08:	f000 fc64 	bl	80096d4 <_init>
 8008e0c:	1b64      	subs	r4, r4, r5
 8008e0e:	10a4      	asrs	r4, r4, #2
 8008e10:	2600      	movs	r6, #0
 8008e12:	42a6      	cmp	r6, r4
 8008e14:	d105      	bne.n	8008e22 <__libc_init_array+0x2e>
 8008e16:	bd70      	pop	{r4, r5, r6, pc}
 8008e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1c:	4798      	blx	r3
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7ee      	b.n	8008e00 <__libc_init_array+0xc>
 8008e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e26:	4798      	blx	r3
 8008e28:	3601      	adds	r6, #1
 8008e2a:	e7f2      	b.n	8008e12 <__libc_init_array+0x1e>
 8008e2c:	08009828 	.word	0x08009828
 8008e30:	08009828 	.word	0x08009828
 8008e34:	08009828 	.word	0x08009828
 8008e38:	0800982c 	.word	0x0800982c

08008e3c <__retarget_lock_acquire_recursive>:
 8008e3c:	4770      	bx	lr

08008e3e <__retarget_lock_release_recursive>:
 8008e3e:	4770      	bx	lr

08008e40 <memcpy>:
 8008e40:	440a      	add	r2, r1
 8008e42:	4291      	cmp	r1, r2
 8008e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e48:	d100      	bne.n	8008e4c <memcpy+0xc>
 8008e4a:	4770      	bx	lr
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e56:	4291      	cmp	r1, r2
 8008e58:	d1f9      	bne.n	8008e4e <memcpy+0xe>
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <_free_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4605      	mov	r5, r0
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d041      	beq.n	8008ee8 <_free_r+0x8c>
 8008e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e68:	1f0c      	subs	r4, r1, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bfb8      	it	lt
 8008e6e:	18e4      	addlt	r4, r4, r3
 8008e70:	f000 f8e0 	bl	8009034 <__malloc_lock>
 8008e74:	4a1d      	ldr	r2, [pc, #116]	@ (8008eec <_free_r+0x90>)
 8008e76:	6813      	ldr	r3, [r2, #0]
 8008e78:	b933      	cbnz	r3, 8008e88 <_free_r+0x2c>
 8008e7a:	6063      	str	r3, [r4, #4]
 8008e7c:	6014      	str	r4, [r2, #0]
 8008e7e:	4628      	mov	r0, r5
 8008e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e84:	f000 b8dc 	b.w	8009040 <__malloc_unlock>
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d908      	bls.n	8008e9e <_free_r+0x42>
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	1821      	adds	r1, r4, r0
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf01      	itttt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	1809      	addeq	r1, r1, r0
 8008e9a:	6021      	streq	r1, [r4, #0]
 8008e9c:	e7ed      	b.n	8008e7a <_free_r+0x1e>
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	b10b      	cbz	r3, 8008ea8 <_free_r+0x4c>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d9fa      	bls.n	8008e9e <_free_r+0x42>
 8008ea8:	6811      	ldr	r1, [r2, #0]
 8008eaa:	1850      	adds	r0, r2, r1
 8008eac:	42a0      	cmp	r0, r4
 8008eae:	d10b      	bne.n	8008ec8 <_free_r+0x6c>
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	1850      	adds	r0, r2, r1
 8008eb6:	4283      	cmp	r3, r0
 8008eb8:	6011      	str	r1, [r2, #0]
 8008eba:	d1e0      	bne.n	8008e7e <_free_r+0x22>
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	6053      	str	r3, [r2, #4]
 8008ec2:	4408      	add	r0, r1
 8008ec4:	6010      	str	r0, [r2, #0]
 8008ec6:	e7da      	b.n	8008e7e <_free_r+0x22>
 8008ec8:	d902      	bls.n	8008ed0 <_free_r+0x74>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	e7d6      	b.n	8008e7e <_free_r+0x22>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	1821      	adds	r1, r4, r0
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	bf04      	itt	eq
 8008ed8:	6819      	ldreq	r1, [r3, #0]
 8008eda:	685b      	ldreq	r3, [r3, #4]
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	bf04      	itt	eq
 8008ee0:	1809      	addeq	r1, r1, r0
 8008ee2:	6021      	streq	r1, [r4, #0]
 8008ee4:	6054      	str	r4, [r2, #4]
 8008ee6:	e7ca      	b.n	8008e7e <_free_r+0x22>
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	bf00      	nop
 8008eec:	20005350 	.word	0x20005350

08008ef0 <sbrk_aligned>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8008f30 <sbrk_aligned+0x40>)
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	6831      	ldr	r1, [r6, #0]
 8008ef8:	4605      	mov	r5, r0
 8008efa:	b911      	cbnz	r1, 8008f02 <sbrk_aligned+0x12>
 8008efc:	f000 fba4 	bl	8009648 <_sbrk_r>
 8008f00:	6030      	str	r0, [r6, #0]
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 fb9f 	bl	8009648 <_sbrk_r>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	d103      	bne.n	8008f16 <sbrk_aligned+0x26>
 8008f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f12:	4620      	mov	r0, r4
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
 8008f16:	1cc4      	adds	r4, r0, #3
 8008f18:	f024 0403 	bic.w	r4, r4, #3
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d0f8      	beq.n	8008f12 <sbrk_aligned+0x22>
 8008f20:	1a21      	subs	r1, r4, r0
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 fb90 	bl	8009648 <_sbrk_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1f2      	bne.n	8008f12 <sbrk_aligned+0x22>
 8008f2c:	e7ef      	b.n	8008f0e <sbrk_aligned+0x1e>
 8008f2e:	bf00      	nop
 8008f30:	2000534c 	.word	0x2000534c

08008f34 <_malloc_r>:
 8008f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f38:	1ccd      	adds	r5, r1, #3
 8008f3a:	f025 0503 	bic.w	r5, r5, #3
 8008f3e:	3508      	adds	r5, #8
 8008f40:	2d0c      	cmp	r5, #12
 8008f42:	bf38      	it	cc
 8008f44:	250c      	movcc	r5, #12
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	4606      	mov	r6, r0
 8008f4a:	db01      	blt.n	8008f50 <_malloc_r+0x1c>
 8008f4c:	42a9      	cmp	r1, r5
 8008f4e:	d904      	bls.n	8008f5a <_malloc_r+0x26>
 8008f50:	230c      	movs	r3, #12
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	2000      	movs	r0, #0
 8008f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009030 <_malloc_r+0xfc>
 8008f5e:	f000 f869 	bl	8009034 <__malloc_lock>
 8008f62:	f8d8 3000 	ldr.w	r3, [r8]
 8008f66:	461c      	mov	r4, r3
 8008f68:	bb44      	cbnz	r4, 8008fbc <_malloc_r+0x88>
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff ffbf 	bl	8008ef0 <sbrk_aligned>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	4604      	mov	r4, r0
 8008f76:	d158      	bne.n	800902a <_malloc_r+0xf6>
 8008f78:	f8d8 4000 	ldr.w	r4, [r8]
 8008f7c:	4627      	mov	r7, r4
 8008f7e:	2f00      	cmp	r7, #0
 8008f80:	d143      	bne.n	800900a <_malloc_r+0xd6>
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d04b      	beq.n	800901e <_malloc_r+0xea>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	eb04 0903 	add.w	r9, r4, r3
 8008f90:	f000 fb5a 	bl	8009648 <_sbrk_r>
 8008f94:	4581      	cmp	r9, r0
 8008f96:	d142      	bne.n	800901e <_malloc_r+0xea>
 8008f98:	6821      	ldr	r1, [r4, #0]
 8008f9a:	1a6d      	subs	r5, r5, r1
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffa6 	bl	8008ef0 <sbrk_aligned>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d03a      	beq.n	800901e <_malloc_r+0xea>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	442b      	add	r3, r5
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	bb62      	cbnz	r2, 8009010 <_malloc_r+0xdc>
 8008fb6:	f8c8 7000 	str.w	r7, [r8]
 8008fba:	e00f      	b.n	8008fdc <_malloc_r+0xa8>
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	1b52      	subs	r2, r2, r5
 8008fc0:	d420      	bmi.n	8009004 <_malloc_r+0xd0>
 8008fc2:	2a0b      	cmp	r2, #11
 8008fc4:	d917      	bls.n	8008ff6 <_malloc_r+0xc2>
 8008fc6:	1961      	adds	r1, r4, r5
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	6025      	str	r5, [r4, #0]
 8008fcc:	bf18      	it	ne
 8008fce:	6059      	strne	r1, [r3, #4]
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	bf08      	it	eq
 8008fd4:	f8c8 1000 	streq.w	r1, [r8]
 8008fd8:	5162      	str	r2, [r4, r5]
 8008fda:	604b      	str	r3, [r1, #4]
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f000 f82f 	bl	8009040 <__malloc_unlock>
 8008fe2:	f104 000b 	add.w	r0, r4, #11
 8008fe6:	1d23      	adds	r3, r4, #4
 8008fe8:	f020 0007 	bic.w	r0, r0, #7
 8008fec:	1ac2      	subs	r2, r0, r3
 8008fee:	bf1c      	itt	ne
 8008ff0:	1a1b      	subne	r3, r3, r0
 8008ff2:	50a3      	strne	r3, [r4, r2]
 8008ff4:	e7af      	b.n	8008f56 <_malloc_r+0x22>
 8008ff6:	6862      	ldr	r2, [r4, #4]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	bf0c      	ite	eq
 8008ffc:	f8c8 2000 	streq.w	r2, [r8]
 8009000:	605a      	strne	r2, [r3, #4]
 8009002:	e7eb      	b.n	8008fdc <_malloc_r+0xa8>
 8009004:	4623      	mov	r3, r4
 8009006:	6864      	ldr	r4, [r4, #4]
 8009008:	e7ae      	b.n	8008f68 <_malloc_r+0x34>
 800900a:	463c      	mov	r4, r7
 800900c:	687f      	ldr	r7, [r7, #4]
 800900e:	e7b6      	b.n	8008f7e <_malloc_r+0x4a>
 8009010:	461a      	mov	r2, r3
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	42a3      	cmp	r3, r4
 8009016:	d1fb      	bne.n	8009010 <_malloc_r+0xdc>
 8009018:	2300      	movs	r3, #0
 800901a:	6053      	str	r3, [r2, #4]
 800901c:	e7de      	b.n	8008fdc <_malloc_r+0xa8>
 800901e:	230c      	movs	r3, #12
 8009020:	6033      	str	r3, [r6, #0]
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f80c 	bl	8009040 <__malloc_unlock>
 8009028:	e794      	b.n	8008f54 <_malloc_r+0x20>
 800902a:	6005      	str	r5, [r0, #0]
 800902c:	e7d6      	b.n	8008fdc <_malloc_r+0xa8>
 800902e:	bf00      	nop
 8009030:	20005350 	.word	0x20005350

08009034 <__malloc_lock>:
 8009034:	4801      	ldr	r0, [pc, #4]	@ (800903c <__malloc_lock+0x8>)
 8009036:	f7ff bf01 	b.w	8008e3c <__retarget_lock_acquire_recursive>
 800903a:	bf00      	nop
 800903c:	20005348 	.word	0x20005348

08009040 <__malloc_unlock>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__malloc_unlock+0x8>)
 8009042:	f7ff befc 	b.w	8008e3e <__retarget_lock_release_recursive>
 8009046:	bf00      	nop
 8009048:	20005348 	.word	0x20005348

0800904c <__ssputs_r>:
 800904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	688e      	ldr	r6, [r1, #8]
 8009052:	461f      	mov	r7, r3
 8009054:	42be      	cmp	r6, r7
 8009056:	680b      	ldr	r3, [r1, #0]
 8009058:	4682      	mov	sl, r0
 800905a:	460c      	mov	r4, r1
 800905c:	4690      	mov	r8, r2
 800905e:	d82d      	bhi.n	80090bc <__ssputs_r+0x70>
 8009060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009068:	d026      	beq.n	80090b8 <__ssputs_r+0x6c>
 800906a:	6965      	ldr	r5, [r4, #20]
 800906c:	6909      	ldr	r1, [r1, #16]
 800906e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009072:	eba3 0901 	sub.w	r9, r3, r1
 8009076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800907a:	1c7b      	adds	r3, r7, #1
 800907c:	444b      	add	r3, r9
 800907e:	106d      	asrs	r5, r5, #1
 8009080:	429d      	cmp	r5, r3
 8009082:	bf38      	it	cc
 8009084:	461d      	movcc	r5, r3
 8009086:	0553      	lsls	r3, r2, #21
 8009088:	d527      	bpl.n	80090da <__ssputs_r+0x8e>
 800908a:	4629      	mov	r1, r5
 800908c:	f7ff ff52 	bl	8008f34 <_malloc_r>
 8009090:	4606      	mov	r6, r0
 8009092:	b360      	cbz	r0, 80090ee <__ssputs_r+0xa2>
 8009094:	6921      	ldr	r1, [r4, #16]
 8009096:	464a      	mov	r2, r9
 8009098:	f7ff fed2 	bl	8008e40 <memcpy>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	6126      	str	r6, [r4, #16]
 80090aa:	6165      	str	r5, [r4, #20]
 80090ac:	444e      	add	r6, r9
 80090ae:	eba5 0509 	sub.w	r5, r5, r9
 80090b2:	6026      	str	r6, [r4, #0]
 80090b4:	60a5      	str	r5, [r4, #8]
 80090b6:	463e      	mov	r6, r7
 80090b8:	42be      	cmp	r6, r7
 80090ba:	d900      	bls.n	80090be <__ssputs_r+0x72>
 80090bc:	463e      	mov	r6, r7
 80090be:	6820      	ldr	r0, [r4, #0]
 80090c0:	4632      	mov	r2, r6
 80090c2:	4641      	mov	r1, r8
 80090c4:	f000 faa6 	bl	8009614 <memmove>
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	1b9b      	subs	r3, r3, r6
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	4433      	add	r3, r6
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	2000      	movs	r0, #0
 80090d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090da:	462a      	mov	r2, r5
 80090dc:	f000 fac4 	bl	8009668 <_realloc_r>
 80090e0:	4606      	mov	r6, r0
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d1e0      	bne.n	80090a8 <__ssputs_r+0x5c>
 80090e6:	6921      	ldr	r1, [r4, #16]
 80090e8:	4650      	mov	r0, sl
 80090ea:	f7ff feb7 	bl	8008e5c <_free_r>
 80090ee:	230c      	movs	r3, #12
 80090f0:	f8ca 3000 	str.w	r3, [sl]
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	e7e9      	b.n	80090d6 <__ssputs_r+0x8a>
	...

08009104 <_svfiprintf_r>:
 8009104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4698      	mov	r8, r3
 800910a:	898b      	ldrh	r3, [r1, #12]
 800910c:	061b      	lsls	r3, r3, #24
 800910e:	b09d      	sub	sp, #116	@ 0x74
 8009110:	4607      	mov	r7, r0
 8009112:	460d      	mov	r5, r1
 8009114:	4614      	mov	r4, r2
 8009116:	d510      	bpl.n	800913a <_svfiprintf_r+0x36>
 8009118:	690b      	ldr	r3, [r1, #16]
 800911a:	b973      	cbnz	r3, 800913a <_svfiprintf_r+0x36>
 800911c:	2140      	movs	r1, #64	@ 0x40
 800911e:	f7ff ff09 	bl	8008f34 <_malloc_r>
 8009122:	6028      	str	r0, [r5, #0]
 8009124:	6128      	str	r0, [r5, #16]
 8009126:	b930      	cbnz	r0, 8009136 <_svfiprintf_r+0x32>
 8009128:	230c      	movs	r3, #12
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
 8009130:	b01d      	add	sp, #116	@ 0x74
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	2340      	movs	r3, #64	@ 0x40
 8009138:	616b      	str	r3, [r5, #20]
 800913a:	2300      	movs	r3, #0
 800913c:	9309      	str	r3, [sp, #36]	@ 0x24
 800913e:	2320      	movs	r3, #32
 8009140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009144:	f8cd 800c 	str.w	r8, [sp, #12]
 8009148:	2330      	movs	r3, #48	@ 0x30
 800914a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092e8 <_svfiprintf_r+0x1e4>
 800914e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009152:	f04f 0901 	mov.w	r9, #1
 8009156:	4623      	mov	r3, r4
 8009158:	469a      	mov	sl, r3
 800915a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800915e:	b10a      	cbz	r2, 8009164 <_svfiprintf_r+0x60>
 8009160:	2a25      	cmp	r2, #37	@ 0x25
 8009162:	d1f9      	bne.n	8009158 <_svfiprintf_r+0x54>
 8009164:	ebba 0b04 	subs.w	fp, sl, r4
 8009168:	d00b      	beq.n	8009182 <_svfiprintf_r+0x7e>
 800916a:	465b      	mov	r3, fp
 800916c:	4622      	mov	r2, r4
 800916e:	4629      	mov	r1, r5
 8009170:	4638      	mov	r0, r7
 8009172:	f7ff ff6b 	bl	800904c <__ssputs_r>
 8009176:	3001      	adds	r0, #1
 8009178:	f000 80a7 	beq.w	80092ca <_svfiprintf_r+0x1c6>
 800917c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800917e:	445a      	add	r2, fp
 8009180:	9209      	str	r2, [sp, #36]	@ 0x24
 8009182:	f89a 3000 	ldrb.w	r3, [sl]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 809f 	beq.w	80092ca <_svfiprintf_r+0x1c6>
 800918c:	2300      	movs	r3, #0
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009196:	f10a 0a01 	add.w	sl, sl, #1
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	9307      	str	r3, [sp, #28]
 800919e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091a4:	4654      	mov	r4, sl
 80091a6:	2205      	movs	r2, #5
 80091a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ac:	484e      	ldr	r0, [pc, #312]	@ (80092e8 <_svfiprintf_r+0x1e4>)
 80091ae:	f7f7 f847 	bl	8000240 <memchr>
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	b9d8      	cbnz	r0, 80091ee <_svfiprintf_r+0xea>
 80091b6:	06d0      	lsls	r0, r2, #27
 80091b8:	bf44      	itt	mi
 80091ba:	2320      	movmi	r3, #32
 80091bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091c0:	0711      	lsls	r1, r2, #28
 80091c2:	bf44      	itt	mi
 80091c4:	232b      	movmi	r3, #43	@ 0x2b
 80091c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ca:	f89a 3000 	ldrb.w	r3, [sl]
 80091ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d0:	d015      	beq.n	80091fe <_svfiprintf_r+0xfa>
 80091d2:	9a07      	ldr	r2, [sp, #28]
 80091d4:	4654      	mov	r4, sl
 80091d6:	2000      	movs	r0, #0
 80091d8:	f04f 0c0a 	mov.w	ip, #10
 80091dc:	4621      	mov	r1, r4
 80091de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e2:	3b30      	subs	r3, #48	@ 0x30
 80091e4:	2b09      	cmp	r3, #9
 80091e6:	d94b      	bls.n	8009280 <_svfiprintf_r+0x17c>
 80091e8:	b1b0      	cbz	r0, 8009218 <_svfiprintf_r+0x114>
 80091ea:	9207      	str	r2, [sp, #28]
 80091ec:	e014      	b.n	8009218 <_svfiprintf_r+0x114>
 80091ee:	eba0 0308 	sub.w	r3, r0, r8
 80091f2:	fa09 f303 	lsl.w	r3, r9, r3
 80091f6:	4313      	orrs	r3, r2
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	46a2      	mov	sl, r4
 80091fc:	e7d2      	b.n	80091a4 <_svfiprintf_r+0xa0>
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	1d19      	adds	r1, r3, #4
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	9103      	str	r1, [sp, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	bfbb      	ittet	lt
 800920a:	425b      	neglt	r3, r3
 800920c:	f042 0202 	orrlt.w	r2, r2, #2
 8009210:	9307      	strge	r3, [sp, #28]
 8009212:	9307      	strlt	r3, [sp, #28]
 8009214:	bfb8      	it	lt
 8009216:	9204      	strlt	r2, [sp, #16]
 8009218:	7823      	ldrb	r3, [r4, #0]
 800921a:	2b2e      	cmp	r3, #46	@ 0x2e
 800921c:	d10a      	bne.n	8009234 <_svfiprintf_r+0x130>
 800921e:	7863      	ldrb	r3, [r4, #1]
 8009220:	2b2a      	cmp	r3, #42	@ 0x2a
 8009222:	d132      	bne.n	800928a <_svfiprintf_r+0x186>
 8009224:	9b03      	ldr	r3, [sp, #12]
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	9203      	str	r2, [sp, #12]
 800922c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009230:	3402      	adds	r4, #2
 8009232:	9305      	str	r3, [sp, #20]
 8009234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092f8 <_svfiprintf_r+0x1f4>
 8009238:	7821      	ldrb	r1, [r4, #0]
 800923a:	2203      	movs	r2, #3
 800923c:	4650      	mov	r0, sl
 800923e:	f7f6 ffff 	bl	8000240 <memchr>
 8009242:	b138      	cbz	r0, 8009254 <_svfiprintf_r+0x150>
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	eba0 000a 	sub.w	r0, r0, sl
 800924a:	2240      	movs	r2, #64	@ 0x40
 800924c:	4082      	lsls	r2, r0
 800924e:	4313      	orrs	r3, r2
 8009250:	3401      	adds	r4, #1
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009258:	4824      	ldr	r0, [pc, #144]	@ (80092ec <_svfiprintf_r+0x1e8>)
 800925a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800925e:	2206      	movs	r2, #6
 8009260:	f7f6 ffee 	bl	8000240 <memchr>
 8009264:	2800      	cmp	r0, #0
 8009266:	d036      	beq.n	80092d6 <_svfiprintf_r+0x1d2>
 8009268:	4b21      	ldr	r3, [pc, #132]	@ (80092f0 <_svfiprintf_r+0x1ec>)
 800926a:	bb1b      	cbnz	r3, 80092b4 <_svfiprintf_r+0x1b0>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	3307      	adds	r3, #7
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	3308      	adds	r3, #8
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927a:	4433      	add	r3, r6
 800927c:	9309      	str	r3, [sp, #36]	@ 0x24
 800927e:	e76a      	b.n	8009156 <_svfiprintf_r+0x52>
 8009280:	fb0c 3202 	mla	r2, ip, r2, r3
 8009284:	460c      	mov	r4, r1
 8009286:	2001      	movs	r0, #1
 8009288:	e7a8      	b.n	80091dc <_svfiprintf_r+0xd8>
 800928a:	2300      	movs	r3, #0
 800928c:	3401      	adds	r4, #1
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4619      	mov	r1, r3
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	4620      	mov	r0, r4
 8009298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800929c:	3a30      	subs	r2, #48	@ 0x30
 800929e:	2a09      	cmp	r2, #9
 80092a0:	d903      	bls.n	80092aa <_svfiprintf_r+0x1a6>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c6      	beq.n	8009234 <_svfiprintf_r+0x130>
 80092a6:	9105      	str	r1, [sp, #20]
 80092a8:	e7c4      	b.n	8009234 <_svfiprintf_r+0x130>
 80092aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ae:	4604      	mov	r4, r0
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7f0      	b.n	8009296 <_svfiprintf_r+0x192>
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4b0e      	ldr	r3, [pc, #56]	@ (80092f4 <_svfiprintf_r+0x1f0>)
 80092bc:	a904      	add	r1, sp, #16
 80092be:	4638      	mov	r0, r7
 80092c0:	f3af 8000 	nop.w
 80092c4:	1c42      	adds	r2, r0, #1
 80092c6:	4606      	mov	r6, r0
 80092c8:	d1d6      	bne.n	8009278 <_svfiprintf_r+0x174>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	065b      	lsls	r3, r3, #25
 80092ce:	f53f af2d 	bmi.w	800912c <_svfiprintf_r+0x28>
 80092d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092d4:	e72c      	b.n	8009130 <_svfiprintf_r+0x2c>
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	462a      	mov	r2, r5
 80092dc:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <_svfiprintf_r+0x1f0>)
 80092de:	a904      	add	r1, sp, #16
 80092e0:	4638      	mov	r0, r7
 80092e2:	f000 f879 	bl	80093d8 <_printf_i>
 80092e6:	e7ed      	b.n	80092c4 <_svfiprintf_r+0x1c0>
 80092e8:	080097ec 	.word	0x080097ec
 80092ec:	080097f6 	.word	0x080097f6
 80092f0:	00000000 	.word	0x00000000
 80092f4:	0800904d 	.word	0x0800904d
 80092f8:	080097f2 	.word	0x080097f2

080092fc <_printf_common>:
 80092fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	4616      	mov	r6, r2
 8009302:	4698      	mov	r8, r3
 8009304:	688a      	ldr	r2, [r1, #8]
 8009306:	690b      	ldr	r3, [r1, #16]
 8009308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800930c:	4293      	cmp	r3, r2
 800930e:	bfb8      	it	lt
 8009310:	4613      	movlt	r3, r2
 8009312:	6033      	str	r3, [r6, #0]
 8009314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009318:	4607      	mov	r7, r0
 800931a:	460c      	mov	r4, r1
 800931c:	b10a      	cbz	r2, 8009322 <_printf_common+0x26>
 800931e:	3301      	adds	r3, #1
 8009320:	6033      	str	r3, [r6, #0]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	0699      	lsls	r1, r3, #26
 8009326:	bf42      	ittt	mi
 8009328:	6833      	ldrmi	r3, [r6, #0]
 800932a:	3302      	addmi	r3, #2
 800932c:	6033      	strmi	r3, [r6, #0]
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	f015 0506 	ands.w	r5, r5, #6
 8009334:	d106      	bne.n	8009344 <_printf_common+0x48>
 8009336:	f104 0a19 	add.w	sl, r4, #25
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	6832      	ldr	r2, [r6, #0]
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	42ab      	cmp	r3, r5
 8009342:	dc26      	bgt.n	8009392 <_printf_common+0x96>
 8009344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	3b00      	subs	r3, #0
 800934c:	bf18      	it	ne
 800934e:	2301      	movne	r3, #1
 8009350:	0692      	lsls	r2, r2, #26
 8009352:	d42b      	bmi.n	80093ac <_printf_common+0xb0>
 8009354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009358:	4641      	mov	r1, r8
 800935a:	4638      	mov	r0, r7
 800935c:	47c8      	blx	r9
 800935e:	3001      	adds	r0, #1
 8009360:	d01e      	beq.n	80093a0 <_printf_common+0xa4>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	f003 0306 	and.w	r3, r3, #6
 800936a:	2b04      	cmp	r3, #4
 800936c:	bf02      	ittt	eq
 800936e:	68e5      	ldreq	r5, [r4, #12]
 8009370:	6833      	ldreq	r3, [r6, #0]
 8009372:	1aed      	subeq	r5, r5, r3
 8009374:	68a3      	ldr	r3, [r4, #8]
 8009376:	bf0c      	ite	eq
 8009378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800937c:	2500      	movne	r5, #0
 800937e:	4293      	cmp	r3, r2
 8009380:	bfc4      	itt	gt
 8009382:	1a9b      	subgt	r3, r3, r2
 8009384:	18ed      	addgt	r5, r5, r3
 8009386:	2600      	movs	r6, #0
 8009388:	341a      	adds	r4, #26
 800938a:	42b5      	cmp	r5, r6
 800938c:	d11a      	bne.n	80093c4 <_printf_common+0xc8>
 800938e:	2000      	movs	r0, #0
 8009390:	e008      	b.n	80093a4 <_printf_common+0xa8>
 8009392:	2301      	movs	r3, #1
 8009394:	4652      	mov	r2, sl
 8009396:	4641      	mov	r1, r8
 8009398:	4638      	mov	r0, r7
 800939a:	47c8      	blx	r9
 800939c:	3001      	adds	r0, #1
 800939e:	d103      	bne.n	80093a8 <_printf_common+0xac>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a8:	3501      	adds	r5, #1
 80093aa:	e7c6      	b.n	800933a <_printf_common+0x3e>
 80093ac:	18e1      	adds	r1, r4, r3
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	2030      	movs	r0, #48	@ 0x30
 80093b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093b6:	4422      	add	r2, r4
 80093b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093c0:	3302      	adds	r3, #2
 80093c2:	e7c7      	b.n	8009354 <_printf_common+0x58>
 80093c4:	2301      	movs	r3, #1
 80093c6:	4622      	mov	r2, r4
 80093c8:	4641      	mov	r1, r8
 80093ca:	4638      	mov	r0, r7
 80093cc:	47c8      	blx	r9
 80093ce:	3001      	adds	r0, #1
 80093d0:	d0e6      	beq.n	80093a0 <_printf_common+0xa4>
 80093d2:	3601      	adds	r6, #1
 80093d4:	e7d9      	b.n	800938a <_printf_common+0x8e>
	...

080093d8 <_printf_i>:
 80093d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	7e0f      	ldrb	r7, [r1, #24]
 80093de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093e0:	2f78      	cmp	r7, #120	@ 0x78
 80093e2:	4691      	mov	r9, r2
 80093e4:	4680      	mov	r8, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	469a      	mov	sl, r3
 80093ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093ee:	d807      	bhi.n	8009400 <_printf_i+0x28>
 80093f0:	2f62      	cmp	r7, #98	@ 0x62
 80093f2:	d80a      	bhi.n	800940a <_printf_i+0x32>
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	f000 80d1 	beq.w	800959c <_printf_i+0x1c4>
 80093fa:	2f58      	cmp	r7, #88	@ 0x58
 80093fc:	f000 80b8 	beq.w	8009570 <_printf_i+0x198>
 8009400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009408:	e03a      	b.n	8009480 <_printf_i+0xa8>
 800940a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800940e:	2b15      	cmp	r3, #21
 8009410:	d8f6      	bhi.n	8009400 <_printf_i+0x28>
 8009412:	a101      	add	r1, pc, #4	@ (adr r1, 8009418 <_printf_i+0x40>)
 8009414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009418:	08009471 	.word	0x08009471
 800941c:	08009485 	.word	0x08009485
 8009420:	08009401 	.word	0x08009401
 8009424:	08009401 	.word	0x08009401
 8009428:	08009401 	.word	0x08009401
 800942c:	08009401 	.word	0x08009401
 8009430:	08009485 	.word	0x08009485
 8009434:	08009401 	.word	0x08009401
 8009438:	08009401 	.word	0x08009401
 800943c:	08009401 	.word	0x08009401
 8009440:	08009401 	.word	0x08009401
 8009444:	08009583 	.word	0x08009583
 8009448:	080094af 	.word	0x080094af
 800944c:	0800953d 	.word	0x0800953d
 8009450:	08009401 	.word	0x08009401
 8009454:	08009401 	.word	0x08009401
 8009458:	080095a5 	.word	0x080095a5
 800945c:	08009401 	.word	0x08009401
 8009460:	080094af 	.word	0x080094af
 8009464:	08009401 	.word	0x08009401
 8009468:	08009401 	.word	0x08009401
 800946c:	08009545 	.word	0x08009545
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	1d1a      	adds	r2, r3, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6032      	str	r2, [r6, #0]
 8009478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800947c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009480:	2301      	movs	r3, #1
 8009482:	e09c      	b.n	80095be <_printf_i+0x1e6>
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	1d19      	adds	r1, r3, #4
 800948a:	6031      	str	r1, [r6, #0]
 800948c:	0606      	lsls	r6, r0, #24
 800948e:	d501      	bpl.n	8009494 <_printf_i+0xbc>
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	e003      	b.n	800949c <_printf_i+0xc4>
 8009494:	0645      	lsls	r5, r0, #25
 8009496:	d5fb      	bpl.n	8009490 <_printf_i+0xb8>
 8009498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800949c:	2d00      	cmp	r5, #0
 800949e:	da03      	bge.n	80094a8 <_printf_i+0xd0>
 80094a0:	232d      	movs	r3, #45	@ 0x2d
 80094a2:	426d      	negs	r5, r5
 80094a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a8:	4858      	ldr	r0, [pc, #352]	@ (800960c <_printf_i+0x234>)
 80094aa:	230a      	movs	r3, #10
 80094ac:	e011      	b.n	80094d2 <_printf_i+0xfa>
 80094ae:	6821      	ldr	r1, [r4, #0]
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	0608      	lsls	r0, r1, #24
 80094b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094b8:	d402      	bmi.n	80094c0 <_printf_i+0xe8>
 80094ba:	0649      	lsls	r1, r1, #25
 80094bc:	bf48      	it	mi
 80094be:	b2ad      	uxthmi	r5, r5
 80094c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80094c2:	4852      	ldr	r0, [pc, #328]	@ (800960c <_printf_i+0x234>)
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	bf14      	ite	ne
 80094c8:	230a      	movne	r3, #10
 80094ca:	2308      	moveq	r3, #8
 80094cc:	2100      	movs	r1, #0
 80094ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094d2:	6866      	ldr	r6, [r4, #4]
 80094d4:	60a6      	str	r6, [r4, #8]
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	db05      	blt.n	80094e6 <_printf_i+0x10e>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	432e      	orrs	r6, r5
 80094de:	f021 0104 	bic.w	r1, r1, #4
 80094e2:	6021      	str	r1, [r4, #0]
 80094e4:	d04b      	beq.n	800957e <_printf_i+0x1a6>
 80094e6:	4616      	mov	r6, r2
 80094e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80094ec:	fb03 5711 	mls	r7, r3, r1, r5
 80094f0:	5dc7      	ldrb	r7, [r0, r7]
 80094f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094f6:	462f      	mov	r7, r5
 80094f8:	42bb      	cmp	r3, r7
 80094fa:	460d      	mov	r5, r1
 80094fc:	d9f4      	bls.n	80094e8 <_printf_i+0x110>
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d10b      	bne.n	800951a <_printf_i+0x142>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	07df      	lsls	r7, r3, #31
 8009506:	d508      	bpl.n	800951a <_printf_i+0x142>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	6861      	ldr	r1, [r4, #4]
 800950c:	4299      	cmp	r1, r3
 800950e:	bfde      	ittt	le
 8009510:	2330      	movle	r3, #48	@ 0x30
 8009512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800951a:	1b92      	subs	r2, r2, r6
 800951c:	6122      	str	r2, [r4, #16]
 800951e:	f8cd a000 	str.w	sl, [sp]
 8009522:	464b      	mov	r3, r9
 8009524:	aa03      	add	r2, sp, #12
 8009526:	4621      	mov	r1, r4
 8009528:	4640      	mov	r0, r8
 800952a:	f7ff fee7 	bl	80092fc <_printf_common>
 800952e:	3001      	adds	r0, #1
 8009530:	d14a      	bne.n	80095c8 <_printf_i+0x1f0>
 8009532:	f04f 30ff 	mov.w	r0, #4294967295
 8009536:	b004      	add	sp, #16
 8009538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	f043 0320 	orr.w	r3, r3, #32
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	4832      	ldr	r0, [pc, #200]	@ (8009610 <_printf_i+0x238>)
 8009546:	2778      	movs	r7, #120	@ 0x78
 8009548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	6831      	ldr	r1, [r6, #0]
 8009550:	061f      	lsls	r7, r3, #24
 8009552:	f851 5b04 	ldr.w	r5, [r1], #4
 8009556:	d402      	bmi.n	800955e <_printf_i+0x186>
 8009558:	065f      	lsls	r7, r3, #25
 800955a:	bf48      	it	mi
 800955c:	b2ad      	uxthmi	r5, r5
 800955e:	6031      	str	r1, [r6, #0]
 8009560:	07d9      	lsls	r1, r3, #31
 8009562:	bf44      	itt	mi
 8009564:	f043 0320 	orrmi.w	r3, r3, #32
 8009568:	6023      	strmi	r3, [r4, #0]
 800956a:	b11d      	cbz	r5, 8009574 <_printf_i+0x19c>
 800956c:	2310      	movs	r3, #16
 800956e:	e7ad      	b.n	80094cc <_printf_i+0xf4>
 8009570:	4826      	ldr	r0, [pc, #152]	@ (800960c <_printf_i+0x234>)
 8009572:	e7e9      	b.n	8009548 <_printf_i+0x170>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	f023 0320 	bic.w	r3, r3, #32
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	e7f6      	b.n	800956c <_printf_i+0x194>
 800957e:	4616      	mov	r6, r2
 8009580:	e7bd      	b.n	80094fe <_printf_i+0x126>
 8009582:	6833      	ldr	r3, [r6, #0]
 8009584:	6825      	ldr	r5, [r4, #0]
 8009586:	6961      	ldr	r1, [r4, #20]
 8009588:	1d18      	adds	r0, r3, #4
 800958a:	6030      	str	r0, [r6, #0]
 800958c:	062e      	lsls	r6, r5, #24
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	d501      	bpl.n	8009596 <_printf_i+0x1be>
 8009592:	6019      	str	r1, [r3, #0]
 8009594:	e002      	b.n	800959c <_printf_i+0x1c4>
 8009596:	0668      	lsls	r0, r5, #25
 8009598:	d5fb      	bpl.n	8009592 <_printf_i+0x1ba>
 800959a:	8019      	strh	r1, [r3, #0]
 800959c:	2300      	movs	r3, #0
 800959e:	6123      	str	r3, [r4, #16]
 80095a0:	4616      	mov	r6, r2
 80095a2:	e7bc      	b.n	800951e <_printf_i+0x146>
 80095a4:	6833      	ldr	r3, [r6, #0]
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	6032      	str	r2, [r6, #0]
 80095aa:	681e      	ldr	r6, [r3, #0]
 80095ac:	6862      	ldr	r2, [r4, #4]
 80095ae:	2100      	movs	r1, #0
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7f6 fe45 	bl	8000240 <memchr>
 80095b6:	b108      	cbz	r0, 80095bc <_printf_i+0x1e4>
 80095b8:	1b80      	subs	r0, r0, r6
 80095ba:	6060      	str	r0, [r4, #4]
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	6123      	str	r3, [r4, #16]
 80095c0:	2300      	movs	r3, #0
 80095c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c6:	e7aa      	b.n	800951e <_printf_i+0x146>
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	4632      	mov	r2, r6
 80095cc:	4649      	mov	r1, r9
 80095ce:	4640      	mov	r0, r8
 80095d0:	47d0      	blx	sl
 80095d2:	3001      	adds	r0, #1
 80095d4:	d0ad      	beq.n	8009532 <_printf_i+0x15a>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	079b      	lsls	r3, r3, #30
 80095da:	d413      	bmi.n	8009604 <_printf_i+0x22c>
 80095dc:	68e0      	ldr	r0, [r4, #12]
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	4298      	cmp	r0, r3
 80095e2:	bfb8      	it	lt
 80095e4:	4618      	movlt	r0, r3
 80095e6:	e7a6      	b.n	8009536 <_printf_i+0x15e>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4632      	mov	r2, r6
 80095ec:	4649      	mov	r1, r9
 80095ee:	4640      	mov	r0, r8
 80095f0:	47d0      	blx	sl
 80095f2:	3001      	adds	r0, #1
 80095f4:	d09d      	beq.n	8009532 <_printf_i+0x15a>
 80095f6:	3501      	adds	r5, #1
 80095f8:	68e3      	ldr	r3, [r4, #12]
 80095fa:	9903      	ldr	r1, [sp, #12]
 80095fc:	1a5b      	subs	r3, r3, r1
 80095fe:	42ab      	cmp	r3, r5
 8009600:	dcf2      	bgt.n	80095e8 <_printf_i+0x210>
 8009602:	e7eb      	b.n	80095dc <_printf_i+0x204>
 8009604:	2500      	movs	r5, #0
 8009606:	f104 0619 	add.w	r6, r4, #25
 800960a:	e7f5      	b.n	80095f8 <_printf_i+0x220>
 800960c:	080097fd 	.word	0x080097fd
 8009610:	0800980e 	.word	0x0800980e

08009614 <memmove>:
 8009614:	4288      	cmp	r0, r1
 8009616:	b510      	push	{r4, lr}
 8009618:	eb01 0402 	add.w	r4, r1, r2
 800961c:	d902      	bls.n	8009624 <memmove+0x10>
 800961e:	4284      	cmp	r4, r0
 8009620:	4623      	mov	r3, r4
 8009622:	d807      	bhi.n	8009634 <memmove+0x20>
 8009624:	1e43      	subs	r3, r0, #1
 8009626:	42a1      	cmp	r1, r4
 8009628:	d008      	beq.n	800963c <memmove+0x28>
 800962a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009632:	e7f8      	b.n	8009626 <memmove+0x12>
 8009634:	4402      	add	r2, r0
 8009636:	4601      	mov	r1, r0
 8009638:	428a      	cmp	r2, r1
 800963a:	d100      	bne.n	800963e <memmove+0x2a>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009646:	e7f7      	b.n	8009638 <memmove+0x24>

08009648 <_sbrk_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	@ (8009664 <_sbrk_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f7 fdae 	bl	80011b4 <_sbrk>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_sbrk_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_sbrk_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20005344 	.word	0x20005344

08009668 <_realloc_r>:
 8009668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	4607      	mov	r7, r0
 800966e:	4614      	mov	r4, r2
 8009670:	460d      	mov	r5, r1
 8009672:	b921      	cbnz	r1, 800967e <_realloc_r+0x16>
 8009674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	4611      	mov	r1, r2
 800967a:	f7ff bc5b 	b.w	8008f34 <_malloc_r>
 800967e:	b92a      	cbnz	r2, 800968c <_realloc_r+0x24>
 8009680:	f7ff fbec 	bl	8008e5c <_free_r>
 8009684:	4625      	mov	r5, r4
 8009686:	4628      	mov	r0, r5
 8009688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800968c:	f000 f81a 	bl	80096c4 <_malloc_usable_size_r>
 8009690:	4284      	cmp	r4, r0
 8009692:	4606      	mov	r6, r0
 8009694:	d802      	bhi.n	800969c <_realloc_r+0x34>
 8009696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800969a:	d8f4      	bhi.n	8009686 <_realloc_r+0x1e>
 800969c:	4621      	mov	r1, r4
 800969e:	4638      	mov	r0, r7
 80096a0:	f7ff fc48 	bl	8008f34 <_malloc_r>
 80096a4:	4680      	mov	r8, r0
 80096a6:	b908      	cbnz	r0, 80096ac <_realloc_r+0x44>
 80096a8:	4645      	mov	r5, r8
 80096aa:	e7ec      	b.n	8009686 <_realloc_r+0x1e>
 80096ac:	42b4      	cmp	r4, r6
 80096ae:	4622      	mov	r2, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	bf28      	it	cs
 80096b4:	4632      	movcs	r2, r6
 80096b6:	f7ff fbc3 	bl	8008e40 <memcpy>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4638      	mov	r0, r7
 80096be:	f7ff fbcd 	bl	8008e5c <_free_r>
 80096c2:	e7f1      	b.n	80096a8 <_realloc_r+0x40>

080096c4 <_malloc_usable_size_r>:
 80096c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c8:	1f18      	subs	r0, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfbc      	itt	lt
 80096ce:	580b      	ldrlt	r3, [r1, r0]
 80096d0:	18c0      	addlt	r0, r0, r3
 80096d2:	4770      	bx	lr

080096d4 <_init>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	bf00      	nop
 80096d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096da:	bc08      	pop	{r3}
 80096dc:	469e      	mov	lr, r3
 80096de:	4770      	bx	lr

080096e0 <_fini>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr
