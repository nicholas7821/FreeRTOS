
atv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000872c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800892c  0800892c  0000992c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad8  08008ad8  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae0  08008ae0  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae0  08008ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008ae8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008b48  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008be8  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000516c  200001a0  08008c88  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000530c  08008c88  0000a30c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020fd5  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041b0  00000000  00000000  0002b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  0002f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001482  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004bcc  00000000  00000000  0003222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eea8  00000000  00000000  00036df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e165  00000000  00000000  00055c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163e03  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007514  00000000  00000000  00163e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0016b35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008914 	.word	0x08008914

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008914 	.word	0x08008914

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fde3 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f842 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f95e 	bl	80008e8 <MX_GPIO_Init>
  MX_ETH_Init();
 800062c:	f000 f8b0 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f8fc 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000634:	f000 f92a 	bl	800088c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0x64>)
 800063a:	f004 fb6d 	bl	8004d18 <osMutexNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <main+0x68>)
 8000642:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f004 fa1e 	bl	8004a84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <main+0x6c>)
 800064a:	2100      	movs	r1, #0
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0x70>)
 800064e:	f004 fa83 	bl	8004b58 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <main+0x74>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000658:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <main+0x78>)
 800065a:	2100      	movs	r1, #0
 800065c:	480e      	ldr	r0, [pc, #56]	@ (8000698 <main+0x7c>)
 800065e:	f004 fa7b 	bl	8004b58 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <main+0x80>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <main+0x84>)
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <main+0x88>)
 800066e:	f004 fa73 	bl	8004b58 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <main+0x8c>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000678:	f004 fa38 	bl	8004aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x60>
 8000680:	08008a7c 	.word	0x08008a7c
 8000684:	20000818 	.word	0x20000818
 8000688:	08008a10 	.word	0x08008a10
 800068c:	08000a2d 	.word	0x08000a2d
 8000690:	2000080c 	.word	0x2000080c
 8000694:	08008a34 	.word	0x08008a34
 8000698:	08000ac5 	.word	0x08000ac5
 800069c:	20000810 	.word	0x20000810
 80006a0:	08008a58 	.word	0x08008a58
 80006a4:	08000b61 	.word	0x08000b61
 80006a8:	20000814 	.word	0x20000814

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	@ 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 fcac 	bl	8008018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d0:	f001 fd26 	bl	8002120 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemClock_Config+0xdc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000788 <SystemClock_Config+0xdc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <SystemClock_Config+0xdc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <SystemClock_Config+0xe0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a25      	ldr	r2, [pc, #148]	@ (800078c <SystemClock_Config+0xe0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	@ (800078c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800070c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000720:	2360      	movs	r3, #96	@ 0x60
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fd53 	bl	80021e0 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 fa8c 	bl	8000c5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f001 fcfc 	bl	8002140 <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 fa85 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2103      	movs	r1, #3
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ffe4 	bl	800273c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800077a:	f000 fa6f 	bl	8000c5c <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_ETH_Init+0x84>)
 8000796:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <MX_ETH_Init+0x88>)
 8000798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_ETH_Init+0x8c>)
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_ETH_Init+0x8c>)
 80007a8:	22e1      	movs	r2, #225	@ 0xe1
 80007aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_ETH_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_ETH_Init+0x84>)
 80007c0:	4a16      	ldr	r2, [pc, #88]	@ (800081c <MX_ETH_Init+0x8c>)
 80007c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_ETH_Init+0x84>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_ETH_Init+0x84>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <MX_ETH_Init+0x90>)
 80007d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_ETH_Init+0x84>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <MX_ETH_Init+0x94>)
 80007d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_ETH_Init+0x84>)
 80007da:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <MX_ETH_Init+0x84>)
 80007e2:	f000 fe35 	bl	8001450 <HAL_ETH_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 fa36 	bl	8000c5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f0:	2238      	movs	r2, #56	@ 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_ETH_Init+0x98>)
 80007f6:	f007 fc0f 	bl	8008018 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_ETH_Init+0x98>)
 80007fc:	2221      	movs	r2, #33	@ 0x21
 80007fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_ETH_Init+0x98>)
 8000802:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_ETH_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001f4 	.word	0x200001f4
 8000818:	40028000 	.word	0x40028000
 800081c:	20000820 	.word	0x20000820
 8000820:	20000100 	.word	0x20000100
 8000824:	20000060 	.word	0x20000060
 8000828:	200001bc 	.word	0x200001bc

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_USART3_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART3_UART_Init+0x58>)
 8000870:	f003 f8b2 	bl	80039d8 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f9ef 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200002a4 	.word	0x200002a4
 8000888:	40004800 	.word	0x40004800

0800088c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2206      	movs	r2, #6
 800089c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	f001 faeb 	bl	8001eaa <HAL_PCD_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f9bf 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000032c 	.word	0x2000032c

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a46      	ldr	r2, [pc, #280]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b44      	ldr	r3, [pc, #272]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a40      	ldr	r2, [pc, #256]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a3a      	ldr	r2, [pc, #232]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a34      	ldr	r2, [pc, #208]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a2e      	ldr	r2, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <MX_GPIO_Init+0x134>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000994:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0x138>)
 8000996:	f001 fa55 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	4821      	ldr	r0, [pc, #132]	@ (8000a24 <MX_GPIO_Init+0x13c>)
 80009a0:	f001 fa50 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	481b      	ldr	r0, [pc, #108]	@ (8000a28 <MX_GPIO_Init+0x140>)
 80009bc:	f001 f896 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <MX_GPIO_Init+0x138>)
 80009da:	f001 f887 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009de:	2340      	movs	r3, #64	@ 0x40
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <MX_GPIO_Init+0x13c>)
 80009f6:	f001 f879 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_GPIO_Init+0x13c>)
 8000a0e:	f001 f86d 	bl	8001aec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800

08000a2c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b08c      	sub	sp, #48	@ 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	(void) argument;
  /* Infinite loop */
  for(;;)
  {
	  if (osMutexAcquire( myMutex01Handle, osWaitForever) == osOK) {
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <StartTask01+0x84>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fa05 	bl	8004e4c <osMutexAcquire>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d12e      	bne.n	8000aa6 <StartTask01+0x7a>
	             // Tornar-se dono do mutex
	             donoMutex = osThreadGetId();
 8000a48:	f004 f92c 	bl	8004ca4 <osThreadGetId>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <StartTask01+0x88>)
 8000a50:	6013      	str	r3, [r2, #0]
	             // Enviar mensagem via UART
	             char msg1[] = "Tarefa 1: recurso em uso e liberado.\r\n";
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <StartTask01+0x8c>)
 8000a54:	f107 0408 	add.w	r4, r7, #8
 8000a58:	461d      	mov	r5, r3
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a66:	6020      	str	r0, [r4, #0]
 8000a68:	3404      	adds	r4, #4
 8000a6a:	8021      	strh	r1, [r4, #0]
 8000a6c:	3402      	adds	r4, #2
 8000a6e:	0c0b      	lsrs	r3, r1, #16
 8000a70:	7023      	strb	r3, [r4, #0]
	             HAL_UART_Transmit(&huart3, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbe2 	bl	8000240 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f107 0108 	add.w	r1, r7, #8
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <StartTask01+0x90>)
 8000a8a:	f002 fff3 	bl	8003a74 <HAL_UART_Transmit>
	             // Indicar visualmente via LED1
	             HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <StartTask01+0x94>)
 8000a92:	f001 f9f0 	bl	8001e76 <HAL_GPIO_TogglePin>
	             // Liberar o mutex e limpar dono
	             osMutexRelease( myMutex01Handle);
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <StartTask01+0x84>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fa34 	bl	8004f08 <osMutexRelease>
	             donoMutex = NULL;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <StartTask01+0x88>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
	         }
	         osDelay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aaa:	f004 f907 	bl	8004cbc <osDelay>
	  if (osMutexAcquire( myMutex01Handle, osWaitForever) == osOK) {
 8000aae:	e7c1      	b.n	8000a34 <StartTask01+0x8>
 8000ab0:	20000818 	.word	0x20000818
 8000ab4:	2000081c 	.word	0x2000081c
 8000ab8:	08008950 	.word	0x08008950
 8000abc:	200002a4 	.word	0x200002a4
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	(void) argument;
  /* Infinite loop */
  for(;;)
  {
	  if (osMutexAcquire(myMutex01Handle, osWaitForever) == osOK) {
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <StartTask02+0x88>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f9b9 	bl	8004e4c <osMutexAcquire>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12f      	bne.n	8000b40 <StartTask02+0x7c>
	              donoMutex = osThreadGetId();
 8000ae0:	f004 f8e0 	bl	8004ca4 <osThreadGetId>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <StartTask02+0x8c>)
 8000ae8:	6013      	str	r3, [r2, #0]
	              // Executa 3 ciclos de uso do recurso (ex.: 3 transmissões UART com LED2)
	              for (int i = 0; i < 3; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000aee:	e01c      	b.n	8000b2a <StartTask02+0x66>
	                  char buffer[64];
	                  int len = snprintf(buffer, sizeof(buffer), "Tarefa 2: ciclo %d no recurso.\r\n", i+1);
 8000af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000af2:	3301      	adds	r3, #1
 8000af4:	f107 0008 	add.w	r0, r7, #8
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <StartTask02+0x90>)
 8000afa:	2140      	movs	r1, #64	@ 0x40
 8000afc:	f007 fa56 	bl	8007fac <sniprintf>
 8000b00:	64b8      	str	r0, [r7, #72]	@ 0x48
	                  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f107 0108 	add.w	r1, r7, #8
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <StartTask02+0x94>)
 8000b10:	f002 ffb0 	bl	8003a74 <HAL_UART_Transmit>
	                  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <StartTask02+0x98>)
 8000b18:	f001 f9ad 	bl	8001e76 <HAL_GPIO_TogglePin>
	                  osDelay(1000);
 8000b1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b20:	f004 f8cc 	bl	8004cbc <osDelay>
	              for (int i = 0; i < 3; i++) {
 8000b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b26:	3301      	adds	r3, #1
 8000b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	dddf      	ble.n	8000af0 <StartTask02+0x2c>
	              }
	              // Depois de 3 ciclos, libera o mutex
	              osMutexRelease(myMutex01Handle);
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <StartTask02+0x88>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f9e7 	bl	8004f08 <osMutexRelease>
	              donoMutex = NULL;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <StartTask02+0x8c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	          }
	          osDelay(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b44:	f004 f8ba 	bl	8004cbc <osDelay>
	  if (osMutexAcquire(myMutex01Handle, osWaitForever) == osOK) {
 8000b48:	e7c0      	b.n	8000acc <StartTask02+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	20000818 	.word	0x20000818
 8000b50:	2000081c 	.word	0x2000081c
 8000b54:	08008978 	.word	0x08008978
 8000b58:	200002a4 	.word	0x200002a4
 8000b5c:	40020400 	.word	0x40020400

08000b60 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b090      	sub	sp, #64	@ 0x40
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	(void) argument;
  /* Infinite loop */
  for(;;)
  {
	  // Tenta adquirir o mutex com timeout de 2000 ticks (~2 segundos)
	         osStatus_t status = osMutexAcquire(myMutex01Handle, 2000);
 8000b68:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <StartTask03+0xc0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 f96b 	bl	8004e4c <osMutexAcquire>
 8000b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	         if (status == osOK) {
 8000b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12c      	bne.n	8000bd8 <StartTask03+0x78>
	             // Adquiriu o mutex dentro do tempo
	             donoMutex = osThreadGetId();
 8000b7e:	f004 f891 	bl	8004ca4 <osThreadGetId>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a27      	ldr	r2, [pc, #156]	@ (8000c24 <StartTask03+0xc4>)
 8000b86:	6013      	str	r3, [r2, #0]
	             char msg3[] = "Tarefa 3: recurso obtido normalmente.\r\n";
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <StartTask03+0xc8>)
 8000b8a:	f107 0408 	add.w	r4, r7, #8
 8000b8e:	461d      	mov	r5, r3
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b9c:	e884 0003 	stmia.w	r4, {r0, r1}
	             HAL_UART_Transmit(&huart3, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fb4b 	bl	8000240 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f107 0108 	add.w	r1, r7, #8
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	481d      	ldr	r0, [pc, #116]	@ (8000c2c <StartTask03+0xcc>)
 8000bb8:	f002 ff5c 	bl	8003a74 <HAL_UART_Transmit>
	             // Desliga LED de aviso caso estivesse aceso
	             HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000bbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc0:	481b      	ldr	r0, [pc, #108]	@ (8000c30 <StartTask03+0xd0>)
 8000bc2:	f001 f958 	bl	8001e76 <HAL_GPIO_TogglePin>
	             osMutexRelease(myMutex01Handle);
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <StartTask03+0xc0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f99c 	bl	8004f08 <osMutexRelease>
	             donoMutex = NULL;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <StartTask03+0xc4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e01e      	b.n	8000c16 <StartTask03+0xb6>
	         } else {
	             // Timeout: tarefa ficou bloqueada por tempo excessivo
	             char alert[] = "Tarefa 3: esperando mutex por tempo excessivo.\r\n";
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <StartTask03+0xd4>)
 8000bda:	f107 0408 	add.w	r4, r7, #8
 8000bde:	461d      	mov	r5, r3
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	7023      	strb	r3, [r4, #0]
	             HAL_UART_Transmit(&huart3, (uint8_t*)alert, strlen(alert), HAL_MAX_DELAY);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fb23 	bl	8000240 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f107 0108 	add.w	r1, r7, #8
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <StartTask03+0xcc>)
 8000c08:	f002 ff34 	bl	8003a74 <HAL_UART_Transmit>
	             // Acende LED3 para sinalizar contenção prolongada
	             HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000c0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c10:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <StartTask03+0xd0>)
 8000c12:	f001 f930 	bl	8001e76 <HAL_GPIO_TogglePin>
	         }
	         osDelay(1000);
 8000c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1a:	f004 f84f 	bl	8004cbc <osDelay>
  {
 8000c1e:	e7a3      	b.n	8000b68 <StartTask03+0x8>
 8000c20:	20000818 	.word	0x20000818
 8000c24:	2000081c 	.word	0x2000081c
 8000c28:	0800899c 	.word	0x0800899c
 8000c2c:	200002a4 	.word	0x200002a4
 8000c30:	40020400 	.word	0x40020400
 8000c34:	080089c4 	.word	0x080089c4

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c4a:	f000 fadb 	bl	8001204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	f06f 0001 	mvn.w	r0, #1
 8000ca6:	f000 fba9 	bl	80013fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8000e10 <HAL_ETH_MspInit+0x158>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8096 	bne.w	8000e08 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a46      	ldr	r2, [pc, #280]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d00:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	4a40      	ldr	r2, [pc, #256]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d18:	4b3e      	ldr	r3, [pc, #248]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b3b      	ldr	r3, [pc, #236]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a3a      	ldr	r2, [pc, #232]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b35      	ldr	r3, [pc, #212]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a34      	ldr	r2, [pc, #208]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a2e      	ldr	r2, [pc, #184]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d84:	2332      	movs	r3, #50	@ 0x32
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <HAL_ETH_MspInit+0x160>)
 8000da0:	f000 fea4 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da4:	2386      	movs	r3, #134	@ 0x86
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db4:	230b      	movs	r3, #11
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4817      	ldr	r0, [pc, #92]	@ (8000e1c <HAL_ETH_MspInit+0x164>)
 8000dc0:	f000 fe94 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <HAL_ETH_MspInit+0x168>)
 8000de2:	f000 fe83 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000de6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <HAL_ETH_MspInit+0x16c>)
 8000e04:	f000 fe72 	bl	8001aec <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	3738      	adds	r7, #56	@ 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40028000 	.word	0x40028000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800

08000e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2290      	movs	r2, #144	@ 0x90
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f007 f8e5 	bl	8008018 <memset>
  if(huart->Instance==USART3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a22      	ldr	r2, [pc, #136]	@ (8000edc <HAL_UART_MspInit+0xb4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d13c      	bne.n	8000ed2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fec0 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff fef3 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a13      	ldr	r2, [pc, #76]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ea6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_UART_MspInit+0xbc>)
 8000ece:	f000 fe0d 	bl	8001aec <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37b8      	adds	r7, #184	@ 0xb8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ae      	sub	sp, #184	@ 0xb8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2290      	movs	r2, #144	@ 0x90
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 f885 	bl	8008018 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f16:	d159      	bne.n	8000fcc <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fe5f 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f34:	f7ff fe92 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f50:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4818      	ldr	r0, [pc, #96]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f78:	f000 fdb8 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f98:	f000 fda8 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fcc:	bf00      	nop
 8000fce:	37b8      	adds	r7, #184	@ 0xb8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fec:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <HAL_InitTick+0xcc>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80010a8 <HAL_InitTick+0xcc>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_InitTick+0xcc>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001004:	f107 020c 	add.w	r2, r7, #12
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fdba 	bl	8002b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001014:	f001 fda4 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8001018:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800101a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800101c:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <HAL_InitTick+0xd0>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9b      	lsrs	r3, r3, #18
 8001024:	3b01      	subs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <HAL_InitTick+0xd4>)
 800102a:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_InitTick+0xd8>)
 800102c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <HAL_InitTick+0xd4>)
 8001030:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_InitTick+0xd4>)
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <HAL_InitTick+0xd4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_InitTick+0xd4>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_InitTick+0xd4>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800104e:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <HAL_InitTick+0xd4>)
 8001050:	f002 f9f4 	bl	800343c <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800105a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d11b      	bne.n	800109a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001062:	4813      	ldr	r0, [pc, #76]	@ (80010b0 <HAL_InitTick+0xd4>)
 8001064:	f002 fa4c 	bl	8003500 <HAL_TIM_Base_Start_IT>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800106e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001072:	2b00      	cmp	r3, #0
 8001074:	d111      	bne.n	800109a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001076:	2019      	movs	r0, #25
 8001078:	f000 f9dc 	bl	8001434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d808      	bhi.n	8001094 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001082:	2200      	movs	r2, #0
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	2019      	movs	r0, #25
 8001088:	f000 f9b8 	bl	80013fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_InitTick+0xdc>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e002      	b.n	800109a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800109a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3730      	adds	r7, #48	@ 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	20000828 	.word	0x20000828
 80010b4:	40010000 	.word	0x40010000
 80010b8:	20000004 	.word	0x20000004

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010fa:	f002 fa79 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000828 	.word	0x20000828

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f006 ff76 	bl	8008028 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20080000 	.word	0x20080000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000874 	.word	0x20000874
 8001170:	20005310 	.word	0x20005310

08001174 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f006 ff35 	bl	8008034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff fa27 	bl	800061c <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011dc:	08008ae8 	.word	0x08008ae8
  ldr r2, =_sbss
 80011e0:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80011e4:	2000530c 	.word	0x2000530c

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>

080011ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f8f9 	bl	80013e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f4:	200f      	movs	r0, #15
 80011f6:	f7ff fef1 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fa:	f7ff fd35 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000878 	.word	0x20000878

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000878 	.word	0x20000878

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	05fa0000 	.word	0x05fa0000

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff4c 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140e:	f7ff ff61 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	6978      	ldr	r0, [r7, #20]
 800141a:	f7ff ffb1 	bl	8001380 <NVIC_EncodePriority>
 800141e:	4602      	mov	r2, r0
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff80 	bl	800132c <__NVIC_SetPriority>
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff54 	bl	80012f0 <__NVIC_EnableIRQ>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e086      	b.n	8001570 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fc1f 	bl	8000cb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <HAL_ETH_Init+0x128>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a3e      	ldr	r2, [pc, #248]	@ (8001578 <HAL_ETH_Init+0x128>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b3c      	ldr	r3, [pc, #240]	@ (8001578 <HAL_ETH_Init+0x128>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <HAL_ETH_Init+0x12c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a39      	ldr	r2, [pc, #228]	@ (800157c <HAL_ETH_Init+0x12c>)
 8001498:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800149c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800149e:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_ETH_Init+0x12c>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4935      	ldr	r1, [pc, #212]	@ (800157c <HAL_ETH_Init+0x12c>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_ETH_Init+0x12c>)
 80014ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff feb0 	bl	800122c <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ce:	e011      	b.n	80014f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014d0:	f7ff feac 	bl	800122c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014de:	d909      	bls.n	80014f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	22e0      	movs	r2, #224	@ 0xe0
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e03d      	b.n	8001570 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f97a 	bl	8001800 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fa25 	bl	800195c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fa7b 	bl	8001a0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f9e3 	bl	80018ec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_ETH_Init+0x130>)
 8001544:	430b      	orrs	r3, r1
 8001546:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800155a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2210      	movs	r2, #16
 800156a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	00020060 	.word	0x00020060

08001584 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <ETH_SetMACConfig+0x164>)
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7b9b      	ldrb	r3, [r3, #14]
 80015a2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	7c12      	ldrb	r2, [r2, #16]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d102      	bne.n	80015b2 <ETH_SetMACConfig+0x2e>
 80015ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x30>
 80015b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	7c52      	ldrb	r2, [r2, #17]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d102      	bne.n	80015c4 <ETH_SetMACConfig+0x40>
 80015be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015c2:	e000      	b.n	80015c6 <ETH_SetMACConfig+0x42>
 80015c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	7fdb      	ldrb	r3, [r3, #31]
 80015d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	7f92      	ldrb	r2, [r2, #30]
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d102      	bne.n	80015ea <ETH_SetMACConfig+0x66>
 80015e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e8:	e000      	b.n	80015ec <ETH_SetMACConfig+0x68>
 80015ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80015ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	7f1b      	ldrb	r3, [r3, #28]
 80015f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	f892 2020 	ldrb.w	r2, [r2, #32]
 800160a:	2a00      	cmp	r2, #0
 800160c:	d102      	bne.n	8001614 <ETH_SetMACConfig+0x90>
 800160e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001612:	e000      	b.n	8001616 <ETH_SetMACConfig+0x92>
 8001614:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001616:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7bdb      	ldrb	r3, [r3, #15]
 800161c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800161e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001624:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800162c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800162e:	4313      	orrs	r3, r2
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fdfc 	bl	8001244 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001672:	2a00      	cmp	r2, #0
 8001674:	d101      	bne.n	800167a <ETH_SetMACConfig+0xf6>
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	e000      	b.n	800167c <ETH_SetMACConfig+0xf8>
 800167a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800167c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800168a:	2a01      	cmp	r2, #1
 800168c:	d101      	bne.n	8001692 <ETH_SetMACConfig+0x10e>
 800168e:	2208      	movs	r2, #8
 8001690:	e000      	b.n	8001694 <ETH_SetMACConfig+0x110>
 8001692:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001694:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800169c:	2a01      	cmp	r2, #1
 800169e:	d101      	bne.n	80016a4 <ETH_SetMACConfig+0x120>
 80016a0:	2204      	movs	r2, #4
 80016a2:	e000      	b.n	80016a6 <ETH_SetMACConfig+0x122>
 80016a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80016ae:	2a01      	cmp	r2, #1
 80016b0:	d101      	bne.n	80016b6 <ETH_SetMACConfig+0x132>
 80016b2:	2202      	movs	r2, #2
 80016b4:	e000      	b.n	80016b8 <ETH_SetMACConfig+0x134>
 80016b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fdb7 	bl	8001244 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	fd20810f 	.word	0xfd20810f

080016ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <ETH_SetDMAConfig+0x110>)
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7b1b      	ldrb	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <ETH_SetDMAConfig+0x2c>
 8001712:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001716:	e000      	b.n	800171a <ETH_SetDMAConfig+0x2e>
 8001718:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	7b5b      	ldrb	r3, [r3, #13]
 800171e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001720:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	7f52      	ldrb	r2, [r2, #29]
 8001726:	2a00      	cmp	r2, #0
 8001728:	d102      	bne.n	8001730 <ETH_SetDMAConfig+0x44>
 800172a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800172e:	e000      	b.n	8001732 <ETH_SetDMAConfig+0x46>
 8001730:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001732:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7b9b      	ldrb	r3, [r3, #14]
 8001738:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800173a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001740:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	7f1b      	ldrb	r3, [r3, #28]
 8001746:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001748:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	7f9b      	ldrb	r3, [r3, #30]
 800174e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001750:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001756:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800175e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001760:	4313      	orrs	r3, r2
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fd5e 	bl	8001244 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	461a      	mov	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fd2f 	bl	8001244 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f8de3f23 	.word	0xf8de3f23

08001800 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0a6      	sub	sp, #152	@ 0x98
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001842:	2300      	movs	r3, #0
 8001844:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800184c:	2300      	movs	r3, #0
 800184e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001868:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800186e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800187a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fe7f 	bl	8001584 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800188a:	2301      	movs	r3, #1
 800188c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018c0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff05 	bl	80016ec <ETH_SetDMAConfig>
}
 80018e2:	bf00      	nop
 80018e4:	3798      	adds	r7, #152	@ 0x98
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3305      	adds	r3, #5
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	3204      	adds	r2, #4
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <ETH_MACAddressConfig+0x68>)
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3303      	adds	r3, #3
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	061a      	lsls	r2, r3, #24
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3302      	adds	r3, #2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4313      	orrs	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <ETH_MACAddressConfig+0x6c>)
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40028040 	.word	0x40028040
 8001958:	40028044 	.word	0x40028044

0800195c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e03e      	b.n	80019e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68d9      	ldr	r1, [r3, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	3206      	adds	r2, #6
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d80c      	bhi.n	80019cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68d9      	ldr	r1, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	461a      	mov	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	e004      	b.n	80019d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	461a      	mov	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d9bd      	bls.n	800196a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a00:	611a      	str	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e048      	b.n	8001aae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6919      	ldr	r1, [r3, #16]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a58:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	3212      	adds	r2, #18
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d80c      	bhi.n	8001a9e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6919      	ldr	r1, [r3, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	461a      	mov	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	e004      	b.n	8001aa8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d9b3      	bls.n	8001a1c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	60da      	str	r2, [r3, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e175      	b.n	8001df8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8164 	bne.w	8001df2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x56>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80be 	beq.w	8001df2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b63      	ldr	r3, [pc, #396]	@ (8001e10 <HAL_GPIO_Init+0x324>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c8e:	4a61      	ldr	r2, [pc, #388]	@ (8001e14 <HAL_GPIO_Init+0x328>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a58      	ldr	r2, [pc, #352]	@ (8001e18 <HAL_GPIO_Init+0x32c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d037      	beq.n	8001d2a <HAL_GPIO_Init+0x23e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a57      	ldr	r2, [pc, #348]	@ (8001e1c <HAL_GPIO_Init+0x330>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_GPIO_Init+0x23a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <HAL_GPIO_Init+0x334>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x236>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a55      	ldr	r2, [pc, #340]	@ (8001e24 <HAL_GPIO_Init+0x338>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x232>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_GPIO_Init+0x33c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x22e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a53      	ldr	r2, [pc, #332]	@ (8001e2c <HAL_GPIO_Init+0x340>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x22a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_GPIO_Init+0x344>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a51      	ldr	r2, [pc, #324]	@ (8001e34 <HAL_GPIO_Init+0x348>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	@ (8001e38 <HAL_GPIO_Init+0x34c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001e3c <HAL_GPIO_Init+0x350>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001d02:	2309      	movs	r3, #9
 8001d04:	e012      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d06:	230a      	movs	r3, #10
 8001d08:	e010      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e00e      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	@ (8001e14 <HAL_GPIO_Init+0x328>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a34      	ldr	r2, [pc, #208]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <HAL_GPIO_Init+0x354>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae86 	bls.w	8001b0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40022400 	.word	0x40022400
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af02      	add	r7, sp, #8
 8001eb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e108      	b.n	80020ce <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f806 	bl	8000ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eea:	d102      	bne.n	8001ef2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fb20 	bl	800453c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7c1a      	ldrb	r2, [r3, #16]
 8001f04:	f88d 2000 	strb.w	r2, [sp]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	f002 fabc 	bl	8004488 <USB_CoreInit>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0d5      	b.n	80020ce <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fb18 	bl	800455e <USB_SetCurrentMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0c6      	b.n	80020ce <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e04a      	b.n	8001fdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3315      	adds	r3, #21
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3314      	adds	r3, #20
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	b298      	uxth	r0, r3
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	332e      	adds	r3, #46	@ 0x2e
 8001f82:	4602      	mov	r2, r0
 8001f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3318      	adds	r3, #24
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	331c      	adds	r3, #28
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3320      	adds	r3, #32
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3324      	adds	r3, #36	@ 0x24
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	791b      	ldrb	r3, [r3, #4]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3af      	bcc.n	8001f46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e044      	b.n	8002076 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	3301      	adds	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3b5      	bcc.n	8001fec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7c1a      	ldrb	r2, [r3, #16]
 8002088:	f88d 2000 	strb.w	r2, [sp]
 800208c:	3304      	adds	r3, #4
 800208e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002090:	f002 fab2 	bl	80045f8 <USB_DevInit>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e013      	b.n	80020ce <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7b1b      	ldrb	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f80b 	bl	80020d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fc6d 	bl	80049a6 <USB_DevDisconnect>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_PCDEx_ActivateLPM+0x44>)
 8002108:	4313      	orrs	r3, r2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	10000003 	.word	0x10000003

08002120 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216e:	f7ff f85d 	bl	800122c <HAL_GetTick>
 8002172:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002174:	e009      	b.n	800218a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002176:	f7ff f859 	bl	800122c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002184:	d901      	bls.n	800218a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e022      	b.n	80021d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002196:	d1ee      	bne.n	8002176 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800219e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a4:	f7ff f842 	bl	800122c <HAL_GetTick>
 80021a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021aa:	e009      	b.n	80021c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ac:	f7ff f83e 	bl	800122c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ba:	d901      	bls.n	80021c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e007      	b.n	80021d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021cc:	d1ee      	bne.n	80021ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e29b      	b.n	800272e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002204:	4b96      	ldr	r3, [pc, #600]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00c      	beq.n	800222a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002210:	4b93      	ldr	r3, [pc, #588]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x62>
 800221c:	4b90      	ldr	r3, [pc, #576]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d06c      	beq.n	8002310 <HAL_RCC_OscConfig+0x130>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d168      	bne.n	8002310 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e275      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x7a>
 800224c:	4b84      	ldr	r3, [pc, #528]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a83      	ldr	r2, [pc, #524]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x9c>
 8002262:	4b7f      	ldr	r3, [pc, #508]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b7c      	ldr	r3, [pc, #496]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7b      	ldr	r2, [pc, #492]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 8002286:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a72      	ldr	r2, [pc, #456]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xd8>
 80022a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe ffb4 	bl	800122c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe ffb0 	bl	800122c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	@ 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e229      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ffa0 	bl	800122c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe ff9c 	bl	800122c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e215      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b57      	ldr	r3, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x110>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d069      	beq.n	80023f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231e:	4b50      	ldr	r3, [pc, #320]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b4d      	ldr	r3, [pc, #308]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x190>
 8002336:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x17a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1e9      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	493d      	ldr	r1, [pc, #244]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e040      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a38      	ldr	r2, [pc, #224]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ff52 	bl	800122c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7fe ff4e 	bl	800122c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1c7      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4929      	ldr	r1, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c0:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff2e 	bl	800122c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe ff2a 	bl	800122c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1a3      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d038      	beq.n	8002470 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240a:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe ff0b 	bl	800122c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe ff07 	bl	800122c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e180      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x23a>
 8002438:	e01a      	b.n	8002470 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	4a08      	ldr	r2, [pc, #32]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fef1 	bl	800122c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe feed 	bl	800122c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d903      	bls.n	8002464 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e166      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
 8002460:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b92      	ldr	r3, [pc, #584]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a4 	beq.w	80025c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b8c      	ldr	r3, [pc, #560]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	4a88      	ldr	r2, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	@ 0x40
 8002496:	4b86      	ldr	r3, [pc, #536]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b83      	ldr	r3, [pc, #524]	@ (80026b4 <HAL_RCC_OscConfig+0x4d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024b2:	4b80      	ldr	r3, [pc, #512]	@ (80026b4 <HAL_RCC_OscConfig+0x4d4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7f      	ldr	r2, [pc, #508]	@ (80026b4 <HAL_RCC_OscConfig+0x4d4>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe feb5 	bl	800122c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe feb1 	bl	800122c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	@ 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e12a      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d8:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <HAL_RCC_OscConfig+0x4d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x31a>
 80024ec:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	4a6f      	ldr	r2, [pc, #444]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f8:	e02d      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x33c>
 8002502:	4b6b      	ldr	r3, [pc, #428]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	4a6a      	ldr	r2, [pc, #424]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	@ 0x70
 800250e:	4b68      	ldr	r3, [pc, #416]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	4a67      	ldr	r2, [pc, #412]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	@ 0x70
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x35e>
 8002524:	4b62      	ldr	r3, [pc, #392]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	4a61      	ldr	r2, [pc, #388]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002530:	4b5f      	ldr	r3, [pc, #380]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a5e      	ldr	r2, [pc, #376]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
 800253e:	4b5c      	ldr	r3, [pc, #368]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002542:	4a5b      	ldr	r2, [pc, #364]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	@ 0x70
 800254a:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a58      	ldr	r2, [pc, #352]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe fe65 	bl	800122c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fe61 	bl	800122c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0d8      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b4c      	ldr	r3, [pc, #304]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x386>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fe4f 	bl	800122c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fe4b 	bl	800122c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0c2      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	4a3c      	ldr	r2, [pc, #240]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80ae 	beq.w	800272c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d06d      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d14b      	bne.n	800267c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a31      	ldr	r2, [pc, #196]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe1c 	bl	800122c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fe18 	bl	800122c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e091      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	491b      	ldr	r1, [pc, #108]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a18      	ldr	r2, [pc, #96]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fdea 	bl	800122c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fde6 	bl	800122c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e05f      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x47c>
 800267a:	e057      	b.n	800272c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fdd0 	bl	800122c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fdcc 	bl	800122c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e045      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x4b0>
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x54c>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <HAL_RCC_OscConfig+0x558>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d030      	beq.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d129      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d122      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d119      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d10f      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0d0      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b67      	ldr	r3, [pc, #412]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 020f 	bic.w	r2, r3, #15
 800276a:	4965      	ldr	r1, [pc, #404]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d040      	beq.n	8002860 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d115      	bne.n	800281e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e073      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4936      	ldr	r1, [pc, #216]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002830:	f7fe fcfc 	bl	800122c <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fcf8 	bl	800122c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e053      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b2d      	ldr	r3, [pc, #180]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d210      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	4922      	ldr	r1, [pc, #136]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1d0>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1d4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb74 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	08008a8c 	.word	0x08008a8c
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b094      	sub	sp, #80	@ 0x50
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002920:	2300      	movs	r3, #0
 8002922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002924:	2300      	movs	r3, #0
 8002926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292c:	4b79      	ldr	r3, [pc, #484]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x40>
 8002938:	2b08      	cmp	r3, #8
 800293a:	f200 80e1 	bhi.w	8002b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3a>
 8002946:	e0db      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800294a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800294c:	e0db      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002952:	e0d8      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002954:	4b6f      	ldr	r3, [pc, #444]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800295c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800295e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002974:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297c:	633b      	str	r3, [r7, #48]	@ 0x30
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
 8002982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002986:	4622      	mov	r2, r4
 8002988:	462b      	mov	r3, r5
 800298a:	f04f 0000 	mov.w	r0, #0
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	0159      	lsls	r1, r3, #5
 8002994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002998:	0150      	lsls	r0, r2, #5
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4621      	mov	r1, r4
 80029a0:	1a51      	subs	r1, r2, r1
 80029a2:	6139      	str	r1, [r7, #16]
 80029a4:	4629      	mov	r1, r5
 80029a6:	eb63 0301 	sbc.w	r3, r3, r1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029b8:	4659      	mov	r1, fp
 80029ba:	018b      	lsls	r3, r1, #6
 80029bc:	4651      	mov	r1, sl
 80029be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c2:	4651      	mov	r1, sl
 80029c4:	018a      	lsls	r2, r1, #6
 80029c6:	4651      	mov	r1, sl
 80029c8:	ebb2 0801 	subs.w	r8, r2, r1
 80029cc:	4659      	mov	r1, fp
 80029ce:	eb63 0901 	sbc.w	r9, r3, r1
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e6:	4690      	mov	r8, r2
 80029e8:	4699      	mov	r9, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	eb18 0303 	adds.w	r3, r8, r3
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	462b      	mov	r3, r5
 80029f4:	eb49 0303 	adc.w	r3, r9, r3
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a06:	4629      	mov	r1, r5
 8002a08:	024b      	lsls	r3, r1, #9
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a10:	4621      	mov	r1, r4
 8002a12:	024a      	lsls	r2, r1, #9
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a24:	f7fd fc64 	bl	80002f0 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a30:	e058      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	f04f 0000 	mov.w	r0, #0
 8002a54:	f04f 0100 	mov.w	r1, #0
 8002a58:	0159      	lsls	r1, r3, #5
 8002a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5e:	0150      	lsls	r0, r2, #5
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4641      	mov	r1, r8
 8002a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a84:	ebb2 040a 	subs.w	r4, r2, sl
 8002a88:	eb63 050b 	sbc.w	r5, r3, fp
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	00eb      	lsls	r3, r5, #3
 8002a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9a:	00e2      	lsls	r2, r4, #3
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	4643      	mov	r3, r8
 8002aa2:	18e3      	adds	r3, r4, r3
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	eb45 0303 	adc.w	r3, r5, r3
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aba:	4629      	mov	r1, r5
 8002abc:	028b      	lsls	r3, r1, #10
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	028a      	lsls	r2, r1, #10
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	61fa      	str	r2, [r7, #28]
 8002ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad8:	f7fd fc0a 	bl	80002f0 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002afe:	e002      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3750      	adds	r7, #80	@ 0x50
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400
 8002b1c:	007a1200 	.word	0x007a1200

08002b20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000000 	.word	0x20000000

08002b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b3c:	f7ff fff0 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0a9b      	lsrs	r3, r3, #10
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	08008a9c 	.word	0x08008a9c

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b64:	f7ff ffdc 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0b5b      	lsrs	r3, r3, #13
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08008a9c 	.word	0x08008a9c

08002b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	220f      	movs	r2, #15
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bbc:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <HAL_RCC_GetClockConfig+0x60>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c14:	4b69      	ldr	r3, [pc, #420]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a68      	ldr	r2, [pc, #416]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c28:	4964      	ldr	r1, [pc, #400]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c46:	4b5d      	ldr	r3, [pc, #372]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	4959      	ldr	r1, [pc, #356]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c82:	4b4e      	ldr	r3, [pc, #312]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	494a      	ldr	r1, [pc, #296]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 808b 	beq.w	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	4a39      	ldr	r2, [pc, #228]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cdc:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fa9a 	bl	800122c <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe fa96 	bl	800122c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e38f      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1a:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d035      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d02e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d38:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d42:	4b1e      	ldr	r3, [pc, #120]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a1a      	ldr	r2, [pc, #104]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d5a:	4a18      	ldr	r2, [pc, #96]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d60:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d114      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fa5e 	bl	800122c <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe fa5a 	bl	800122c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e351      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ee      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002da2:	d111      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	4901      	ldr	r1, [pc, #4]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	0ffffcff 	.word	0x0ffffcff
 8002dc8:	4bac      	ldr	r3, [pc, #688]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4aab      	ldr	r2, [pc, #684]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002dd2:	6093      	str	r3, [r2, #8]
 8002dd4:	4ba9      	ldr	r3, [pc, #676]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	49a6      	ldr	r1, [pc, #664]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002df2:	4ba2      	ldr	r3, [pc, #648]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df8:	4aa0      	ldr	r2, [pc, #640]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e02:	4b9e      	ldr	r3, [pc, #632]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	499b      	ldr	r1, [pc, #620]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e20:	4b96      	ldr	r3, [pc, #600]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2e:	4993      	ldr	r1, [pc, #588]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e42:	4b8e      	ldr	r3, [pc, #568]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e50:	498a      	ldr	r1, [pc, #552]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e64:	4b85      	ldr	r3, [pc, #532]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e72:	4982      	ldr	r1, [pc, #520]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e86:	4b7d      	ldr	r3, [pc, #500]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e94:	4979      	ldr	r1, [pc, #484]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea8:	4b74      	ldr	r3, [pc, #464]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	4971      	ldr	r1, [pc, #452]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eca:	4b6c      	ldr	r3, [pc, #432]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f023 020c 	bic.w	r2, r3, #12
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	4968      	ldr	r1, [pc, #416]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eec:	4b63      	ldr	r3, [pc, #396]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	4960      	ldr	r1, [pc, #384]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1c:	4957      	ldr	r1, [pc, #348]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f30:	4b52      	ldr	r3, [pc, #328]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	494f      	ldr	r1, [pc, #316]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f52:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4946      	ldr	r1, [pc, #280]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f74:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	493e      	ldr	r1, [pc, #248]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f96:	4b39      	ldr	r3, [pc, #228]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa4:	4935      	ldr	r1, [pc, #212]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb8:	4b30      	ldr	r3, [pc, #192]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc6:	492d      	ldr	r1, [pc, #180]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d011      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fda:	4b28      	ldr	r3, [pc, #160]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe8:	4924      	ldr	r1, [pc, #144]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301a:	4b18      	ldr	r3, [pc, #96]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	4914      	ldr	r1, [pc, #80]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800303c:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800304c:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003066:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003070:	4902      	ldr	r1, [pc, #8]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800308c:	4b8a      	ldr	r3, [pc, #552]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003092:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	4986      	ldr	r1, [pc, #536]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030b0:	4b81      	ldr	r3, [pc, #516]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c0:	497d      	ldr	r1, [pc, #500]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d006      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80d6 	beq.w	8003288 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030dc:	4b76      	ldr	r3, [pc, #472]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a75      	ldr	r2, [pc, #468]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe f8a0 	bl	800122c <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030f0:	f7fe f89c 	bl	800122c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e195      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003102:	4b6d      	ldr	r3, [pc, #436]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d021      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11d      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003122:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003130:	4b61      	ldr	r3, [pc, #388]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003136:	0e1b      	lsrs	r3, r3, #24
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	019a      	lsls	r2, r3, #6
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	4958      	ldr	r1, [pc, #352]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d02e      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003188:	d129      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800318a:	4b4b      	ldr	r3, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003198:	4b47      	ldr	r3, [pc, #284]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319e:	0f1b      	lsrs	r3, r3, #28
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	019a      	lsls	r2, r3, #6
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	493e      	ldr	r1, [pc, #248]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031c6:	4b3c      	ldr	r3, [pc, #240]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031cc:	f023 021f 	bic.w	r2, r3, #31
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	3b01      	subs	r3, #1
 80031d6:	4938      	ldr	r1, [pc, #224]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01d      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ea:	4b33      	ldr	r3, [pc, #204]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f0:	0e1b      	lsrs	r3, r3, #24
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f8:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031fe:	0f1b      	lsrs	r3, r3, #28
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	4926      	ldr	r1, [pc, #152]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d011      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	019a      	lsls	r2, r3, #6
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	071b      	lsls	r3, r3, #28
 800324e:	491a      	ldr	r1, [pc, #104]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003256:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003262:	f7fd ffe3 	bl	800122c <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800326a:	f7fd ffdf 	bl	800122c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	@ 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0d8      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	f040 80ce 	bne.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd ffc6 	bl	800122c <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032a2:	e00b      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032a4:	f7fd ffc2 	bl	800122c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d904      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0bb      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c8:	d0ec      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d12a      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032f2:	4b51      	ldr	r3, [pc, #324]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003300:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4944      	ldr	r1, [pc, #272]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800332e:	4b42      	ldr	r3, [pc, #264]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003334:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	493d      	ldr	r1, [pc, #244]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d022      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800335c:	d11d      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	0e1b      	lsrs	r3, r3, #24
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800336c:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003372:	0f1b      	lsrs	r3, r3, #28
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	019a      	lsls	r2, r3, #6
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	4929      	ldr	r1, [pc, #164]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d028      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033a6:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	0e1b      	lsrs	r3, r3, #24
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	019a      	lsls	r2, r3, #6
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	431a      	orrs	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	071b      	lsls	r3, r3, #28
 80033da:	4917      	ldr	r1, [pc, #92]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	4911      	ldr	r1, [pc, #68]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fd ff12 	bl	800122c <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800340c:	f7fd ff0e 	bl	800122c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e007      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342a:	d1ef      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800

0800343c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e049      	b.n	80034e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f841 	bl	80034ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 f9e8 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d001      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e054      	b.n	80035c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a26      	ldr	r2, [pc, #152]	@ (80035d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003542:	d01d      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_TIM_Base_Start_IT+0xdc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d115      	bne.n	80035ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_TIM_Base_Start_IT+0xec>)
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d015      	beq.n	80035be <HAL_TIM_Base_Start_IT+0xbe>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003598:	d011      	beq.n	80035be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e008      	b.n	80035be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e000      	b.n	80035c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40001800 	.word	0x40001800
 80035ec:	00010007 	.word	0x00010007

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0202 	mvn.w	r2, #2
 8003624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8e9 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8db 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8ec 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8c3 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8b5 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c6 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d020      	beq.n	80036ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0208 	mvn.w	r2, #8
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2204      	movs	r2, #4
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f89d 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f88f 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8a0 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d020      	beq.n	8003738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0210 	mvn.w	r2, #16
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2208      	movs	r2, #8
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f877 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f869 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f87a 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0201 	mvn.w	r2, #1
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fa6e 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f913 	bl	80039b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00c      	beq.n	80037ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f90b 	bl	80039c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f834 	bl	800383a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f06f 0220 	mvn.w	r2, #32
 80037ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8d3 	bl	800399c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a43      	ldr	r2, [pc, #268]	@ (8003970 <TIM_Base_SetConfig+0x120>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	@ (8003974 <TIM_Base_SetConfig+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3f      	ldr	r2, [pc, #252]	@ (8003978 <TIM_Base_SetConfig+0x128>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3e      	ldr	r2, [pc, #248]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3d      	ldr	r2, [pc, #244]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a32      	ldr	r2, [pc, #200]	@ (8003970 <TIM_Base_SetConfig+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d027      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003974 <TIM_Base_SetConfig+0x124>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d023      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003978 <TIM_Base_SetConfig+0x128>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d017      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <TIM_Base_SetConfig+0x134>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003988 <TIM_Base_SetConfig+0x138>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a29      	ldr	r2, [pc, #164]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <TIM_Base_SetConfig+0x140>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <TIM_Base_SetConfig+0x144>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a26      	ldr	r2, [pc, #152]	@ (8003998 <TIM_Base_SetConfig+0x148>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0e      	ldr	r2, [pc, #56]	@ (8003970 <TIM_Base_SetConfig+0x120>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0xf2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a10      	ldr	r2, [pc, #64]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d103      	bne.n	800394a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40010400 	.word	0x40010400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	40001800 	.word	0x40001800
 8003994:	40001c00 	.word	0x40001c00
 8003998:	40002000 	.word	0x40002000

0800399c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e040      	b.n	8003a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fa14 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	@ 0x24
 8003a04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb16 	bl	8004050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8af 	bl	8003b88 <UART_SetConfig>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e01b      	b.n	8003a6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fb95 	bl	8004194 <UART_CheckIdleState>
 8003a6a:	4603      	mov	r3, r0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	@ 0x28
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d177      	bne.n	8003b7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Transmit+0x24>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e070      	b.n	8003b7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2221      	movs	r2, #33	@ 0x21
 8003aa8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd fbbf 	bl	800122c <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac8:	d108      	bne.n	8003adc <HAL_UART_Transmit+0x68>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e003      	b.n	8003ae4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ae4:	e02f      	b.n	8003b46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2180      	movs	r1, #128	@ 0x80
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fbf7 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e03b      	b.n	8003b7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10b      	bne.n	8003b24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e007      	b.n	8003b34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1c9      	bne.n	8003ae6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2140      	movs	r1, #64	@ 0x40
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fbc1 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e005      	b.n	8003b7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e4c <UART_SetConfig+0x2c4>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a94      	ldr	r2, [pc, #592]	@ (8003e50 <UART_SetConfig+0x2c8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0xbe>
 8003c04:	4b93      	ldr	r3, [pc, #588]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d816      	bhi.n	8003c40 <UART_SetConfig+0xb8>
 8003c12:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <UART_SetConfig+0x90>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c35 	.word	0x08003c35
 8003c20:	08003c2f 	.word	0x08003c2f
 8003c24:	08003c3b 	.word	0x08003c3b
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e150      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e14d      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e14a      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e147      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e144      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a83      	ldr	r2, [pc, #524]	@ (8003e58 <UART_SetConfig+0x2d0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d132      	bne.n	8003cb6 <UART_SetConfig+0x12e>
 8003c50:	4b80      	ldr	r3, [pc, #512]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d828      	bhi.n	8003cb0 <UART_SetConfig+0x128>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <UART_SetConfig+0xdc>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c99 	.word	0x08003c99
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003cb1 	.word	0x08003cb1
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003c9f 	.word	0x08003c9f
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb1 	.word	0x08003cb1
 8003c94:	08003cab 	.word	0x08003cab
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e118      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e115      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e112      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e10f      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e10c      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a68      	ldr	r2, [pc, #416]	@ (8003e5c <UART_SetConfig+0x2d4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d120      	bne.n	8003d02 <UART_SetConfig+0x17a>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cca:	2b30      	cmp	r3, #48	@ 0x30
 8003ccc:	d013      	beq.n	8003cf6 <UART_SetConfig+0x16e>
 8003cce:	2b30      	cmp	r3, #48	@ 0x30
 8003cd0:	d814      	bhi.n	8003cfc <UART_SetConfig+0x174>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d009      	beq.n	8003cea <UART_SetConfig+0x162>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d810      	bhi.n	8003cfc <UART_SetConfig+0x174>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <UART_SetConfig+0x15c>
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d006      	beq.n	8003cf0 <UART_SetConfig+0x168>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x174>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0f2      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0ef      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e0ec      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e0e9      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e0e6      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a56      	ldr	r2, [pc, #344]	@ (8003e60 <UART_SetConfig+0x2d8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d120      	bne.n	8003d4e <UART_SetConfig+0x1c6>
 8003d0c:	4b51      	ldr	r3, [pc, #324]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d18:	d013      	beq.n	8003d42 <UART_SetConfig+0x1ba>
 8003d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d1c:	d814      	bhi.n	8003d48 <UART_SetConfig+0x1c0>
 8003d1e:	2b80      	cmp	r3, #128	@ 0x80
 8003d20:	d009      	beq.n	8003d36 <UART_SetConfig+0x1ae>
 8003d22:	2b80      	cmp	r3, #128	@ 0x80
 8003d24:	d810      	bhi.n	8003d48 <UART_SetConfig+0x1c0>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <UART_SetConfig+0x1a8>
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d006      	beq.n	8003d3c <UART_SetConfig+0x1b4>
 8003d2e:	e00b      	b.n	8003d48 <UART_SetConfig+0x1c0>
 8003d30:	2300      	movs	r3, #0
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e0cc      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e0c9      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e0c6      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d42:	2308      	movs	r3, #8
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e0c3      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e0c0      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a44      	ldr	r2, [pc, #272]	@ (8003e64 <UART_SetConfig+0x2dc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d125      	bne.n	8003da4 <UART_SetConfig+0x21c>
 8003d58:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d66:	d017      	beq.n	8003d98 <UART_SetConfig+0x210>
 8003d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d6c:	d817      	bhi.n	8003d9e <UART_SetConfig+0x216>
 8003d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d72:	d00b      	beq.n	8003d8c <UART_SetConfig+0x204>
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d78:	d811      	bhi.n	8003d9e <UART_SetConfig+0x216>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <UART_SetConfig+0x1fe>
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d82:	d006      	beq.n	8003d92 <UART_SetConfig+0x20a>
 8003d84:	e00b      	b.n	8003d9e <UART_SetConfig+0x216>
 8003d86:	2300      	movs	r3, #0
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e0a1      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e09e      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d92:	2304      	movs	r3, #4
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e09b      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d98:	2308      	movs	r3, #8
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e098      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003d9e:	2310      	movs	r3, #16
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e095      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e68 <UART_SetConfig+0x2e0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d125      	bne.n	8003dfa <UART_SetConfig+0x272>
 8003dae:	4b29      	ldr	r3, [pc, #164]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003db8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dbc:	d017      	beq.n	8003dee <UART_SetConfig+0x266>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dc2:	d817      	bhi.n	8003df4 <UART_SetConfig+0x26c>
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc8:	d00b      	beq.n	8003de2 <UART_SetConfig+0x25a>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dce:	d811      	bhi.n	8003df4 <UART_SetConfig+0x26c>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <UART_SetConfig+0x254>
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd8:	d006      	beq.n	8003de8 <UART_SetConfig+0x260>
 8003dda:	e00b      	b.n	8003df4 <UART_SetConfig+0x26c>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e076      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e073      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e070      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e06d      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e06a      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <UART_SetConfig+0x2e4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d138      	bne.n	8003e76 <UART_SetConfig+0x2ee>
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <UART_SetConfig+0x2cc>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e12:	d017      	beq.n	8003e44 <UART_SetConfig+0x2bc>
 8003e14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e18:	d82a      	bhi.n	8003e70 <UART_SetConfig+0x2e8>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1e:	d00b      	beq.n	8003e38 <UART_SetConfig+0x2b0>
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e24:	d824      	bhi.n	8003e70 <UART_SetConfig+0x2e8>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <UART_SetConfig+0x2aa>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2e:	d006      	beq.n	8003e3e <UART_SetConfig+0x2b6>
 8003e30:	e01e      	b.n	8003e70 <UART_SetConfig+0x2e8>
 8003e32:	2300      	movs	r3, #0
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e04b      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e048      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e045      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003e44:	2308      	movs	r3, #8
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e042      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003e4a:	bf00      	nop
 8003e4c:	efff69f3 	.word	0xefff69f3
 8003e50:	40011000 	.word	0x40011000
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40004400 	.word	0x40004400
 8003e5c:	40004800 	.word	0x40004800
 8003e60:	40004c00 	.word	0x40004c00
 8003e64:	40005000 	.word	0x40005000
 8003e68:	40011400 	.word	0x40011400
 8003e6c:	40007800 	.word	0x40007800
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e02c      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a72      	ldr	r2, [pc, #456]	@ (8004044 <UART_SetConfig+0x4bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d125      	bne.n	8003ecc <UART_SetConfig+0x344>
 8003e80:	4b71      	ldr	r3, [pc, #452]	@ (8004048 <UART_SetConfig+0x4c0>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e8a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e8e:	d017      	beq.n	8003ec0 <UART_SetConfig+0x338>
 8003e90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e94:	d817      	bhi.n	8003ec6 <UART_SetConfig+0x33e>
 8003e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9a:	d00b      	beq.n	8003eb4 <UART_SetConfig+0x32c>
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	d811      	bhi.n	8003ec6 <UART_SetConfig+0x33e>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <UART_SetConfig+0x326>
 8003ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eaa:	d006      	beq.n	8003eba <UART_SetConfig+0x332>
 8003eac:	e00b      	b.n	8003ec6 <UART_SetConfig+0x33e>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e00d      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e00a      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e007      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e004      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e001      	b.n	8003ed0 <UART_SetConfig+0x348>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed8:	d15b      	bne.n	8003f92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d828      	bhi.n	8003f32 <UART_SetConfig+0x3aa>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <UART_SetConfig+0x360>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe fe14 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e013      	b.n	8003f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fe24 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e00f      	b.n	8003f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <UART_SetConfig+0x4c4>)
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e00c      	b.n	8003f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe fcf7 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8003f26:	61b8      	str	r0, [r7, #24]
        break;
 8003f28:	e008      	b.n	8003f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e004      	b.n	8003f3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d074      	beq.n	800402c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	005a      	lsls	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d916      	bls.n	8003f8c <UART_SetConfig+0x404>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f64:	d212      	bcs.n	8003f8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f023 030f 	bic.w	r3, r3, #15
 8003f6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	89fa      	ldrh	r2, [r7, #14]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e04f      	b.n	800402c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	77bb      	strb	r3, [r7, #30]
 8003f90:	e04c      	b.n	800402c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d828      	bhi.n	8003fea <UART_SetConfig+0x462>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x418>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fcd 	.word	0x08003fcd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fdb 	.word	0x08003fdb
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003feb 	.word	0x08003feb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fe fdb8 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e013      	b.n	8003ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fe fdc8 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	61b8      	str	r0, [r7, #24]
        break;
 8003fd2:	e00f      	b.n	8003ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <UART_SetConfig+0x4c4>)
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e00c      	b.n	8003ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe fc9b 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8003fde:	61b8      	str	r0, [r7, #24]
        break;
 8003fe0:	e008      	b.n	8003ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e004      	b.n	8003ff4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ff2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	085a      	lsrs	r2, r3, #1
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d909      	bls.n	8004028 <UART_SetConfig+0x4a0>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401a:	d205      	bcs.n	8004028 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	e001      	b.n	800402c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004038:	7fbb      	ldrb	r3, [r7, #30]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40007c00 	.word	0x40007c00
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400

08004050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800414e:	d10a      	bne.n	8004166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b098      	sub	sp, #96	@ 0x60
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a4:	f7fd f842 	bl	800122c <HAL_GetTick>
 80041a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d12e      	bne.n	8004216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f88c 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d021      	beq.n	8004216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e062      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d149      	bne.n	80042b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f856 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03c      	beq.n	80042b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	623b      	str	r3, [r7, #32]
   return(result);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004290:	61fa      	str	r2, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	617b      	str	r3, [r7, #20]
   return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e011      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3758      	adds	r7, #88	@ 0x58
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	e04f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d04b      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fc ff95 	bl	800122c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <UART_WaitOnFlagUntilTimeout+0x30>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e04e      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d037      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b80      	cmp	r3, #128	@ 0x80
 800432a:	d034      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b40      	cmp	r3, #64	@ 0x40
 8004330:	d031      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d110      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f838 	bl	80043be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2208      	movs	r2, #8
 8004352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e029      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004370:	d111      	bne.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f81e 	bl	80043be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d0a0      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043be:	b480      	push	{r7}
 80043c0:	b095      	sub	sp, #84	@ 0x54
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	61fb      	str	r3, [r7, #28]
   return(result);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004430:	2b01      	cmp	r3, #1
 8004432:	d118      	bne.n	8004466 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	60bb      	str	r3, [r7, #8]
   return(result);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f023 0310 	bic.w	r3, r3, #16
 8004448:	647b      	str	r3, [r7, #68]	@ 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	613b      	str	r3, [r7, #16]
   return(result);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e6      	bne.n	8004434 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800447a:	bf00      	nop
 800447c:	3754      	adds	r7, #84	@ 0x54
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 001c 	add.w	r0, r7, #28
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d121      	bne.n	80044e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	4b21      	ldr	r3, [pc, #132]	@ (8004538 <USB_CoreInit+0xb0>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa92 	bl	8004a04 <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e010      	b.n	8004508 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa86 	bl	8004a04 <USB_CoreReset>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004508:	7fbb      	ldrb	r3, [r7, #30]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10b      	bne.n	8004526 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f043 0206 	orr.w	r2, r3, #6
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004532:	b004      	add	sp, #16
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	ffbdffbf 	.word	0xffbdffbf

0800453c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 0201 	bic.w	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d115      	bne.n	80045ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800458c:	200a      	movs	r0, #10
 800458e:	f7fc fe59 	bl	8001244 <HAL_Delay>
      ms += 10U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	330a      	adds	r3, #10
 8004596:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fa25 	bl	80049e8 <USB_GetMode>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d01e      	beq.n	80045e2 <USB_SetCurrentMode+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80045a8:	d9f0      	bls.n	800458c <USB_SetCurrentMode+0x2e>
 80045aa:	e01a      	b.n	80045e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d115      	bne.n	80045de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045be:	200a      	movs	r0, #10
 80045c0:	f7fc fe40 	bl	8001244 <HAL_Delay>
      ms += 10U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	330a      	adds	r3, #10
 80045c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa0c 	bl	80049e8 <USB_GetMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <USB_SetCurrentMode+0x84>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80045da:	d9f0      	bls.n	80045be <USB_SetCurrentMode+0x60>
 80045dc:	e001      	b.n	80045e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e005      	b.n	80045ee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80045e6:	d101      	bne.n	80045ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f8:	b084      	sub	sp, #16
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e009      	b.n	800462c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3340      	adds	r3, #64	@ 0x40
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3301      	adds	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b0e      	cmp	r3, #14
 8004630:	d9f2      	bls.n	8004618 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11c      	bne.n	8004674 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e005      	b.n	8004680 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004686:	461a      	mov	r2, r3
 8004688:	2300      	movs	r3, #0
 800468a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800468c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004690:	2b01      	cmp	r3, #1
 8004692:	d10d      	bne.n	80046b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800469c:	2100      	movs	r1, #0
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f968 	bl	8004974 <USB_SetDevSpeed>
 80046a4:	e008      	b.n	80046b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046a6:	2101      	movs	r1, #1
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f963 	bl	8004974 <USB_SetDevSpeed>
 80046ae:	e003      	b.n	80046b8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046b0:	2103      	movs	r1, #3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f95e 	bl	8004974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046b8:	2110      	movs	r1, #16
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8fa 	bl	80048b4 <USB_FlushTxFifo>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f924 	bl	8004918 <USB_FlushRxFifo>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f8:	461a      	mov	r2, r3
 80046fa:	2300      	movs	r3, #0
 80046fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	e043      	b.n	800478c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800471a:	d118      	bne.n	800474e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472e:	461a      	mov	r2, r3
 8004730:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e013      	b.n	8004760 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004744:	461a      	mov	r2, r3
 8004746:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e008      	b.n	8004760 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477e:	461a      	mov	r2, r3
 8004780:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004784:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004790:	461a      	mov	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4293      	cmp	r3, r2
 8004796:	d3b5      	bcc.n	8004704 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e043      	b.n	8004826 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b4:	d118      	bne.n	80047e8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c8:	461a      	mov	r2, r3
 80047ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e013      	b.n	80047fa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e008      	b.n	80047fa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f4:	461a      	mov	r2, r3
 80047f6:	2300      	movs	r3, #0
 80047f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800481e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3301      	adds	r3, #1
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800482a:	461a      	mov	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4293      	cmp	r3, r2
 8004830:	d3b5      	bcc.n	800479e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004844:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004852:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004854:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <USB_DevInit+0x2b4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004874:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 0208 	orr.w	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004888:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <USB_DevInit+0x2b8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a8:	b004      	add	sp, #16
 80048aa:	4770      	bx	lr
 80048ac:	803c3800 	.word	0x803c3800
 80048b0:	40000004 	.word	0x40000004

080048b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048ce:	d901      	bls.n	80048d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e01b      	b.n	800490c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	daf2      	bge.n	80048c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	019b      	lsls	r3, r3, #6
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f8:	d901      	bls.n	80048fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e006      	b.n	800490c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d0f0      	beq.n	80048ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004930:	d901      	bls.n	8004936 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e018      	b.n	8004968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	daf2      	bge.n	8004924 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2210      	movs	r2, #16
 8004946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004954:	d901      	bls.n	800495a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e006      	b.n	8004968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d0f0      	beq.n	8004948 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0301 	and.w	r3, r3, #1
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a1c:	d901      	bls.n	8004a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e022      	b.n	8004a68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	daf2      	bge.n	8004a10 <USB_CoreReset+0xc>

  count = 10U;
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a2e:	e002      	b.n	8004a36 <USB_CoreReset+0x32>
  {
    count--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a54:	d901      	bls.n	8004a5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e006      	b.n	8004a68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d0f0      	beq.n	8004a48 <USB_CoreReset+0x44>

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8a:	f3ef 8305 	mrs	r3, IPSR
 8004a8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a96:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9a:	607b      	str	r3, [r7, #4]
  return(result);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <osKernelInitialize+0x3a>
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <osKernelInitialize+0x64>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d103      	bne.n	8004abe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ab6:	f06f 0305 	mvn.w	r3, #5
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e00c      	b.n	8004ad8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <osKernelInitialize+0x64>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <osKernelInitialize+0x64>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e002      	b.n	8004ad8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	2000087c 	.word	0x2000087c

08004aec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af2:	f3ef 8305 	mrs	r3, IPSR
 8004af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004af8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afe:	f3ef 8310 	mrs	r3, PRIMASK
 8004b02:	607b      	str	r3, [r7, #4]
  return(result);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <osKernelStart+0x3a>
 8004b16:	4b0f      	ldr	r3, [pc, #60]	@ (8004b54 <osKernelStart+0x68>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d103      	bne.n	8004b26 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b1e:	f06f 0305 	mvn.w	r3, #5
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e010      	b.n	8004b48 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <osKernelStart+0x68>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d109      	bne.n	8004b42 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b2e:	f7ff ffa1 	bl	8004a74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b32:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <osKernelStart+0x68>)
 8004b34:	2202      	movs	r2, #2
 8004b36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b38:	f001 fc4e 	bl	80063d8 <vTaskStartScheduler>
      stat = osOK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e002      	b.n	8004b48 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	2000087c 	.word	0x2000087c

08004b58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b090      	sub	sp, #64	@ 0x40
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b68:	f3ef 8305 	mrs	r3, IPSR
 8004b6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b6e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 808f 	bne.w	8004c94 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	617b      	str	r3, [r7, #20]
  return(result);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <osThreadNew+0x3e>
 8004b8e:	4b44      	ldr	r3, [pc, #272]	@ (8004ca0 <osThreadNew+0x148>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d07e      	beq.n	8004c94 <osThreadNew+0x13c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d07b      	beq.n	8004c94 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004ba0:	2318      	movs	r3, #24
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d045      	beq.n	8004c40 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <osThreadNew+0x6a>
        name = attr->name;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <osThreadNew+0x90>
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2b38      	cmp	r3, #56	@ 0x38
 8004bda:	d805      	bhi.n	8004be8 <osThreadNew+0x90>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <osThreadNew+0x94>
        return (NULL);
 8004be8:	2300      	movs	r3, #0
 8004bea:	e054      	b.n	8004c96 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <osThreadNew+0xca>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c0a:	d90a      	bls.n	8004c22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <osThreadNew+0xca>
        mem = 1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	e010      	b.n	8004c44 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10c      	bne.n	8004c44 <osThreadNew+0xec>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <osThreadNew+0xec>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <osThreadNew+0xec>
          mem = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	e001      	b.n	8004c44 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d110      	bne.n	8004c6c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c52:	9202      	str	r2, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f001 f9d3 	bl	800600c <xTaskCreateStatic>
 8004c66:	4603      	mov	r3, r0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e013      	b.n	8004c94 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	f107 0310 	add.w	r3, r7, #16
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f001 fa27 	bl	80060d8 <xTaskCreate>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <osThreadNew+0x13c>
          hTask = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c94:	693b      	ldr	r3, [r7, #16]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3730      	adds	r7, #48	@ 0x30
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000087c 	.word	0x2000087c

08004ca4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004caa:	f001 fff9 	bl	8006ca0 <xTaskGetCurrentTaskHandle>
 8004cae:	6078      	str	r0, [r7, #4]

  return (id);
 8004cb0:	687b      	ldr	r3, [r7, #4]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc4:	f3ef 8305 	mrs	r3, IPSR
 8004cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <osDelay+0x3c>
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <osDelay+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d103      	bne.n	8004cf8 <osDelay+0x3c>
    stat = osErrorISR;
 8004cf0:	f06f 0305 	mvn.w	r3, #5
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e007      	b.n	8004d08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fb30 	bl	8006368 <vTaskDelay>
    }
  }

  return (stat);
 8004d08:	697b      	ldr	r3, [r7, #20]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2000087c 	.word	0x2000087c

08004d18 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d24:	f3ef 8305 	mrs	r3, IPSR
 8004d28:	613b      	str	r3, [r7, #16]
  return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8085 	bne.w	8004e3c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <osMutexNew+0x3a>
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <osMutexNew+0x130>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d074      	beq.n	8004e3c <osMutexNew+0x124>
    if (attr != NULL) {
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e001      	b.n	8004d64 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <osMutexNew+0x5c>
      rmtx = 1U;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e001      	b.n	8004d78 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15c      	bne.n	8004e3c <osMutexNew+0x124>
      mem = -1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d015      	beq.n	8004dba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <osMutexNew+0x8c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d9c:	d902      	bls.n	8004da4 <osMutexNew+0x8c>
          mem = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e00c      	b.n	8004dbe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <osMutexNew+0xa6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <osMutexNew+0xa6>
            mem = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e001      	b.n	8004dbe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d112      	bne.n	8004dea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	2004      	movs	r0, #4
 8004dd2:	f000 fb5c 	bl	800548e <xQueueCreateMutexStatic>
 8004dd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dd8:	e016      	b.n	8004e08 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4619      	mov	r1, r3
 8004de0:	2001      	movs	r0, #1
 8004de2:	f000 fb54 	bl	800548e <xQueueCreateMutexStatic>
 8004de6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de8:	e00e      	b.n	8004e08 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004df6:	2004      	movs	r0, #4
 8004df8:	f000 fb31 	bl	800545e <xQueueCreateMutex>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dfe:	e003      	b.n	8004e08 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004e00:	2001      	movs	r0, #1
 8004e02:	f000 fb2c 	bl	800545e <xQueueCreateMutex>
 8004e06:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <osMutexNew+0x110>
        if (attr != NULL) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <osMutexNew+0x104>
          name = attr->name;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e001      	b.n	8004e20 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e24:	f001 f894 	bl	8005f50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <osMutexNew+0x124>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3728      	adds	r7, #40	@ 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2000087c 	.word	0x2000087c

08004e4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6a:	f3ef 8305 	mrs	r3, IPSR
 8004e6e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e70:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e82:	f3ef 8311 	mrs	r3, BASEPRI
 8004e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <osMutexAcquire+0x52>
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <osMutexAcquire+0xb8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d103      	bne.n	8004e9e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004e96:	f06f 0305 	mvn.w	r3, #5
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e02c      	b.n	8004ef8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004ea4:	f06f 0303 	mvn.w	r3, #3
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e025      	b.n	8004ef8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d011      	beq.n	8004ed6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	69b8      	ldr	r0, [r7, #24]
 8004eb6:	f000 fb3c 	bl	8005532 <xQueueTakeMutexRecursive>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d01b      	beq.n	8004ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004ec6:	f06f 0301 	mvn.w	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e014      	b.n	8004ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004ece:	f06f 0302 	mvn.w	r3, #2
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e010      	b.n	8004ef8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	69b8      	ldr	r0, [r7, #24]
 8004eda:	f000 fdf9 	bl	8005ad0 <xQueueSemaphoreTake>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d009      	beq.n	8004ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004eea:	f06f 0301 	mvn.w	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e002      	b.n	8004ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004ef2:	f06f 0302 	mvn.w	r3, #2
 8004ef6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000087c 	.word	0x2000087c

08004f08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f24:	f3ef 8305 	mrs	r3, IPSR
 8004f28:	613b      	str	r3, [r7, #16]
  return(result);
 8004f2a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f30:	f3ef 8310 	mrs	r3, PRIMASK
 8004f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <osMutexRelease+0x50>
 8004f48:	4b16      	ldr	r3, [pc, #88]	@ (8004fa4 <osMutexRelease+0x9c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d103      	bne.n	8004f58 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004f50:	f06f 0305 	mvn.w	r3, #5
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e01f      	b.n	8004f98 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004f5e:	f06f 0303 	mvn.w	r3, #3
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e018      	b.n	8004f98 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f6c:	69b8      	ldr	r0, [r7, #24]
 8004f6e:	f000 faa9 	bl	80054c4 <xQueueGiveMutexRecursive>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d00f      	beq.n	8004f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004f78:	f06f 0302 	mvn.w	r3, #2
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e00b      	b.n	8004f98 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004f80:	2300      	movs	r3, #0
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	69b8      	ldr	r0, [r7, #24]
 8004f88:	f000 fb0c 	bl	80055a4 <xQueueGenericSend>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d002      	beq.n	8004f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004f92:	f06f 0302 	mvn.w	r3, #2
 8004f96:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004f98:	69fb      	ldr	r3, [r7, #28]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2000087c 	.word	0x2000087c

08004fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a07      	ldr	r2, [pc, #28]	@ (8004fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a06      	ldr	r2, [pc, #24]	@ (8004fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8004fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000880 	.word	0x20000880
 8004fd8:	200008dc 	.word	0x200008dc

08004fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a07      	ldr	r2, [pc, #28]	@ (8005008 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4a06      	ldr	r2, [pc, #24]	@ (800500c <vApplicationGetTimerTaskMemory+0x30>)
 8004ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ffa:	601a      	str	r2, [r3, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	20000adc 	.word	0x20000adc
 800500c:	20000b38 	.word	0x20000b38

08005010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f103 0208 	add.w	r2, r3, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f04f 32ff 	mov.w	r2, #4294967295
 8005028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f103 0208 	add.w	r2, r3, #8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d103      	bne.n	80050d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e00c      	b.n	80050ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3308      	adds	r3, #8
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e002      	b.n	80050e0 <vListInsert+0x2e>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d2f6      	bcs.n	80050da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6892      	ldr	r2, [r2, #8]
 800513a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6852      	ldr	r2, [r2, #4]
 8005144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d103      	bne.n	8005158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	b672      	cpsid	i
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	b662      	cpsie	i
 80051a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80051a8:	f002 fbe8 	bl	800797c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d8:	3b01      	subs	r3, #1
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	@ 0xff
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3310      	adds	r3, #16
 800520a:	4618      	mov	r0, r3
 800520c:	f001 fb80 	bl	8006910 <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <xQueueGenericReset+0xd4>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e009      	b.n	800523c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff feef 	bl	8005010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3324      	adds	r3, #36	@ 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff feea 	bl	8005010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f002 fbd4 	bl	80079e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	@ 0x38
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005268:	b672      	cpsid	i
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	b662      	cpsie	i
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	b672      	cpsid	i
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	b662      	cpsie	i
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <xQueueGenericCreateStatic+0x5e>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <xQueueGenericCreateStatic+0x62>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xQueueGenericCreateStatic+0x64>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	b672      	cpsid	i
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	b662      	cpsie	i
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <xQueueGenericCreateStatic+0x90>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <xQueueGenericCreateStatic+0x94>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <xQueueGenericCreateStatic+0x96>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	b672      	cpsid	i
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	b662      	cpsie	i
 80052fe:	61fb      	str	r3, [r7, #28]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005306:	2350      	movs	r3, #80	@ 0x50
 8005308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b50      	cmp	r3, #80	@ 0x50
 800530e:	d00d      	beq.n	800532c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	b672      	cpsid	i
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	b662      	cpsie	i
 8005324:	61bb      	str	r3, [r7, #24]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800532c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005340:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f848 	bl	80053e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005356:	4618      	mov	r0, r3
 8005358:	3730      	adds	r7, #48	@ 0x30
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08a      	sub	sp, #40	@ 0x28
 8005362:	af02      	add	r7, sp, #8
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	4613      	mov	r3, r2
 800536a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <xQueueGenericCreate+0x30>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	b672      	cpsid	i
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	b662      	cpsie	i
 8005386:	613b      	str	r3, [r7, #16]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	e004      	b.n	80053a4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3350      	adds	r3, #80	@ 0x50
 80053a8:	4618      	mov	r0, r3
 80053aa:	f002 fc15 	bl	8007bd8 <pvPortMalloc>
 80053ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3350      	adds	r3, #80	@ 0x50
 80053be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053c8:	79fa      	ldrb	r2, [r7, #7]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f805 	bl	80053e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053da:	69bb      	ldr	r3, [r7, #24]
	}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e002      	b.n	8005406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005412:	2101      	movs	r1, #1
 8005414:	69b8      	ldr	r0, [r7, #24]
 8005416:	f7ff feaf 	bl	8005178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800544a:	2300      	movs	r3, #0
 800544c:	2200      	movs	r2, #0
 800544e:	2100      	movs	r1, #0
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8a7 	bl	80055a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	4603      	mov	r3, r0
 8005466:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	461a      	mov	r2, r3
 8005474:	6939      	ldr	r1, [r7, #16]
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f7ff ff71 	bl	800535e <xQueueGenericCreate>
 800547c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff ffd3 	bl	800542a <prvInitialiseMutex>

		return xNewQueue;
 8005484:	68fb      	ldr	r3, [r7, #12]
	}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800548e:	b580      	push	{r7, lr}
 8005490:	b088      	sub	sp, #32
 8005492:	af02      	add	r7, sp, #8
 8005494:	4603      	mov	r3, r0
 8005496:	6039      	str	r1, [r7, #0]
 8005498:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800549a:	2301      	movs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2200      	movs	r2, #0
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	6978      	ldr	r0, [r7, #20]
 80054ae:	f7ff fecf 	bl	8005250 <xQueueGenericCreateStatic>
 80054b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ffb8 	bl	800542a <prvInitialiseMutex>

		return xNewQueue;
 80054ba:	68fb      	ldr	r3, [r7, #12]
	}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	b672      	cpsid	i
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	b662      	cpsie	i
 80054ea:	60fb      	str	r3, [r7, #12]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	689c      	ldr	r4, [r3, #8]
 80054f6:	f001 fbd3 	bl	8006ca0 <xTaskGetCurrentTaskHandle>
 80054fa:	4603      	mov	r3, r0
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d111      	bne.n	8005524 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005512:	2300      	movs	r3, #0
 8005514:	2200      	movs	r2, #0
 8005516:	2100      	movs	r1, #0
 8005518:	6938      	ldr	r0, [r7, #16]
 800551a:	f000 f843 	bl	80055a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e001      	b.n	8005528 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005528:	697b      	ldr	r3, [r7, #20]
	}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}

08005532 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005532:	b590      	push	{r4, r7, lr}
 8005534:	b087      	sub	sp, #28
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	b672      	cpsid	i
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	b662      	cpsie	i
 800555a:	60fb      	str	r3, [r7, #12]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	689c      	ldr	r4, [r3, #8]
 8005566:	f001 fb9b 	bl	8006ca0 <xTaskGetCurrentTaskHandle>
 800556a:	4603      	mov	r3, r0
 800556c:	429c      	cmp	r4, r3
 800556e:	d107      	bne.n	8005580 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	e00c      	b.n	800559a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6938      	ldr	r0, [r7, #16]
 8005584:	f000 faa4 	bl	8005ad0 <xQueueSemaphoreTake>
 8005588:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800559a:	697b      	ldr	r3, [r7, #20]
	}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}

080055a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	@ 0x38
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <xQueueGenericSend+0x38>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSend+0x46>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xQueueGenericSend+0x4a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericSend+0x4c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <xQueueGenericSend+0x6c>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSend+0x7a>
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSend+0x7e>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSend+0x80>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <xQueueGenericSend+0xa0>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	623b      	str	r3, [r7, #32]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005644:	f001 fb3c 	bl	8006cc0 <xTaskGetSchedulerState>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <xQueueGenericSend+0xb0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <xQueueGenericSend+0xb4>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <xQueueGenericSend+0xb6>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <xQueueGenericSend+0xd6>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	b672      	cpsid	i
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	b662      	cpsie	i
 8005672:	61fb      	str	r3, [r7, #28]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800567a:	f002 f97f 	bl	800797c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <xQueueGenericSend+0xec>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d129      	bne.n	80056e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005696:	f000 fb4b 	bl	8005d30 <prvCopyDataToQueue>
 800569a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	3324      	adds	r3, #36	@ 0x24
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 f931 	bl	8006910 <xTaskRemoveFromEventList>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d013      	beq.n	80056dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056b4:	4b3f      	ldr	r3, [pc, #252]	@ (80057b4 <xQueueGenericSend+0x210>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	e00a      	b.n	80056dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056cc:	4b39      	ldr	r3, [pc, #228]	@ (80057b4 <xQueueGenericSend+0x210>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056dc:	f002 f984 	bl	80079e8 <vPortExitCritical>
				return pdPASS;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e063      	b.n	80057ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056ea:	f002 f97d 	bl	80079e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e05c      	b.n	80057ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f96d 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005702:	2301      	movs	r3, #1
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005706:	f002 f96f 	bl	80079e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800570a:	f000 fed1 	bl	80064b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570e:	f002 f935 	bl	800797c <vPortEnterCritical>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d103      	bne.n	8005728 <xQueueGenericSend+0x184>
 8005720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800572e:	b25b      	sxtb	r3, r3
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d103      	bne.n	800573e <xQueueGenericSend+0x19a>
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800573e:	f002 f953 	bl	80079e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005742:	1d3a      	adds	r2, r7, #4
 8005744:	f107 0314 	add.w	r3, r7, #20
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f95c 	bl	8006a08 <xTaskCheckForTimeOut>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d124      	bne.n	80057a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005756:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005758:	f000 fbe2 	bl	8005f20 <prvIsQueueFull>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	3310      	adds	r3, #16
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f001 f87a 	bl	8006864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005772:	f000 fb6d 	bl	8005e50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005776:	f000 fea9 	bl	80064cc <xTaskResumeAll>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f47f af7c 	bne.w	800567a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <xQueueGenericSend+0x210>)
 8005784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	e772      	b.n	800567a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005796:	f000 fb5b 	bl	8005e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800579a:	f000 fe97 	bl	80064cc <xTaskResumeAll>
 800579e:	e76c      	b.n	800567a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057a2:	f000 fb55 	bl	8005e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a6:	f000 fe91 	bl	80064cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3738      	adds	r7, #56	@ 0x38
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSendFromISR+0x42>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <xQueueGenericSendFromISR+0x46>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueGenericSendFromISR+0x48>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	623b      	str	r3, [r7, #32]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <xQueueGenericSendFromISR+0x76>
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <xQueueGenericSendFromISR+0x7a>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSendFromISR+0x7c>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	b672      	cpsid	i
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	b662      	cpsie	i
 800584c:	61fb      	str	r3, [r7, #28]
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005854:	f002 f97a 	bl	8007b4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005858:	f3ef 8211 	mrs	r2, BASEPRI
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	b672      	cpsid	i
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	b662      	cpsie	i
 8005870:	61ba      	str	r2, [r7, #24]
 8005872:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005874:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <xQueueGenericSendFromISR+0xd2>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d12c      	bne.n	80058e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 fa49 	bl	8005d30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800589e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d112      	bne.n	80058ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	3324      	adds	r3, #36	@ 0x24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f001 f82b 	bl	8006910 <xTaskRemoveFromEventList>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e007      	b.n	80058de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058d2:	3301      	adds	r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	b25a      	sxtb	r2, r3
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058de:	2301      	movs	r3, #1
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80058e2:	e001      	b.n	80058e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3738      	adds	r7, #56	@ 0x38
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08c      	sub	sp, #48	@ 0x30
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10d      	bne.n	8005936 <xQueueReceive+0x36>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	b672      	cpsid	i
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	b662      	cpsie	i
 800592e:	623b      	str	r3, [r7, #32]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <xQueueReceive+0x44>
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <xQueueReceive+0x48>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <xQueueReceive+0x4a>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <xQueueReceive+0x6a>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	b672      	cpsid	i
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	b662      	cpsie	i
 8005962:	61fb      	str	r3, [r7, #28]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596a:	f001 f9a9 	bl	8006cc0 <xTaskGetSchedulerState>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <xQueueReceive+0x7a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <xQueueReceive+0x7e>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueReceive+0x80>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10d      	bne.n	80059a0 <xQueueReceive+0xa0>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	b672      	cpsid	i
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	b662      	cpsie	i
 8005998:	61bb      	str	r3, [r7, #24]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059a0:	f001 ffec 	bl	800797c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01f      	beq.n	80059f0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b4:	f000 fa26 	bl	8005e04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	3310      	adds	r3, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ff9f 	bl	8006910 <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3c      	ldr	r3, [pc, #240]	@ (8005acc <xQueueReceive+0x1cc>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059e8:	f001 fffe 	bl	80079e8 <vPortExitCritical>
				return pdPASS;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e069      	b.n	8005ac4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f6:	f001 fff7 	bl	80079e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e062      	b.n	8005ac4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a04:	f107 0310 	add.w	r3, r7, #16
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 ffe7 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a12:	f001 ffe9 	bl	80079e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a16:	f000 fd4b 	bl	80064b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a1a:	f001 ffaf 	bl	800797c <vPortEnterCritical>
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a24:	b25b      	sxtb	r3, r3
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d103      	bne.n	8005a34 <xQueueReceive+0x134>
 8005a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a3a:	b25b      	sxtb	r3, r3
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0x14a>
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a4a:	f001 ffcd 	bl	80079e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a4e:	1d3a      	adds	r2, r7, #4
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 ffd6 	bl	8006a08 <xTaskCheckForTimeOut>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d123      	bne.n	8005aaa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a64:	f000 fa46 	bl	8005ef4 <prvIsQueueEmpty>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	3324      	adds	r3, #36	@ 0x24
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fef4 	bl	8006864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7e:	f000 f9e7 	bl	8005e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a82:	f000 fd23 	bl	80064cc <xTaskResumeAll>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d189      	bne.n	80059a0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005acc <xQueueReceive+0x1cc>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	e780      	b.n	80059a0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aa0:	f000 f9d6 	bl	8005e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa4:	f000 fd12 	bl	80064cc <xTaskResumeAll>
 8005aa8:	e77a      	b.n	80059a0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aac:	f000 f9d0 	bl	8005e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ab0:	f000 fd0c 	bl	80064cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab6:	f000 fa1d 	bl	8005ef4 <prvIsQueueEmpty>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f43f af6f 	beq.w	80059a0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ac2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3730      	adds	r7, #48	@ 0x30
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08e      	sub	sp, #56	@ 0x38
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	b672      	cpsid	i
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	b662      	cpsie	i
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	b672      	cpsid	i
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	b662      	cpsie	i
 8005b24:	61fb      	str	r3, [r7, #28]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b2c:	f001 f8c8 	bl	8006cc0 <xTaskGetSchedulerState>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <xQueueSemaphoreTake+0x6c>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <xQueueSemaphoreTake+0x70>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <xQueueSemaphoreTake+0x72>
 8005b40:	2300      	movs	r3, #0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	b672      	cpsid	i
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	b662      	cpsie	i
 8005b5a:	61bb      	str	r3, [r7, #24]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b62:	f001 ff0b 	bl	800797c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d024      	beq.n	8005bbc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b82:	f001 fa1f 	bl	8006fc4 <pvTaskIncrementMutexHeldCount>
 8005b86:	4602      	mov	r2, r0
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00f      	beq.n	8005bb4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b96:	3310      	adds	r3, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 feb9 	bl	8006910 <xTaskRemoveFromEventList>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b55      	ldr	r3, [pc, #340]	@ (8005cfc <xQueueSemaphoreTake+0x22c>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bb4:	f001 ff18 	bl	80079e8 <vPortExitCritical>
				return pdPASS;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e09a      	b.n	8005cf2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d114      	bne.n	8005bec <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	b672      	cpsid	i
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	b662      	cpsie	i
 8005bdc:	617b      	str	r3, [r7, #20]
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005be4:	f001 ff00 	bl	80079e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005be8:	2300      	movs	r3, #0
 8005bea:	e082      	b.n	8005cf2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fef0 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c00:	f001 fef2 	bl	80079e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c04:	f000 fc54 	bl	80064b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c08:	f001 feb8 	bl	800797c <vPortEnterCritical>
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c12:	b25b      	sxtb	r3, r3
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d103      	bne.n	8005c22 <xQueueSemaphoreTake+0x152>
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d103      	bne.n	8005c38 <xQueueSemaphoreTake+0x168>
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c38:	f001 fed6 	bl	80079e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	f107 030c 	add.w	r3, r7, #12
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fedf 	bl	8006a08 <xTaskCheckForTimeOut>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d132      	bne.n	8005cb6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c52:	f000 f94f 	bl	8005ef4 <prvIsQueueEmpty>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d026      	beq.n	8005caa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005c64:	f001 fe8a 	bl	800797c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f845 	bl	8006cfc <xTaskPriorityInherit>
 8005c72:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c74:	f001 feb8 	bl	80079e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	3324      	adds	r3, #36	@ 0x24
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fdef 	bl	8006864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c88:	f000 f8e2 	bl	8005e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c8c:	f000 fc1e 	bl	80064cc <xTaskResumeAll>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f af65 	bne.w	8005b62 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005c98:	4b18      	ldr	r3, [pc, #96]	@ (8005cfc <xQueueSemaphoreTake+0x22c>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e75b      	b.n	8005b62 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cac:	f000 f8d0 	bl	8005e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb0:	f000 fc0c 	bl	80064cc <xTaskResumeAll>
 8005cb4:	e755      	b.n	8005b62 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cb8:	f000 f8ca 	bl	8005e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cbc:	f000 fc06 	bl	80064cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cc2:	f000 f917 	bl	8005ef4 <prvIsQueueEmpty>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f43f af4a 	beq.w	8005b62 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00d      	beq.n	8005cf0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005cd4:	f001 fe52 	bl	800797c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cda:	f000 f811 	bl	8005d00 <prvGetDisinheritPriorityAfterTimeout>
 8005cde:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f8e4 	bl	8006eb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cec:	f001 fe7c 	bl	80079e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3738      	adds	r7, #56	@ 0x38
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e001      	b.n	8005d22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d22:	68fb      	ldr	r3, [r7, #12]
	}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d14d      	bne.n	8005df2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f836 	bl	8006dcc <xTaskPriorityDisinherit>
 8005d60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	e043      	b.n	8005df2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d119      	bne.n	8005da4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6858      	ldr	r0, [r3, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	f002 f980 	bl	8008080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d32b      	bcc.n	8005df2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e026      	b.n	8005df2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68d8      	ldr	r0, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	f002 f966 	bl	8008080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	441a      	add	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d207      	bcs.n	8005de0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	425b      	negs	r3, r3
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d105      	bne.n	8005df2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005dfa:	697b      	ldr	r3, [r7, #20]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	441a      	add	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d303      	bcc.n	8005e38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	461a      	mov	r2, r3
 8005e42:	6838      	ldr	r0, [r7, #0]
 8005e44:	f002 f91c 	bl	8008080 <memcpy>
	}
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e58:	f001 fd90 	bl	800797c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e64:	e011      	b.n	8005e8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d012      	beq.n	8005e94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3324      	adds	r3, #36	@ 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fd4c 	bl	8006910 <xTaskRemoveFromEventList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e7e:	f000 fe2b 	bl	8006ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dce9      	bgt.n	8005e66 <prvUnlockQueue+0x16>
 8005e92:	e000      	b.n	8005e96 <prvUnlockQueue+0x46>
					break;
 8005e94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fda3 	bl	80079e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ea2:	f001 fd6b 	bl	800797c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eae:	e011      	b.n	8005ed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d012      	beq.n	8005ede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3310      	adds	r3, #16
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fd27 	bl	8006910 <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ec8:	f000 fe06 	bl	8006ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dce9      	bgt.n	8005eb0 <prvUnlockQueue+0x60>
 8005edc:	e000      	b.n	8005ee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	22ff      	movs	r2, #255	@ 0xff
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ee8:	f001 fd7e 	bl	80079e8 <vPortExitCritical>
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005efc:	f001 fd3e 	bl	800797c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e001      	b.n	8005f12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f001 fd69 	bl	80079e8 <vPortExitCritical>

	return xReturn;
 8005f16:	68fb      	ldr	r3, [r7, #12]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f28:	f001 fd28 	bl	800797c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d102      	bne.n	8005f3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e001      	b.n	8005f42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f42:	f001 fd51 	bl	80079e8 <vPortExitCritical>

	return xReturn;
 8005f46:	68fb      	ldr	r3, [r7, #12]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e014      	b.n	8005f8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f60:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f6c:	490c      	ldr	r1, [pc, #48]	@ (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f76:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <vQueueAddToRegistry+0x50>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f82:	e006      	b.n	8005f92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b07      	cmp	r3, #7
 8005f8e:	d9e7      	bls.n	8005f60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000f38 	.word	0x20000f38

08005fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fb4:	f001 fce2 	bl	800797c <vPortEnterCritical>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <vQueueWaitForMessageRestricted+0x2a>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d103      	bne.n	8005fe4 <vQueueWaitForMessageRestricted+0x40>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fe4:	f001 fd00 	bl	80079e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3324      	adds	r3, #36	@ 0x24
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fc5b 	bl	80068b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff ff26 	bl	8005e50 <prvUnlockQueue>
	}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	@ 0x38
 8006010:	af04      	add	r7, sp, #16
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800601a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <xTaskCreateStatic+0x30>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	b672      	cpsid	i
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	b662      	cpsie	i
 8006034:	623b      	str	r3, [r7, #32]
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10d      	bne.n	800605e <xTaskCreateStatic+0x52>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	b672      	cpsid	i
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	b662      	cpsie	i
 8006056:	61fb      	str	r3, [r7, #28]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800605e:	235c      	movs	r3, #92	@ 0x5c
 8006060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b5c      	cmp	r3, #92	@ 0x5c
 8006066:	d00d      	beq.n	8006084 <xTaskCreateStatic+0x78>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	b672      	cpsid	i
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	b662      	cpsie	i
 800607c:	61bb      	str	r3, [r7, #24]
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006084:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01e      	beq.n	80060ca <xTaskCreateStatic+0xbe>
 800608c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01b      	beq.n	80060ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800609a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060a4:	2300      	movs	r3, #0
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	9302      	str	r3, [sp, #8]
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f850 	bl	8006162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060c4:	f000 f8e0 	bl	8006288 <prvAddNewTaskToReadyList>
 80060c8:	e001      	b.n	80060ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060ce:	697b      	ldr	r3, [r7, #20]
	}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	@ 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	@ 0x30
 80060dc:	af04      	add	r7, sp, #16
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fd73 	bl	8007bd8 <pvPortMalloc>
 80060f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060fa:	205c      	movs	r0, #92	@ 0x5c
 80060fc:	f001 fd6c 	bl	8007bd8 <pvPortMalloc>
 8006100:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
 800610e:	e005      	b.n	800611c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006110:	6978      	ldr	r0, [r7, #20]
 8006112:	f001 fe2f 	bl	8007d74 <vPortFree>
 8006116:	e001      	b.n	800611c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d017      	beq.n	8006152 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	2300      	movs	r3, #0
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f80e 	bl	8006162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006146:	69f8      	ldr	r0, [r7, #28]
 8006148:	f000 f89e 	bl	8006288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800614c:	2301      	movs	r3, #1
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e002      	b.n	8006158 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006158:	69bb      	ldr	r3, [r7, #24]
	}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	461a      	mov	r2, r3
 800617a:	21a5      	movs	r1, #165	@ 0xa5
 800617c:	f001 ff4c 	bl	8008018 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800618a:	440b      	add	r3, r1
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f023 0307 	bic.w	r3, r3, #7
 8006198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	617b      	str	r3, [r7, #20]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01f      	beq.n	8006206 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e012      	b.n	80061f2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	7819      	ldrb	r1, [r3, #0]
 80061d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	3334      	adds	r3, #52	@ 0x34
 80061dc:	460a      	mov	r2, r1
 80061de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3301      	adds	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b0f      	cmp	r3, #15
 80061f6:	d9e9      	bls.n	80061cc <prvInitialiseNewTask+0x6a>
 80061f8:	e000      	b.n	80061fc <prvInitialiseNewTask+0x9a>
			{
				break;
 80061fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006204:	e003      	b.n	800620e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	2b37      	cmp	r3, #55	@ 0x37
 8006212:	d901      	bls.n	8006218 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006214:	2337      	movs	r3, #55	@ 0x37
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006222:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	2200      	movs	r2, #0
 8006228:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe ff0e 	bl	8005050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	3318      	adds	r3, #24
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe ff09 	bl	8005050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006252:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	2200      	movs	r2, #0
 8006258:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	69b8      	ldr	r0, [r7, #24]
 8006268:	f001 fa7c 	bl	8007764 <pxPortInitialiseStack>
 800626c:	4602      	mov	r2, r0
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800627c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800627e:	bf00      	nop
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006290:	f001 fb74 	bl	800797c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006294:	4b2d      	ldr	r3, [pc, #180]	@ (800634c <prvAddNewTaskToReadyList+0xc4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	4a2c      	ldr	r2, [pc, #176]	@ (800634c <prvAddNewTaskToReadyList+0xc4>)
 800629c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800629e:	4b2c      	ldr	r3, [pc, #176]	@ (8006350 <prvAddNewTaskToReadyList+0xc8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006350 <prvAddNewTaskToReadyList+0xc8>)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062ac:	4b27      	ldr	r3, [pc, #156]	@ (800634c <prvAddNewTaskToReadyList+0xc4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d110      	bne.n	80062d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062b4:	f000 fc34 	bl	8006b20 <prvInitialiseTaskLists>
 80062b8:	e00d      	b.n	80062d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062ba:	4b26      	ldr	r3, [pc, #152]	@ (8006354 <prvAddNewTaskToReadyList+0xcc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062c2:	4b23      	ldr	r3, [pc, #140]	@ (8006350 <prvAddNewTaskToReadyList+0xc8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d802      	bhi.n	80062d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006350 <prvAddNewTaskToReadyList+0xc8>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062d6:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <prvAddNewTaskToReadyList+0xd0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006358 <prvAddNewTaskToReadyList+0xd0>)
 80062de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <prvAddNewTaskToReadyList+0xd0>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ec:	4b1b      	ldr	r3, [pc, #108]	@ (800635c <prvAddNewTaskToReadyList+0xd4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d903      	bls.n	80062fc <prvAddNewTaskToReadyList+0x74>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	4a18      	ldr	r2, [pc, #96]	@ (800635c <prvAddNewTaskToReadyList+0xd4>)
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <prvAddNewTaskToReadyList+0xd8>)
 800630a:	441a      	add	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f7fe fea9 	bl	800506a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006318:	f001 fb66 	bl	80079e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800631c:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <prvAddNewTaskToReadyList+0xcc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00e      	beq.n	8006342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <prvAddNewTaskToReadyList+0xc8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	429a      	cmp	r2, r3
 8006330:	d207      	bcs.n	8006342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006332:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <prvAddNewTaskToReadyList+0xdc>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	2000144c 	.word	0x2000144c
 8006350:	20000f78 	.word	0x20000f78
 8006354:	20001458 	.word	0x20001458
 8006358:	20001468 	.word	0x20001468
 800635c:	20001454 	.word	0x20001454
 8006360:	20000f7c 	.word	0x20000f7c
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01a      	beq.n	80063b0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800637a:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <vTaskDelay+0x68>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <vTaskDelay+0x36>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	b672      	cpsid	i
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	b662      	cpsie	i
 8006396:	60bb      	str	r3, [r7, #8]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800639e:	f000 f887 	bl	80064b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fe21 	bl	8006fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063aa:	f000 f88f 	bl	80064cc <xTaskResumeAll>
 80063ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80063b6:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <vTaskDelay+0x6c>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20001474 	.word	0x20001474
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063e6:	463a      	mov	r2, r7
 80063e8:	1d39      	adds	r1, r7, #4
 80063ea:	f107 0308 	add.w	r3, r7, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fdda 	bl	8004fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	9202      	str	r2, [sp, #8]
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	460a      	mov	r2, r1
 8006406:	4924      	ldr	r1, [pc, #144]	@ (8006498 <vTaskStartScheduler+0xc0>)
 8006408:	4824      	ldr	r0, [pc, #144]	@ (800649c <vTaskStartScheduler+0xc4>)
 800640a:	f7ff fdff 	bl	800600c <xTaskCreateStatic>
 800640e:	4603      	mov	r3, r0
 8006410:	4a23      	ldr	r2, [pc, #140]	@ (80064a0 <vTaskStartScheduler+0xc8>)
 8006412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006414:	4b22      	ldr	r3, [pc, #136]	@ (80064a0 <vTaskStartScheduler+0xc8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e001      	b.n	8006426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d102      	bne.n	8006432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800642c:	f000 fe32 	bl	8007094 <xTimerCreateTimerTask>
 8006430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d118      	bne.n	800646a <vTaskStartScheduler+0x92>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643c:	b672      	cpsid	i
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	b662      	cpsie	i
 800644c:	613b      	str	r3, [r7, #16]
}
 800644e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006450:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <vTaskStartScheduler+0xcc>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006458:	4b13      	ldr	r3, [pc, #76]	@ (80064a8 <vTaskStartScheduler+0xd0>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800645e:	4b13      	ldr	r3, [pc, #76]	@ (80064ac <vTaskStartScheduler+0xd4>)
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006464:	f001 fa0c 	bl	8007880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006468:	e011      	b.n	800648e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d10d      	bne.n	800648e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	60fb      	str	r3, [r7, #12]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <vTaskStartScheduler+0xb2>
}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	080089f8 	.word	0x080089f8
 800649c:	08006af1 	.word	0x08006af1
 80064a0:	20001470 	.word	0x20001470
 80064a4:	2000146c 	.word	0x2000146c
 80064a8:	20001458 	.word	0x20001458
 80064ac:	20001450 	.word	0x20001450

080064b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064b4:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <vTaskSuspendAll+0x18>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a03      	ldr	r2, [pc, #12]	@ (80064c8 <vTaskSuspendAll+0x18>)
 80064bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	20001474 	.word	0x20001474

080064cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064da:	4b43      	ldr	r3, [pc, #268]	@ (80065e8 <xTaskResumeAll+0x11c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <xTaskResumeAll+0x32>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
 80064f6:	603b      	str	r3, [r7, #0]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064fe:	f001 fa3d 	bl	800797c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006502:	4b39      	ldr	r3, [pc, #228]	@ (80065e8 <xTaskResumeAll+0x11c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3b01      	subs	r3, #1
 8006508:	4a37      	ldr	r2, [pc, #220]	@ (80065e8 <xTaskResumeAll+0x11c>)
 800650a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800650c:	4b36      	ldr	r3, [pc, #216]	@ (80065e8 <xTaskResumeAll+0x11c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d162      	bne.n	80065da <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006514:	4b35      	ldr	r3, [pc, #212]	@ (80065ec <xTaskResumeAll+0x120>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05e      	beq.n	80065da <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651c:	e02f      	b.n	800657e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <xTaskResumeAll+0x124>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fdfa 	bl	8005124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3304      	adds	r3, #4
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fdf5 	bl	8005124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653e:	4b2d      	ldr	r3, [pc, #180]	@ (80065f4 <xTaskResumeAll+0x128>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d903      	bls.n	800654e <xTaskResumeAll+0x82>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	4a2a      	ldr	r2, [pc, #168]	@ (80065f4 <xTaskResumeAll+0x128>)
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4a27      	ldr	r2, [pc, #156]	@ (80065f8 <xTaskResumeAll+0x12c>)
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fe fd80 	bl	800506a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656e:	4b23      	ldr	r3, [pc, #140]	@ (80065fc <xTaskResumeAll+0x130>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006578:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <xTaskResumeAll+0x134>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800657e:	4b1c      	ldr	r3, [pc, #112]	@ (80065f0 <xTaskResumeAll+0x124>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1cb      	bne.n	800651e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800658c:	f000 fb68 	bl	8006c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006590:	4b1c      	ldr	r3, [pc, #112]	@ (8006604 <xTaskResumeAll+0x138>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800659c:	f000 f846 	bl	800662c <xTaskIncrementTick>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80065a6:	4b16      	ldr	r3, [pc, #88]	@ (8006600 <xTaskResumeAll+0x134>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f1      	bne.n	800659c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80065b8:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <xTaskResumeAll+0x138>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <xTaskResumeAll+0x134>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065c6:	2301      	movs	r3, #1
 80065c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006608 <xTaskResumeAll+0x13c>)
 80065cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065da:	f001 fa05 	bl	80079e8 <vPortExitCritical>

	return xAlreadyYielded;
 80065de:	68bb      	ldr	r3, [r7, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20001474 	.word	0x20001474
 80065ec:	2000144c 	.word	0x2000144c
 80065f0:	2000140c 	.word	0x2000140c
 80065f4:	20001454 	.word	0x20001454
 80065f8:	20000f7c 	.word	0x20000f7c
 80065fc:	20000f78 	.word	0x20000f78
 8006600:	20001460 	.word	0x20001460
 8006604:	2000145c 	.word	0x2000145c
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006612:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <xTaskGetTickCount+0x1c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006618:	687b      	ldr	r3, [r7, #4]
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20001450 	.word	0x20001450

0800662c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006636:	4b50      	ldr	r3, [pc, #320]	@ (8006778 <xTaskIncrementTick+0x14c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 808c 	bne.w	8006758 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006640:	4b4e      	ldr	r3, [pc, #312]	@ (800677c <xTaskIncrementTick+0x150>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006648:	4a4c      	ldr	r2, [pc, #304]	@ (800677c <xTaskIncrementTick+0x150>)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d123      	bne.n	800669c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006654:	4b4a      	ldr	r3, [pc, #296]	@ (8006780 <xTaskIncrementTick+0x154>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00d      	beq.n	800667a <xTaskIncrementTick+0x4e>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	b672      	cpsid	i
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	b662      	cpsie	i
 8006672:	603b      	str	r3, [r7, #0]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <xTaskIncrementTick+0x4a>
 800667a:	4b41      	ldr	r3, [pc, #260]	@ (8006780 <xTaskIncrementTick+0x154>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	4b40      	ldr	r3, [pc, #256]	@ (8006784 <xTaskIncrementTick+0x158>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3e      	ldr	r2, [pc, #248]	@ (8006780 <xTaskIncrementTick+0x154>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4a3e      	ldr	r2, [pc, #248]	@ (8006784 <xTaskIncrementTick+0x158>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b3e      	ldr	r3, [pc, #248]	@ (8006788 <xTaskIncrementTick+0x15c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a3c      	ldr	r2, [pc, #240]	@ (8006788 <xTaskIncrementTick+0x15c>)
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	f000 fae2 	bl	8006c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800669c:	4b3b      	ldr	r3, [pc, #236]	@ (800678c <xTaskIncrementTick+0x160>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d349      	bcc.n	800673a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a6:	4b36      	ldr	r3, [pc, #216]	@ (8006780 <xTaskIncrementTick+0x154>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b0:	4b36      	ldr	r3, [pc, #216]	@ (800678c <xTaskIncrementTick+0x160>)
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	601a      	str	r2, [r3, #0]
					break;
 80066b8:	e03f      	b.n	800673a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ba:	4b31      	ldr	r3, [pc, #196]	@ (8006780 <xTaskIncrementTick+0x154>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d203      	bcs.n	80066da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066d2:	4a2e      	ldr	r2, [pc, #184]	@ (800678c <xTaskIncrementTick+0x160>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066d8:	e02f      	b.n	800673a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fd20 	bl	8005124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	3318      	adds	r3, #24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fd17 	bl	8005124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fa:	4b25      	ldr	r3, [pc, #148]	@ (8006790 <xTaskIncrementTick+0x164>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <xTaskIncrementTick+0xde>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	4a22      	ldr	r2, [pc, #136]	@ (8006790 <xTaskIncrementTick+0x164>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a1f      	ldr	r2, [pc, #124]	@ (8006794 <xTaskIncrementTick+0x168>)
 8006718:	441a      	add	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fe fca2 	bl	800506a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672a:	4b1b      	ldr	r3, [pc, #108]	@ (8006798 <xTaskIncrementTick+0x16c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006730:	429a      	cmp	r2, r3
 8006732:	d3b8      	bcc.n	80066a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006738:	e7b5      	b.n	80066a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800673a:	4b17      	ldr	r3, [pc, #92]	@ (8006798 <xTaskIncrementTick+0x16c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006740:	4914      	ldr	r1, [pc, #80]	@ (8006794 <xTaskIncrementTick+0x168>)
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d907      	bls.n	8006762 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006752:	2301      	movs	r3, #1
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e004      	b.n	8006762 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006758:	4b10      	ldr	r3, [pc, #64]	@ (800679c <xTaskIncrementTick+0x170>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a0f      	ldr	r2, [pc, #60]	@ (800679c <xTaskIncrementTick+0x170>)
 8006760:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006762:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <xTaskIncrementTick+0x174>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800676e:	697b      	ldr	r3, [r7, #20]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20001474 	.word	0x20001474
 800677c:	20001450 	.word	0x20001450
 8006780:	20001404 	.word	0x20001404
 8006784:	20001408 	.word	0x20001408
 8006788:	20001464 	.word	0x20001464
 800678c:	2000146c 	.word	0x2000146c
 8006790:	20001454 	.word	0x20001454
 8006794:	20000f7c 	.word	0x20000f7c
 8006798:	20000f78 	.word	0x20000f78
 800679c:	2000145c 	.word	0x2000145c
 80067a0:	20001460 	.word	0x20001460

080067a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067aa:	4b29      	ldr	r3, [pc, #164]	@ (8006850 <vTaskSwitchContext+0xac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067b2:	4b28      	ldr	r3, [pc, #160]	@ (8006854 <vTaskSwitchContext+0xb0>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067b8:	e044      	b.n	8006844 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80067ba:	4b26      	ldr	r3, [pc, #152]	@ (8006854 <vTaskSwitchContext+0xb0>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c0:	4b25      	ldr	r3, [pc, #148]	@ (8006858 <vTaskSwitchContext+0xb4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	e013      	b.n	80067f0 <vTaskSwitchContext+0x4c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <vTaskSwitchContext+0x46>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	b672      	cpsid	i
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	b662      	cpsie	i
 80067e2:	607b      	str	r3, [r7, #4]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <vTaskSwitchContext+0x42>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	491a      	ldr	r1, [pc, #104]	@ (800685c <vTaskSwitchContext+0xb8>)
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0e1      	beq.n	80067c8 <vTaskSwitchContext+0x24>
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4a13      	ldr	r2, [pc, #76]	@ (800685c <vTaskSwitchContext+0xb8>)
 8006810:	4413      	add	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3308      	adds	r3, #8
 8006826:	429a      	cmp	r2, r3
 8006828:	d104      	bne.n	8006834 <vTaskSwitchContext+0x90>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4a09      	ldr	r2, [pc, #36]	@ (8006860 <vTaskSwitchContext+0xbc>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4a06      	ldr	r2, [pc, #24]	@ (8006858 <vTaskSwitchContext+0xb4>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6013      	str	r3, [r2, #0]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20001474 	.word	0x20001474
 8006854:	20001460 	.word	0x20001460
 8006858:	20001454 	.word	0x20001454
 800685c:	20000f7c 	.word	0x20000f7c
 8006860:	20000f78 	.word	0x20000f78

08006864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10d      	bne.n	8006890 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006878:	b672      	cpsid	i
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	b662      	cpsie	i
 8006888:	60fb      	str	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <vTaskPlaceOnEventList+0x4c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3318      	adds	r3, #24
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fe fc0a 	bl	80050b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800689e:	2101      	movs	r1, #1
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f000 fba3 	bl	8006fec <prvAddCurrentTaskToDelayedList>
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000f78 	.word	0x20000f78

080068b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	b672      	cpsid	i
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	b662      	cpsie	i
 80068da:	617b      	str	r3, [r7, #20]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068e2:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <vTaskPlaceOnEventListRestricted+0x58>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3318      	adds	r3, #24
 80068e8:	4619      	mov	r1, r3
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fe fbbd 	bl	800506a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	68b8      	ldr	r0, [r7, #8]
 8006900:	f000 fb74 	bl	8006fec <prvAddCurrentTaskToDelayedList>
	}
 8006904:	bf00      	nop
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000f78 	.word	0x20000f78

08006910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	b672      	cpsid	i
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	b662      	cpsie	i
 800693a:	60fb      	str	r3, [r7, #12]
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	e7fd      	b.n	800693e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3318      	adds	r3, #24
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fbec 	bl	8005124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694c:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <xTaskRemoveFromEventList+0xb4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11d      	bne.n	8006990 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3304      	adds	r3, #4
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fbe3 	bl	8005124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006962:	4b19      	ldr	r3, [pc, #100]	@ (80069c8 <xTaskRemoveFromEventList+0xb8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <xTaskRemoveFromEventList+0x62>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	4a16      	ldr	r2, [pc, #88]	@ (80069c8 <xTaskRemoveFromEventList+0xb8>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <xTaskRemoveFromEventList+0xbc>)
 8006980:	441a      	add	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe fb6e 	bl	800506a <vListInsertEnd>
 800698e:	e005      	b.n	800699c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3318      	adds	r3, #24
 8006994:	4619      	mov	r1, r3
 8006996:	480e      	ldr	r0, [pc, #56]	@ (80069d0 <xTaskRemoveFromEventList+0xc0>)
 8006998:	f7fe fb67 	bl	800506a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <xTaskRemoveFromEventList+0xc4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d905      	bls.n	80069b6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ae:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <xTaskRemoveFromEventList+0xc8>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e001      	b.n	80069ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20001474 	.word	0x20001474
 80069c8:	20001454 	.word	0x20001454
 80069cc:	20000f7c 	.word	0x20000f7c
 80069d0:	2000140c 	.word	0x2000140c
 80069d4:	20000f78 	.word	0x20000f78
 80069d8:	20001460 	.word	0x20001460

080069dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069e4:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <vTaskInternalSetTimeOutState+0x24>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <vTaskInternalSetTimeOutState+0x28>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	605a      	str	r2, [r3, #4]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	20001464 	.word	0x20001464
 8006a04:	20001450 	.word	0x20001450

08006a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10d      	bne.n	8006a34 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	b672      	cpsid	i
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	b662      	cpsie	i
 8006a2c:	613b      	str	r3, [r7, #16]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	b672      	cpsid	i
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	b662      	cpsie	i
 8006a4e:	60fb      	str	r3, [r7, #12]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006a56:	f000 ff91 	bl	800797c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad0 <xTaskCheckForTimeOut+0xc8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d102      	bne.n	8006a7a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	e023      	b.n	8006ac2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <xTaskCheckForTimeOut+0xcc>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d007      	beq.n	8006a96 <xTaskCheckForTimeOut+0x8e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e015      	b.n	8006ac2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d20b      	bcs.n	8006ab8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff95 	bl	80069dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e004      	b.n	8006ac2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f000 ff91 	bl	80079e8 <vPortExitCritical>

	return xReturn;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20001450 	.word	0x20001450
 8006ad4:	20001464 	.word	0x20001464

08006ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006adc:	4b03      	ldr	r3, [pc, #12]	@ (8006aec <vTaskMissedYield+0x14>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20001460 	.word	0x20001460

08006af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006af8:	f000 f852 	bl	8006ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006afc:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <prvIdleTask+0x28>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d9f9      	bls.n	8006af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <prvIdleTask+0x2c>)
 8006b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b14:	e7f0      	b.n	8006af8 <prvIdleTask+0x8>
 8006b16:	bf00      	nop
 8006b18:	20000f7c 	.word	0x20000f7c
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b26:	2300      	movs	r3, #0
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	e00c      	b.n	8006b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4a12      	ldr	r2, [pc, #72]	@ (8006b80 <prvInitialiseTaskLists+0x60>)
 8006b38:	4413      	add	r3, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fa68 	bl	8005010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3301      	adds	r3, #1
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b37      	cmp	r3, #55	@ 0x37
 8006b4a:	d9ef      	bls.n	8006b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b4c:	480d      	ldr	r0, [pc, #52]	@ (8006b84 <prvInitialiseTaskLists+0x64>)
 8006b4e:	f7fe fa5f 	bl	8005010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b52:	480d      	ldr	r0, [pc, #52]	@ (8006b88 <prvInitialiseTaskLists+0x68>)
 8006b54:	f7fe fa5c 	bl	8005010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b58:	480c      	ldr	r0, [pc, #48]	@ (8006b8c <prvInitialiseTaskLists+0x6c>)
 8006b5a:	f7fe fa59 	bl	8005010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b5e:	480c      	ldr	r0, [pc, #48]	@ (8006b90 <prvInitialiseTaskLists+0x70>)
 8006b60:	f7fe fa56 	bl	8005010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b64:	480b      	ldr	r0, [pc, #44]	@ (8006b94 <prvInitialiseTaskLists+0x74>)
 8006b66:	f7fe fa53 	bl	8005010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <prvInitialiseTaskLists+0x78>)
 8006b6c:	4a05      	ldr	r2, [pc, #20]	@ (8006b84 <prvInitialiseTaskLists+0x64>)
 8006b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b70:	4b0a      	ldr	r3, [pc, #40]	@ (8006b9c <prvInitialiseTaskLists+0x7c>)
 8006b72:	4a05      	ldr	r2, [pc, #20]	@ (8006b88 <prvInitialiseTaskLists+0x68>)
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000f7c 	.word	0x20000f7c
 8006b84:	200013dc 	.word	0x200013dc
 8006b88:	200013f0 	.word	0x200013f0
 8006b8c:	2000140c 	.word	0x2000140c
 8006b90:	20001420 	.word	0x20001420
 8006b94:	20001438 	.word	0x20001438
 8006b98:	20001404 	.word	0x20001404
 8006b9c:	20001408 	.word	0x20001408

08006ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ba6:	e019      	b.n	8006bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ba8:	f000 fee8 	bl	800797c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bac:	4b10      	ldr	r3, [pc, #64]	@ (8006bf0 <prvCheckTasksWaitingTermination+0x50>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fab3 	bl	8005124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <prvCheckTasksWaitingTermination+0x54>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006bf4 <prvCheckTasksWaitingTermination+0x54>)
 8006bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <prvCheckTasksWaitingTermination+0x58>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf8 <prvCheckTasksWaitingTermination+0x58>)
 8006bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bd2:	f000 ff09 	bl	80079e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f810 	bl	8006bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bdc:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <prvCheckTasksWaitingTermination+0x58>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e1      	bne.n	8006ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20001420 	.word	0x20001420
 8006bf4:	2000144c 	.word	0x2000144c
 8006bf8:	20001434 	.word	0x20001434

08006bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d108      	bne.n	8006c20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f8ae 	bl	8007d74 <vPortFree>
				vPortFree( pxTCB );
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f8ab 	bl	8007d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c1e:	e01b      	b.n	8006c58 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d103      	bne.n	8006c32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f8a2 	bl	8007d74 <vPortFree>
	}
 8006c30:	e012      	b.n	8006c58 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d00d      	beq.n	8006c58 <prvDeleteTCB+0x5c>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	b672      	cpsid	i
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	b662      	cpsie	i
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <prvDeleteTCB+0x58>
	}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c66:	4b0c      	ldr	r3, [pc, #48]	@ (8006c98 <prvResetNextTaskUnblockTime+0x38>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <prvResetNextTaskUnblockTime+0x3c>)
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c78:	e008      	b.n	8006c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <prvResetNextTaskUnblockTime+0x38>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <prvResetNextTaskUnblockTime+0x3c>)
 8006c8a:	6013      	str	r3, [r2, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20001404 	.word	0x20001404
 8006c9c:	2000146c 	.word	0x2000146c

08006ca0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ca6:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <xTaskGetCurrentTaskHandle+0x1c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006cac:	687b      	ldr	r3, [r7, #4]
	}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000f78 	.word	0x20000f78

08006cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <xTaskGetSchedulerState+0x34>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	e008      	b.n	8006ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd4:	4b08      	ldr	r3, [pc, #32]	@ (8006cf8 <xTaskGetSchedulerState+0x38>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	e001      	b.n	8006ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ce6:	687b      	ldr	r3, [r7, #4]
	}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20001458 	.word	0x20001458
 8006cf8:	20001474 	.word	0x20001474

08006cfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d051      	beq.n	8006db6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d16:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc0 <xTaskPriorityInherit+0xc4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d241      	bcs.n	8006da4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db06      	blt.n	8006d36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d28:	4b25      	ldr	r3, [pc, #148]	@ (8006dc0 <xTaskPriorityInherit+0xc4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6959      	ldr	r1, [r3, #20]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc4 <xTaskPriorityInherit+0xc8>)
 8006d48:	4413      	add	r3, r2
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	d122      	bne.n	8006d94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe f9e6 	bl	8005124 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d58:	4b19      	ldr	r3, [pc, #100]	@ (8006dc0 <xTaskPriorityInherit+0xc4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <xTaskPriorityInherit+0xcc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d903      	bls.n	8006d76 <xTaskPriorityInherit+0x7a>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	4a15      	ldr	r2, [pc, #84]	@ (8006dc8 <xTaskPriorityInherit+0xcc>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a10      	ldr	r2, [pc, #64]	@ (8006dc4 <xTaskPriorityInherit+0xc8>)
 8006d84:	441a      	add	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fe f96c 	bl	800506a <vListInsertEnd>
 8006d92:	e004      	b.n	8006d9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d94:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <xTaskPriorityInherit+0xc4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e008      	b.n	8006db6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006da8:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <xTaskPriorityInherit+0xc4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d201      	bcs.n	8006db6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db6:	68fb      	ldr	r3, [r7, #12]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000f78 	.word	0x20000f78
 8006dc4:	20000f7c 	.word	0x20000f7c
 8006dc8:	20001454 	.word	0x20001454

08006dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d05c      	beq.n	8006e9c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006de2:	4b31      	ldr	r3, [pc, #196]	@ (8006ea8 <xTaskPriorityDisinherit+0xdc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d00d      	beq.n	8006e08 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	b672      	cpsid	i
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	b662      	cpsie	i
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	60bb      	str	r3, [r7, #8]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e30:	1e5a      	subs	r2, r3, #1
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d02c      	beq.n	8006e9c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d128      	bne.n	8006e9c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f968 	bl	8005124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006eac <xTaskPriorityDisinherit+0xe0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <xTaskPriorityDisinherit+0xb0>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	4a0c      	ldr	r2, [pc, #48]	@ (8006eac <xTaskPriorityDisinherit+0xe0>)
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a09      	ldr	r2, [pc, #36]	@ (8006eb0 <xTaskPriorityDisinherit+0xe4>)
 8006e8a:	441a      	add	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f7fe f8e9 	bl	800506a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e9c:	697b      	ldr	r3, [r7, #20]
	}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000f78 	.word	0x20000f78
 8006eac:	20001454 	.word	0x20001454
 8006eb0:	20000f7c 	.word	0x20000f7c

08006eb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d070      	beq.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	b672      	cpsid	i
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	b662      	cpsie	i
 8006ee8:	60fb      	str	r3, [r7, #12]
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	e7fd      	b.n	8006eec <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d902      	bls.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e002      	b.n	8006f06 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d04e      	beq.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d149      	bne.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f1a:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d10d      	bne.n	8006f40 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	b672      	cpsid	i
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	b662      	cpsie	i
 8006f38:	60bb      	str	r3, [r7, #8]
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db04      	blt.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	6959      	ldr	r1, [r3, #20]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a13      	ldr	r2, [pc, #76]	@ (8006fbc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f6e:	4413      	add	r3, r2
 8006f70:	4299      	cmp	r1, r3
 8006f72:	d11c      	bne.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe f8d3 	bl	8005124 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f82:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d903      	bls.n	8006f92 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a07      	ldr	r2, [pc, #28]	@ (8006fbc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006fa0:	441a      	add	r2, r3
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fe f85e 	bl	800506a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fae:	bf00      	nop
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000f78 	.word	0x20000f78
 8006fbc:	20000f7c 	.word	0x20000f7c
 8006fc0:	20001454 	.word	0x20001454

08006fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fd6:	3201      	adds	r2, #1
 8006fd8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006fda:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000f78 	.word	0x20000f78

08006fec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ff6:	4b21      	ldr	r3, [pc, #132]	@ (800707c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ffc:	4b20      	ldr	r3, [pc, #128]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe f88e 	bl	8005124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d10a      	bne.n	8007026 <prvAddCurrentTaskToDelayedList+0x3a>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007016:	4b1a      	ldr	r3, [pc, #104]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4819      	ldr	r0, [pc, #100]	@ (8007084 <prvAddCurrentTaskToDelayedList+0x98>)
 8007020:	f7fe f823 	bl	800506a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007024:	e026      	b.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800702e:	4b14      	ldr	r3, [pc, #80]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	429a      	cmp	r2, r3
 800703c:	d209      	bcs.n	8007052 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe f831 	bl	80050b2 <vListInsert>
}
 8007050:	e010      	b.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe f827 	bl	80050b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007064:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d202      	bcs.n	8007074 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800706e:	4a08      	ldr	r2, [pc, #32]	@ (8007090 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20001450 	.word	0x20001450
 8007080:	20000f78 	.word	0x20000f78
 8007084:	20001438 	.word	0x20001438
 8007088:	20001408 	.word	0x20001408
 800708c:	20001404 	.word	0x20001404
 8007090:	2000146c 	.word	0x2000146c

08007094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08a      	sub	sp, #40	@ 0x28
 8007098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800709e:	f000 fb21 	bl	80076e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070a2:	4b1e      	ldr	r3, [pc, #120]	@ (800711c <xTimerCreateTimerTask+0x88>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d021      	beq.n	80070ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070b2:	1d3a      	adds	r2, r7, #4
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fd ff8d 	bl	8004fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	9202      	str	r2, [sp, #8]
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	2302      	movs	r3, #2
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	460a      	mov	r2, r1
 80070d4:	4912      	ldr	r1, [pc, #72]	@ (8007120 <xTimerCreateTimerTask+0x8c>)
 80070d6:	4813      	ldr	r0, [pc, #76]	@ (8007124 <xTimerCreateTimerTask+0x90>)
 80070d8:	f7fe ff98 	bl	800600c <xTaskCreateStatic>
 80070dc:	4603      	mov	r3, r0
 80070de:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <xTimerCreateTimerTask+0x94>)
 80070e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070e2:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <xTimerCreateTimerTask+0x94>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10d      	bne.n	8007110 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	b672      	cpsid	i
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	b662      	cpsie	i
 8007108:	613b      	str	r3, [r7, #16]
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007110:	697b      	ldr	r3, [r7, #20]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200014a8 	.word	0x200014a8
 8007120:	08008a00 	.word	0x08008a00
 8007124:	0800726d 	.word	0x0800726d
 8007128:	200014ac 	.word	0x200014ac

0800712c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	@ 0x28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <xTimerGenericCommand+0x34>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	b672      	cpsid	i
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	b662      	cpsie	i
 8007158:	623b      	str	r3, [r7, #32]
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007160:	4b19      	ldr	r3, [pc, #100]	@ (80071c8 <xTimerGenericCommand+0x9c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02a      	beq.n	80071be <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b05      	cmp	r3, #5
 8007178:	dc18      	bgt.n	80071ac <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800717a:	f7ff fda1 	bl	8006cc0 <xTaskGetSchedulerState>
 800717e:	4603      	mov	r3, r0
 8007180:	2b02      	cmp	r3, #2
 8007182:	d109      	bne.n	8007198 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007184:	4b10      	ldr	r3, [pc, #64]	@ (80071c8 <xTimerGenericCommand+0x9c>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f107 0110 	add.w	r1, r7, #16
 800718c:	2300      	movs	r3, #0
 800718e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007190:	f7fe fa08 	bl	80055a4 <xQueueGenericSend>
 8007194:	6278      	str	r0, [r7, #36]	@ 0x24
 8007196:	e012      	b.n	80071be <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <xTimerGenericCommand+0x9c>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	f107 0110 	add.w	r1, r7, #16
 80071a0:	2300      	movs	r3, #0
 80071a2:	2200      	movs	r2, #0
 80071a4:	f7fe f9fe 	bl	80055a4 <xQueueGenericSend>
 80071a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071aa:	e008      	b.n	80071be <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <xTimerGenericCommand+0x9c>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f107 0110 	add.w	r1, r7, #16
 80071b4:	2300      	movs	r3, #0
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	f7fe fafe 	bl	80057b8 <xQueueGenericSendFromISR>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3728      	adds	r7, #40	@ 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200014a8 	.word	0x200014a8

080071cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b24      	ldr	r3, [pc, #144]	@ (8007268 <prvProcessExpiredTimer+0x9c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd ff9d 	bl	8005124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d025      	beq.n	8007244 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	18d1      	adds	r1, r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	f000 f8d7 	bl	80073b8 <prvInsertTimerInActiveList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d022      	beq.n	8007256 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007210:	2300      	movs	r3, #0
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	2100      	movs	r1, #0
 800721a:	6978      	ldr	r0, [r7, #20]
 800721c:	f7ff ff86 	bl	800712c <xTimerGenericCommand>
 8007220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d116      	bne.n	8007256 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	b672      	cpsid	i
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	b662      	cpsie	i
 800723c:	60fb      	str	r3, [r7, #12]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	6978      	ldr	r0, [r7, #20]
 800725c:	4798      	blx	r3
}
 800725e:	bf00      	nop
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200014a0 	.word	0x200014a0

0800726c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007274:	f107 0308 	add.w	r3, r7, #8
 8007278:	4618      	mov	r0, r3
 800727a:	f000 f859 	bl	8007330 <prvGetNextExpireTime>
 800727e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4619      	mov	r1, r3
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f805 	bl	8007294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800728a:	f000 f8d7 	bl	800743c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800728e:	bf00      	nop
 8007290:	e7f0      	b.n	8007274 <prvTimerTask+0x8>
	...

08007294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800729e:	f7ff f907 	bl	80064b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f866 	bl	8007378 <prvSampleTimeNow>
 80072ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d130      	bne.n	8007316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <prvProcessTimerOrBlockTask+0x3c>
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d806      	bhi.n	80072d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072c2:	f7ff f903 	bl	80064cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff7f 	bl	80071cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072ce:	e024      	b.n	800731a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072d6:	4b13      	ldr	r3, [pc, #76]	@ (8007324 <prvProcessTimerOrBlockTask+0x90>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <prvProcessTimerOrBlockTask+0x50>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <prvProcessTimerOrBlockTask+0x52>
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <prvProcessTimerOrBlockTask+0x94>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	4619      	mov	r1, r3
 80072f6:	f7fe fe55 	bl	8005fa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072fa:	f7ff f8e7 	bl	80064cc <xTaskResumeAll>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007304:	4b09      	ldr	r3, [pc, #36]	@ (800732c <prvProcessTimerOrBlockTask+0x98>)
 8007306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
}
 8007314:	e001      	b.n	800731a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007316:	f7ff f8d9 	bl	80064cc <xTaskResumeAll>
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200014a4 	.word	0x200014a4
 8007328:	200014a8 	.word	0x200014a8
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007338:	4b0e      	ldr	r3, [pc, #56]	@ (8007374 <prvGetNextExpireTime+0x44>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <prvGetNextExpireTime+0x16>
 8007342:	2201      	movs	r2, #1
 8007344:	e000      	b.n	8007348 <prvGetNextExpireTime+0x18>
 8007346:	2200      	movs	r2, #0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007354:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <prvGetNextExpireTime+0x44>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	e001      	b.n	8007364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	200014a0 	.word	0x200014a0

08007378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007380:	f7ff f944 	bl	800660c <xTaskGetTickCount>
 8007384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007386:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <prvSampleTimeNow+0x3c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d205      	bcs.n	800739c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007390:	f000 f940 	bl	8007614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e002      	b.n	80073a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073a2:	4a04      	ldr	r2, [pc, #16]	@ (80073b4 <prvSampleTimeNow+0x3c>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073a8:	68fb      	ldr	r3, [r7, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200014b0 	.word	0x200014b0

080073b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d812      	bhi.n	8007404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e01b      	b.n	800742a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073f2:	4b10      	ldr	r3, [pc, #64]	@ (8007434 <prvInsertTimerInActiveList+0x7c>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7fd fe58 	bl	80050b2 <vListInsert>
 8007402:	e012      	b.n	800742a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d206      	bcs.n	800741a <prvInsertTimerInActiveList+0x62>
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d302      	bcc.n	800741a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e007      	b.n	800742a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800741a:	4b07      	ldr	r3, [pc, #28]	@ (8007438 <prvInsertTimerInActiveList+0x80>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fd fe44 	bl	80050b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800742a:	697b      	ldr	r3, [r7, #20]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	200014a4 	.word	0x200014a4
 8007438:	200014a0 	.word	0x200014a0

0800743c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08e      	sub	sp, #56	@ 0x38
 8007440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007442:	e0d4      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	da1b      	bge.n	8007482 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	3304      	adds	r3, #4
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007478:	6850      	ldr	r0, [r2, #4]
 800747a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747c:	6892      	ldr	r2, [r2, #8]
 800747e:	4611      	mov	r1, r2
 8007480:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f2c0 80b2 	blt.w	80075ee <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	3304      	adds	r3, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f7fd fe42 	bl	8005124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074a0:	463b      	mov	r3, r7
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff ff68 	bl	8007378 <prvSampleTimeNow>
 80074a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	f200 809b 	bhi.w	80075e8 <prvProcessReceivedCommands+0x1ac>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <prvProcessReceivedCommands+0x7c>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	0800755b 	.word	0x0800755b
 80074c8:	0800756f 	.word	0x0800756f
 80074cc:	080075bf 	.word	0x080075bf
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074e1 	.word	0x080074e1
 80074d8:	0800755b 	.word	0x0800755b
 80074dc:	0800756f 	.word	0x0800756f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	18d1      	adds	r1, r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007500:	f7ff ff5a 	bl	80073b8 <prvInsertTimerInActiveList>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d070      	beq.n	80075ec <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d065      	beq.n	80075ec <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	441a      	add	r2, r3
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2300      	movs	r3, #0
 800752e:	2100      	movs	r1, #0
 8007530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007532:	f7ff fdfb 	bl	800712c <xTimerGenericCommand>
 8007536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d156      	bne.n	80075ec <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	b672      	cpsid	i
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	b662      	cpsie	i
 8007552:	61bb      	str	r3, [r7, #24]
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	e7fd      	b.n	8007556 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800756c:	e03f      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	b672      	cpsid	i
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	b662      	cpsie	i
 80075a2:	617b      	str	r3, [r7, #20]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	18d1      	adds	r1, r2, r3
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b8:	f7ff fefe 	bl	80073b8 <prvInsertTimerInActiveList>
					break;
 80075bc:	e017      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80075cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ce:	f000 fbd1 	bl	8007d74 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075d2:	e00c      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075e6:	e002      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <prvProcessReceivedCommands+0x1b2>
					break;
 80075ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ee:	4b08      	ldr	r3, [pc, #32]	@ (8007610 <prvProcessReceivedCommands+0x1d4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	1d39      	adds	r1, r7, #4
 80075f4:	2200      	movs	r2, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe f982 	bl	8005900 <xQueueReceive>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f af20 	bne.w	8007444 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	3730      	adds	r7, #48	@ 0x30
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200014a8 	.word	0x200014a8

08007614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761a:	e04b      	b.n	80076b4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800761c:	4b2f      	ldr	r3, [pc, #188]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	4b2d      	ldr	r3, [pc, #180]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fd fd75 	bl	8005124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d031      	beq.n	80076b4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d90e      	bls.n	8007680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800766e:	4b1b      	ldr	r3, [pc, #108]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fd fd1a 	bl	80050b2 <vListInsert>
 800767e:	e019      	b.n	80076b4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007680:	2300      	movs	r3, #0
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fd4e 	bl	800712c <xTimerGenericCommand>
 8007690:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10d      	bne.n	80076b4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	603b      	str	r3, [r7, #0]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076b4:	4b09      	ldr	r3, [pc, #36]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1ae      	bne.n	800761c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076be:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <prvSwitchTimerLists+0xcc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <prvSwitchTimerLists+0xc8>)
 80076ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076cc:	4a04      	ldr	r2, [pc, #16]	@ (80076e0 <prvSwitchTimerLists+0xcc>)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6013      	str	r3, [r2, #0]
}
 80076d2:	bf00      	nop
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200014a0 	.word	0x200014a0
 80076e0:	200014a4 	.word	0x200014a4

080076e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076ea:	f000 f947 	bl	800797c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ee:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d120      	bne.n	8007738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076f6:	4814      	ldr	r0, [pc, #80]	@ (8007748 <prvCheckForValidListAndQueue+0x64>)
 80076f8:	f7fd fc8a 	bl	8005010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076fc:	4813      	ldr	r0, [pc, #76]	@ (800774c <prvCheckForValidListAndQueue+0x68>)
 80076fe:	f7fd fc87 	bl	8005010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007702:	4b13      	ldr	r3, [pc, #76]	@ (8007750 <prvCheckForValidListAndQueue+0x6c>)
 8007704:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <prvCheckForValidListAndQueue+0x64>)
 8007706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007708:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <prvCheckForValidListAndQueue+0x70>)
 800770a:	4a10      	ldr	r2, [pc, #64]	@ (800774c <prvCheckForValidListAndQueue+0x68>)
 800770c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770e:	2300      	movs	r3, #0
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4b11      	ldr	r3, [pc, #68]	@ (8007758 <prvCheckForValidListAndQueue+0x74>)
 8007714:	4a11      	ldr	r2, [pc, #68]	@ (800775c <prvCheckForValidListAndQueue+0x78>)
 8007716:	2110      	movs	r1, #16
 8007718:	200a      	movs	r0, #10
 800771a:	f7fd fd99 	bl	8005250 <xQueueGenericCreateStatic>
 800771e:	4603      	mov	r3, r0
 8007720:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 8007722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007724:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <prvCheckForValidListAndQueue+0x60>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	490b      	ldr	r1, [pc, #44]	@ (8007760 <prvCheckForValidListAndQueue+0x7c>)
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fc0c 	bl	8005f50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007738:	f000 f956 	bl	80079e8 <vPortExitCritical>
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	200014a8 	.word	0x200014a8
 8007748:	20001478 	.word	0x20001478
 800774c:	2000148c 	.word	0x2000148c
 8007750:	200014a0 	.word	0x200014a0
 8007754:	200014a4 	.word	0x200014a4
 8007758:	20001554 	.word	0x20001554
 800775c:	200014b4 	.word	0x200014b4
 8007760:	08008a08 	.word	0x08008a08

08007764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3b04      	subs	r3, #4
 8007774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800777c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b04      	subs	r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f023 0201 	bic.w	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b04      	subs	r3, #4
 8007792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007794:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <pxPortInitialiseStack+0x64>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b14      	subs	r3, #20
 800779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f06f 0202 	mvn.w	r2, #2
 80077b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3b20      	subs	r3, #32
 80077b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	080077cd 	.word	0x080077cd

080077cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077d6:	4b15      	ldr	r3, [pc, #84]	@ (800782c <prvTaskExitError+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d00d      	beq.n	80077fc <prvTaskExitError+0x30>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <prvTaskExitError+0x2c>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007800:	b672      	cpsid	i
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	b662      	cpsie	i
 8007810:	60bb      	str	r3, [r7, #8]
}
 8007812:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007814:	bf00      	nop
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0fc      	beq.n	8007816 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	2000000c 	.word	0x2000000c

08007830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <pxCurrentTCBConst2>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	f380 8809 	msr	PSP, r0
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8811 	msr	BASEPRI, r0
 800784a:	4770      	bx	lr
 800784c:	f3af 8000 	nop.w

08007850 <pxCurrentTCBConst2>:
 8007850:	20000f78 	.word	0x20000f78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop

08007858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007858:	4808      	ldr	r0, [pc, #32]	@ (800787c <prvPortStartFirstTask+0x24>)
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f380 8808 	msr	MSP, r0
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8814 	msr	CONTROL, r0
 800786a:	b662      	cpsie	i
 800786c:	b661      	cpsie	f
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	df00      	svc	0
 8007878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800787a:	bf00      	nop
 800787c:	e000ed08 	.word	0xe000ed08

08007880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007886:	4b37      	ldr	r3, [pc, #220]	@ (8007964 <xPortStartScheduler+0xe4>)
 8007888:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	22ff      	movs	r2, #255	@ 0xff
 8007896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007968 <xPortStartScheduler+0xe8>)
 80078ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ae:	4b2f      	ldr	r3, [pc, #188]	@ (800796c <xPortStartScheduler+0xec>)
 80078b0:	2207      	movs	r2, #7
 80078b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078b4:	e009      	b.n	80078ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078b6:	4b2d      	ldr	r3, [pc, #180]	@ (800796c <xPortStartScheduler+0xec>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	4a2b      	ldr	r2, [pc, #172]	@ (800796c <xPortStartScheduler+0xec>)
 80078be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d2:	2b80      	cmp	r3, #128	@ 0x80
 80078d4:	d0ef      	beq.n	80078b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078d6:	4b25      	ldr	r3, [pc, #148]	@ (800796c <xPortStartScheduler+0xec>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1c3 0307 	rsb	r3, r3, #7
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d00d      	beq.n	80078fe <xPortStartScheduler+0x7e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	b672      	cpsid	i
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	b662      	cpsie	i
 80078f6:	60bb      	str	r3, [r7, #8]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078fe:	4b1b      	ldr	r3, [pc, #108]	@ (800796c <xPortStartScheduler+0xec>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	4a19      	ldr	r2, [pc, #100]	@ (800796c <xPortStartScheduler+0xec>)
 8007906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007908:	4b18      	ldr	r3, [pc, #96]	@ (800796c <xPortStartScheduler+0xec>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007910:	4a16      	ldr	r2, [pc, #88]	@ (800796c <xPortStartScheduler+0xec>)
 8007912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800791c:	4b14      	ldr	r3, [pc, #80]	@ (8007970 <xPortStartScheduler+0xf0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a13      	ldr	r2, [pc, #76]	@ (8007970 <xPortStartScheduler+0xf0>)
 8007922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007928:	4b11      	ldr	r3, [pc, #68]	@ (8007970 <xPortStartScheduler+0xf0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a10      	ldr	r2, [pc, #64]	@ (8007970 <xPortStartScheduler+0xf0>)
 800792e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007934:	f000 f8dc 	bl	8007af0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007938:	4b0e      	ldr	r3, [pc, #56]	@ (8007974 <xPortStartScheduler+0xf4>)
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800793e:	f000 f8fb 	bl	8007b38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <xPortStartScheduler+0xf8>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a0c      	ldr	r2, [pc, #48]	@ (8007978 <xPortStartScheduler+0xf8>)
 8007948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800794c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800794e:	f7ff ff83 	bl	8007858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007952:	f7fe ff27 	bl	80067a4 <vTaskSwitchContext>
	prvTaskExitError();
 8007956:	f7ff ff39 	bl	80077cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	e000e400 	.word	0xe000e400
 8007968:	200015a4 	.word	0x200015a4
 800796c:	200015a8 	.word	0x200015a8
 8007970:	e000ed20 	.word	0xe000ed20
 8007974:	2000000c 	.word	0x2000000c
 8007978:	e000ef34 	.word	0xe000ef34

0800797c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	b672      	cpsid	i
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	b662      	cpsie	i
 8007996:	607b      	str	r3, [r7, #4]
}
 8007998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800799a:	4b11      	ldr	r3, [pc, #68]	@ (80079e0 <vPortEnterCritical+0x64>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	4a0f      	ldr	r2, [pc, #60]	@ (80079e0 <vPortEnterCritical+0x64>)
 80079a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079a4:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <vPortEnterCritical+0x64>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d112      	bne.n	80079d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079ac:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <vPortEnterCritical+0x68>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <vPortEnterCritical+0x56>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	b672      	cpsid	i
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	b662      	cpsie	i
 80079ca:	603b      	str	r3, [r7, #0]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortEnterCritical+0x52>
	}
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	2000000c 	.word	0x2000000c
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ee:	4b13      	ldr	r3, [pc, #76]	@ (8007a3c <vPortExitCritical+0x54>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <vPortExitCritical+0x2a>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	b672      	cpsid	i
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	b662      	cpsie	i
 8007a0a:	607b      	str	r3, [r7, #4]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007a12:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <vPortExitCritical+0x54>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	4a08      	ldr	r2, [pc, #32]	@ (8007a3c <vPortExitCritical+0x54>)
 8007a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a1c:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <vPortExitCritical+0x54>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <vPortExitCritical+0x48>
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a40:	f3ef 8009 	mrs	r0, PSP
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <pxCurrentTCBConst>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	f01e 0f10 	tst.w	lr, #16
 8007a50:	bf08      	it	eq
 8007a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	6010      	str	r0, [r2, #0]
 8007a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a64:	b672      	cpsid	i
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	b662      	cpsie	i
 8007a74:	f7fe fe96 	bl	80067a4 <vTaskSwitchContext>
 8007a78:	f04f 0000 	mov.w	r0, #0
 8007a7c:	f380 8811 	msr	BASEPRI, r0
 8007a80:	bc09      	pop	{r0, r3}
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	6808      	ldr	r0, [r1, #0]
 8007a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	f01e 0f10 	tst.w	lr, #16
 8007a8e:	bf08      	it	eq
 8007a90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a94:	f380 8809 	msr	PSP, r0
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <pxCurrentTCBConst>:
 8007aa0:	20000f78 	.word	0x20000f78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab2:	b672      	cpsid	i
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	b662      	cpsie	i
 8007ac2:	607b      	str	r3, [r7, #4]
}
 8007ac4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ac6:	f7fe fdb1 	bl	800662c <xTaskIncrementTick>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ad0:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <SysTick_Handler+0x44>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	f383 8811 	msr	BASEPRI, r3
}
 8007ae2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007af4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <vPortSetupTimerInterrupt+0x34>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007afa:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <vPortSetupTimerInterrupt+0x38>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b00:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <vPortSetupTimerInterrupt+0x3c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a0a      	ldr	r2, [pc, #40]	@ (8007b30 <vPortSetupTimerInterrupt+0x40>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	099b      	lsrs	r3, r3, #6
 8007b0c:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <vPortSetupTimerInterrupt+0x44>)
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b12:	4b04      	ldr	r3, [pc, #16]	@ (8007b24 <vPortSetupTimerInterrupt+0x34>)
 8007b14:	2207      	movs	r2, #7
 8007b16:	601a      	str	r2, [r3, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	e000e010 	.word	0xe000e010
 8007b28:	e000e018 	.word	0xe000e018
 8007b2c:	20000000 	.word	0x20000000
 8007b30:	10624dd3 	.word	0x10624dd3
 8007b34:	e000e014 	.word	0xe000e014

08007b38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b48 <vPortEnableVFP+0x10>
 8007b3c:	6801      	ldr	r1, [r0, #0]
 8007b3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b42:	6001      	str	r1, [r0, #0]
 8007b44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b46:	bf00      	nop
 8007b48:	e000ed88 	.word	0xe000ed88

08007b4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b52:	f3ef 8305 	mrs	r3, IPSR
 8007b56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	d917      	bls.n	8007b8e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc8 <vPortValidateInterruptPriority+0x7c>)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b68:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <vPortValidateInterruptPriority+0x80>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	7afa      	ldrb	r2, [r7, #11]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d20d      	bcs.n	8007b8e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	b672      	cpsid	i
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	b662      	cpsie	i
 8007b86:	607b      	str	r3, [r7, #4]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b8e:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <vPortValidateInterruptPriority+0x84>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b96:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <vPortValidateInterruptPriority+0x88>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d90d      	bls.n	8007bba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	b672      	cpsid	i
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	b662      	cpsie	i
 8007bb2:	603b      	str	r3, [r7, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <vPortValidateInterruptPriority+0x6a>
	}
 8007bba:	bf00      	nop
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	e000e3f0 	.word	0xe000e3f0
 8007bcc:	200015a4 	.word	0x200015a4
 8007bd0:	e000ed0c 	.word	0xe000ed0c
 8007bd4:	200015a8 	.word	0x200015a8

08007bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007be4:	f7fe fc64 	bl	80064b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007be8:	4b5d      	ldr	r3, [pc, #372]	@ (8007d60 <pvPortMalloc+0x188>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bf0:	f000 f920 	bl	8007e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d64 <pvPortMalloc+0x18c>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 8094 	bne.w	8007d2a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d020      	beq.n	8007c4a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007c08:	2208      	movs	r2, #8
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d017      	beq.n	8007c4a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f023 0307 	bic.w	r3, r3, #7
 8007c20:	3308      	adds	r3, #8
 8007c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00d      	beq.n	8007c4a <pvPortMalloc+0x72>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	617b      	str	r3, [r7, #20]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d06c      	beq.n	8007d2a <pvPortMalloc+0x152>
 8007c50:	4b45      	ldr	r3, [pc, #276]	@ (8007d68 <pvPortMalloc+0x190>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d867      	bhi.n	8007d2a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c5a:	4b44      	ldr	r3, [pc, #272]	@ (8007d6c <pvPortMalloc+0x194>)
 8007c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c5e:	4b43      	ldr	r3, [pc, #268]	@ (8007d6c <pvPortMalloc+0x194>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c64:	e004      	b.n	8007c70 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d903      	bls.n	8007c82 <pvPortMalloc+0xaa>
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f1      	bne.n	8007c66 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c82:	4b37      	ldr	r3, [pc, #220]	@ (8007d60 <pvPortMalloc+0x188>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d04e      	beq.n	8007d2a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2208      	movs	r2, #8
 8007c92:	4413      	add	r3, r2
 8007c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	1ad2      	subs	r2, r2, r3
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d922      	bls.n	8007cf4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00d      	beq.n	8007cdc <pvPortMalloc+0x104>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	b672      	cpsid	i
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	b662      	cpsie	i
 8007cd4:	613b      	str	r3, [r7, #16]
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	1ad2      	subs	r2, r2, r3
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cee:	69b8      	ldr	r0, [r7, #24]
 8007cf0:	f000 f902 	bl	8007ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d68 <pvPortMalloc+0x190>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007d68 <pvPortMalloc+0x190>)
 8007d00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d02:	4b19      	ldr	r3, [pc, #100]	@ (8007d68 <pvPortMalloc+0x190>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b1a      	ldr	r3, [pc, #104]	@ (8007d70 <pvPortMalloc+0x198>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d203      	bcs.n	8007d16 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d0e:	4b16      	ldr	r3, [pc, #88]	@ (8007d68 <pvPortMalloc+0x190>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a17      	ldr	r2, [pc, #92]	@ (8007d70 <pvPortMalloc+0x198>)
 8007d14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <pvPortMalloc+0x18c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d2a:	f7fe fbcf 	bl	80064cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00d      	beq.n	8007d54 <pvPortMalloc+0x17c>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	60fb      	str	r3, [r7, #12]
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	e7fd      	b.n	8007d50 <pvPortMalloc+0x178>
	return pvReturn;
 8007d54:	69fb      	ldr	r3, [r7, #28]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	@ 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	200051b4 	.word	0x200051b4
 8007d64:	200051c0 	.word	0x200051c0
 8007d68:	200051b8 	.word	0x200051b8
 8007d6c:	200051ac 	.word	0x200051ac
 8007d70:	200051bc 	.word	0x200051bc

08007d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d04e      	beq.n	8007e24 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d86:	2308      	movs	r3, #8
 8007d88:	425b      	negs	r3, r3
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	4b24      	ldr	r3, [pc, #144]	@ (8007e2c <vPortFree+0xb8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10d      	bne.n	8007dbe <vPortFree+0x4a>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	60fb      	str	r3, [r7, #12]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00d      	beq.n	8007de2 <vPortFree+0x6e>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	b672      	cpsid	i
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	b662      	cpsie	i
 8007dda:	60bb      	str	r3, [r7, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	4b11      	ldr	r3, [pc, #68]	@ (8007e2c <vPortFree+0xb8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d019      	beq.n	8007e24 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d115      	bne.n	8007e24 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <vPortFree+0xb8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	401a      	ands	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e08:	f7fe fb52 	bl	80064b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	4b07      	ldr	r3, [pc, #28]	@ (8007e30 <vPortFree+0xbc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	4a06      	ldr	r2, [pc, #24]	@ (8007e30 <vPortFree+0xbc>)
 8007e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f000 f86c 	bl	8007ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e20:	f7fe fb54 	bl	80064cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e24:	bf00      	nop
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	200051c0 	.word	0x200051c0
 8007e30:	200051b8 	.word	0x200051b8

08007e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e40:	4b27      	ldr	r3, [pc, #156]	@ (8007ee0 <prvHeapInit+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3307      	adds	r3, #7
 8007e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee0 <prvHeapInit+0xac>)
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <prvHeapInit+0xb0>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e72:	4b1c      	ldr	r3, [pc, #112]	@ (8007ee4 <prvHeapInit+0xb0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e80:	2208      	movs	r2, #8
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <prvHeapInit+0xb4>)
 8007e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e96:	4b14      	ldr	r3, [pc, #80]	@ (8007ee8 <prvHeapInit+0xb4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <prvHeapInit+0xb4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <prvHeapInit+0xb4>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <prvHeapInit+0xb8>)
 8007ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a09      	ldr	r2, [pc, #36]	@ (8007ef0 <prvHeapInit+0xbc>)
 8007eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ecc:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <prvHeapInit+0xc0>)
 8007ece:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	200015ac 	.word	0x200015ac
 8007ee4:	200051ac 	.word	0x200051ac
 8007ee8:	200051b4 	.word	0x200051b4
 8007eec:	200051bc 	.word	0x200051bc
 8007ef0:	200051b8 	.word	0x200051b8
 8007ef4:	200051c0 	.word	0x200051c0

08007ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f00:	4b28      	ldr	r3, [pc, #160]	@ (8007fa4 <prvInsertBlockIntoFreeList+0xac>)
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <prvInsertBlockIntoFreeList+0x14>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d8f7      	bhi.n	8007f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	4413      	add	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d108      	bne.n	8007f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	441a      	add	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	441a      	add	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d118      	bne.n	8007f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b15      	ldr	r3, [pc, #84]	@ (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d00d      	beq.n	8007f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e008      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f76:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e003      	b.n	8007f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d002      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200051ac 	.word	0x200051ac
 8007fa8:	200051b4 	.word	0x200051b4

08007fac <sniprintf>:
 8007fac:	b40c      	push	{r2, r3}
 8007fae:	b530      	push	{r4, r5, lr}
 8007fb0:	4b18      	ldr	r3, [pc, #96]	@ (8008014 <sniprintf+0x68>)
 8007fb2:	1e0c      	subs	r4, r1, #0
 8007fb4:	681d      	ldr	r5, [r3, #0]
 8007fb6:	b09d      	sub	sp, #116	@ 0x74
 8007fb8:	da08      	bge.n	8007fcc <sniprintf+0x20>
 8007fba:	238b      	movs	r3, #139	@ 0x8b
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	b01d      	add	sp, #116	@ 0x74
 8007fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fc8:	b002      	add	sp, #8
 8007fca:	4770      	bx	lr
 8007fcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007fda:	bf14      	ite	ne
 8007fdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fe0:	4623      	moveq	r3, r4
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fea:	9002      	str	r0, [sp, #8]
 8007fec:	9006      	str	r0, [sp, #24]
 8007fee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ff2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ff4:	ab21      	add	r3, sp, #132	@ 0x84
 8007ff6:	a902      	add	r1, sp, #8
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	f000 f9a2 	bl	8008344 <_svfiprintf_r>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	bfbc      	itt	lt
 8008004:	238b      	movlt	r3, #139	@ 0x8b
 8008006:	602b      	strlt	r3, [r5, #0]
 8008008:	2c00      	cmp	r4, #0
 800800a:	d0da      	beq.n	8007fc2 <sniprintf+0x16>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e7d6      	b.n	8007fc2 <sniprintf+0x16>
 8008014:	20000010 	.word	0x20000010

08008018 <memset>:
 8008018:	4402      	add	r2, r0
 800801a:	4603      	mov	r3, r0
 800801c:	4293      	cmp	r3, r2
 800801e:	d100      	bne.n	8008022 <memset+0xa>
 8008020:	4770      	bx	lr
 8008022:	f803 1b01 	strb.w	r1, [r3], #1
 8008026:	e7f9      	b.n	800801c <memset+0x4>

08008028 <__errno>:
 8008028:	4b01      	ldr	r3, [pc, #4]	@ (8008030 <__errno+0x8>)
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000010 	.word	0x20000010

08008034 <__libc_init_array>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	4d0d      	ldr	r5, [pc, #52]	@ (800806c <__libc_init_array+0x38>)
 8008038:	4c0d      	ldr	r4, [pc, #52]	@ (8008070 <__libc_init_array+0x3c>)
 800803a:	1b64      	subs	r4, r4, r5
 800803c:	10a4      	asrs	r4, r4, #2
 800803e:	2600      	movs	r6, #0
 8008040:	42a6      	cmp	r6, r4
 8008042:	d109      	bne.n	8008058 <__libc_init_array+0x24>
 8008044:	4d0b      	ldr	r5, [pc, #44]	@ (8008074 <__libc_init_array+0x40>)
 8008046:	4c0c      	ldr	r4, [pc, #48]	@ (8008078 <__libc_init_array+0x44>)
 8008048:	f000 fc64 	bl	8008914 <_init>
 800804c:	1b64      	subs	r4, r4, r5
 800804e:	10a4      	asrs	r4, r4, #2
 8008050:	2600      	movs	r6, #0
 8008052:	42a6      	cmp	r6, r4
 8008054:	d105      	bne.n	8008062 <__libc_init_array+0x2e>
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	f855 3b04 	ldr.w	r3, [r5], #4
 800805c:	4798      	blx	r3
 800805e:	3601      	adds	r6, #1
 8008060:	e7ee      	b.n	8008040 <__libc_init_array+0xc>
 8008062:	f855 3b04 	ldr.w	r3, [r5], #4
 8008066:	4798      	blx	r3
 8008068:	3601      	adds	r6, #1
 800806a:	e7f2      	b.n	8008052 <__libc_init_array+0x1e>
 800806c:	08008ae0 	.word	0x08008ae0
 8008070:	08008ae0 	.word	0x08008ae0
 8008074:	08008ae0 	.word	0x08008ae0
 8008078:	08008ae4 	.word	0x08008ae4

0800807c <__retarget_lock_acquire_recursive>:
 800807c:	4770      	bx	lr

0800807e <__retarget_lock_release_recursive>:
 800807e:	4770      	bx	lr

08008080 <memcpy>:
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	f100 33ff 	add.w	r3, r0, #4294967295
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	4770      	bx	lr
 800808c:	b510      	push	{r4, lr}
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008096:	4291      	cmp	r1, r2
 8008098:	d1f9      	bne.n	800808e <memcpy+0xe>
 800809a:	bd10      	pop	{r4, pc}

0800809c <_free_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4605      	mov	r5, r0
 80080a0:	2900      	cmp	r1, #0
 80080a2:	d041      	beq.n	8008128 <_free_r+0x8c>
 80080a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a8:	1f0c      	subs	r4, r1, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bfb8      	it	lt
 80080ae:	18e4      	addlt	r4, r4, r3
 80080b0:	f000 f8e0 	bl	8008274 <__malloc_lock>
 80080b4:	4a1d      	ldr	r2, [pc, #116]	@ (800812c <_free_r+0x90>)
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	b933      	cbnz	r3, 80080c8 <_free_r+0x2c>
 80080ba:	6063      	str	r3, [r4, #4]
 80080bc:	6014      	str	r4, [r2, #0]
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c4:	f000 b8dc 	b.w	8008280 <__malloc_unlock>
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d908      	bls.n	80080de <_free_r+0x42>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	1821      	adds	r1, r4, r0
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf01      	itttt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	1809      	addeq	r1, r1, r0
 80080da:	6021      	streq	r1, [r4, #0]
 80080dc:	e7ed      	b.n	80080ba <_free_r+0x1e>
 80080de:	461a      	mov	r2, r3
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b10b      	cbz	r3, 80080e8 <_free_r+0x4c>
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d9fa      	bls.n	80080de <_free_r+0x42>
 80080e8:	6811      	ldr	r1, [r2, #0]
 80080ea:	1850      	adds	r0, r2, r1
 80080ec:	42a0      	cmp	r0, r4
 80080ee:	d10b      	bne.n	8008108 <_free_r+0x6c>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	4401      	add	r1, r0
 80080f4:	1850      	adds	r0, r2, r1
 80080f6:	4283      	cmp	r3, r0
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	d1e0      	bne.n	80080be <_free_r+0x22>
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	6053      	str	r3, [r2, #4]
 8008102:	4408      	add	r0, r1
 8008104:	6010      	str	r0, [r2, #0]
 8008106:	e7da      	b.n	80080be <_free_r+0x22>
 8008108:	d902      	bls.n	8008110 <_free_r+0x74>
 800810a:	230c      	movs	r3, #12
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	e7d6      	b.n	80080be <_free_r+0x22>
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	1821      	adds	r1, r4, r0
 8008114:	428b      	cmp	r3, r1
 8008116:	bf04      	itt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	bf04      	itt	eq
 8008120:	1809      	addeq	r1, r1, r0
 8008122:	6021      	streq	r1, [r4, #0]
 8008124:	6054      	str	r4, [r2, #4]
 8008126:	e7ca      	b.n	80080be <_free_r+0x22>
 8008128:	bd38      	pop	{r3, r4, r5, pc}
 800812a:	bf00      	nop
 800812c:	20005308 	.word	0x20005308

08008130 <sbrk_aligned>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	4e0f      	ldr	r6, [pc, #60]	@ (8008170 <sbrk_aligned+0x40>)
 8008134:	460c      	mov	r4, r1
 8008136:	6831      	ldr	r1, [r6, #0]
 8008138:	4605      	mov	r5, r0
 800813a:	b911      	cbnz	r1, 8008142 <sbrk_aligned+0x12>
 800813c:	f000 fba4 	bl	8008888 <_sbrk_r>
 8008140:	6030      	str	r0, [r6, #0]
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 fb9f 	bl	8008888 <_sbrk_r>
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	d103      	bne.n	8008156 <sbrk_aligned+0x26>
 800814e:	f04f 34ff 	mov.w	r4, #4294967295
 8008152:	4620      	mov	r0, r4
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	1cc4      	adds	r4, r0, #3
 8008158:	f024 0403 	bic.w	r4, r4, #3
 800815c:	42a0      	cmp	r0, r4
 800815e:	d0f8      	beq.n	8008152 <sbrk_aligned+0x22>
 8008160:	1a21      	subs	r1, r4, r0
 8008162:	4628      	mov	r0, r5
 8008164:	f000 fb90 	bl	8008888 <_sbrk_r>
 8008168:	3001      	adds	r0, #1
 800816a:	d1f2      	bne.n	8008152 <sbrk_aligned+0x22>
 800816c:	e7ef      	b.n	800814e <sbrk_aligned+0x1e>
 800816e:	bf00      	nop
 8008170:	20005304 	.word	0x20005304

08008174 <_malloc_r>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	1ccd      	adds	r5, r1, #3
 800817a:	f025 0503 	bic.w	r5, r5, #3
 800817e:	3508      	adds	r5, #8
 8008180:	2d0c      	cmp	r5, #12
 8008182:	bf38      	it	cc
 8008184:	250c      	movcc	r5, #12
 8008186:	2d00      	cmp	r5, #0
 8008188:	4606      	mov	r6, r0
 800818a:	db01      	blt.n	8008190 <_malloc_r+0x1c>
 800818c:	42a9      	cmp	r1, r5
 800818e:	d904      	bls.n	800819a <_malloc_r+0x26>
 8008190:	230c      	movs	r3, #12
 8008192:	6033      	str	r3, [r6, #0]
 8008194:	2000      	movs	r0, #0
 8008196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008270 <_malloc_r+0xfc>
 800819e:	f000 f869 	bl	8008274 <__malloc_lock>
 80081a2:	f8d8 3000 	ldr.w	r3, [r8]
 80081a6:	461c      	mov	r4, r3
 80081a8:	bb44      	cbnz	r4, 80081fc <_malloc_r+0x88>
 80081aa:	4629      	mov	r1, r5
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7ff ffbf 	bl	8008130 <sbrk_aligned>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	4604      	mov	r4, r0
 80081b6:	d158      	bne.n	800826a <_malloc_r+0xf6>
 80081b8:	f8d8 4000 	ldr.w	r4, [r8]
 80081bc:	4627      	mov	r7, r4
 80081be:	2f00      	cmp	r7, #0
 80081c0:	d143      	bne.n	800824a <_malloc_r+0xd6>
 80081c2:	2c00      	cmp	r4, #0
 80081c4:	d04b      	beq.n	800825e <_malloc_r+0xea>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	4639      	mov	r1, r7
 80081ca:	4630      	mov	r0, r6
 80081cc:	eb04 0903 	add.w	r9, r4, r3
 80081d0:	f000 fb5a 	bl	8008888 <_sbrk_r>
 80081d4:	4581      	cmp	r9, r0
 80081d6:	d142      	bne.n	800825e <_malloc_r+0xea>
 80081d8:	6821      	ldr	r1, [r4, #0]
 80081da:	1a6d      	subs	r5, r5, r1
 80081dc:	4629      	mov	r1, r5
 80081de:	4630      	mov	r0, r6
 80081e0:	f7ff ffa6 	bl	8008130 <sbrk_aligned>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d03a      	beq.n	800825e <_malloc_r+0xea>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	442b      	add	r3, r5
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	f8d8 3000 	ldr.w	r3, [r8]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	bb62      	cbnz	r2, 8008250 <_malloc_r+0xdc>
 80081f6:	f8c8 7000 	str.w	r7, [r8]
 80081fa:	e00f      	b.n	800821c <_malloc_r+0xa8>
 80081fc:	6822      	ldr	r2, [r4, #0]
 80081fe:	1b52      	subs	r2, r2, r5
 8008200:	d420      	bmi.n	8008244 <_malloc_r+0xd0>
 8008202:	2a0b      	cmp	r2, #11
 8008204:	d917      	bls.n	8008236 <_malloc_r+0xc2>
 8008206:	1961      	adds	r1, r4, r5
 8008208:	42a3      	cmp	r3, r4
 800820a:	6025      	str	r5, [r4, #0]
 800820c:	bf18      	it	ne
 800820e:	6059      	strne	r1, [r3, #4]
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	bf08      	it	eq
 8008214:	f8c8 1000 	streq.w	r1, [r8]
 8008218:	5162      	str	r2, [r4, r5]
 800821a:	604b      	str	r3, [r1, #4]
 800821c:	4630      	mov	r0, r6
 800821e:	f000 f82f 	bl	8008280 <__malloc_unlock>
 8008222:	f104 000b 	add.w	r0, r4, #11
 8008226:	1d23      	adds	r3, r4, #4
 8008228:	f020 0007 	bic.w	r0, r0, #7
 800822c:	1ac2      	subs	r2, r0, r3
 800822e:	bf1c      	itt	ne
 8008230:	1a1b      	subne	r3, r3, r0
 8008232:	50a3      	strne	r3, [r4, r2]
 8008234:	e7af      	b.n	8008196 <_malloc_r+0x22>
 8008236:	6862      	ldr	r2, [r4, #4]
 8008238:	42a3      	cmp	r3, r4
 800823a:	bf0c      	ite	eq
 800823c:	f8c8 2000 	streq.w	r2, [r8]
 8008240:	605a      	strne	r2, [r3, #4]
 8008242:	e7eb      	b.n	800821c <_malloc_r+0xa8>
 8008244:	4623      	mov	r3, r4
 8008246:	6864      	ldr	r4, [r4, #4]
 8008248:	e7ae      	b.n	80081a8 <_malloc_r+0x34>
 800824a:	463c      	mov	r4, r7
 800824c:	687f      	ldr	r7, [r7, #4]
 800824e:	e7b6      	b.n	80081be <_malloc_r+0x4a>
 8008250:	461a      	mov	r2, r3
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	42a3      	cmp	r3, r4
 8008256:	d1fb      	bne.n	8008250 <_malloc_r+0xdc>
 8008258:	2300      	movs	r3, #0
 800825a:	6053      	str	r3, [r2, #4]
 800825c:	e7de      	b.n	800821c <_malloc_r+0xa8>
 800825e:	230c      	movs	r3, #12
 8008260:	6033      	str	r3, [r6, #0]
 8008262:	4630      	mov	r0, r6
 8008264:	f000 f80c 	bl	8008280 <__malloc_unlock>
 8008268:	e794      	b.n	8008194 <_malloc_r+0x20>
 800826a:	6005      	str	r5, [r0, #0]
 800826c:	e7d6      	b.n	800821c <_malloc_r+0xa8>
 800826e:	bf00      	nop
 8008270:	20005308 	.word	0x20005308

08008274 <__malloc_lock>:
 8008274:	4801      	ldr	r0, [pc, #4]	@ (800827c <__malloc_lock+0x8>)
 8008276:	f7ff bf01 	b.w	800807c <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20005300 	.word	0x20005300

08008280 <__malloc_unlock>:
 8008280:	4801      	ldr	r0, [pc, #4]	@ (8008288 <__malloc_unlock+0x8>)
 8008282:	f7ff befc 	b.w	800807e <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20005300 	.word	0x20005300

0800828c <__ssputs_r>:
 800828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	688e      	ldr	r6, [r1, #8]
 8008292:	461f      	mov	r7, r3
 8008294:	42be      	cmp	r6, r7
 8008296:	680b      	ldr	r3, [r1, #0]
 8008298:	4682      	mov	sl, r0
 800829a:	460c      	mov	r4, r1
 800829c:	4690      	mov	r8, r2
 800829e:	d82d      	bhi.n	80082fc <__ssputs_r+0x70>
 80082a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082a8:	d026      	beq.n	80082f8 <__ssputs_r+0x6c>
 80082aa:	6965      	ldr	r5, [r4, #20]
 80082ac:	6909      	ldr	r1, [r1, #16]
 80082ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082b2:	eba3 0901 	sub.w	r9, r3, r1
 80082b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ba:	1c7b      	adds	r3, r7, #1
 80082bc:	444b      	add	r3, r9
 80082be:	106d      	asrs	r5, r5, #1
 80082c0:	429d      	cmp	r5, r3
 80082c2:	bf38      	it	cc
 80082c4:	461d      	movcc	r5, r3
 80082c6:	0553      	lsls	r3, r2, #21
 80082c8:	d527      	bpl.n	800831a <__ssputs_r+0x8e>
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7ff ff52 	bl	8008174 <_malloc_r>
 80082d0:	4606      	mov	r6, r0
 80082d2:	b360      	cbz	r0, 800832e <__ssputs_r+0xa2>
 80082d4:	6921      	ldr	r1, [r4, #16]
 80082d6:	464a      	mov	r2, r9
 80082d8:	f7ff fed2 	bl	8008080 <memcpy>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	6126      	str	r6, [r4, #16]
 80082ea:	6165      	str	r5, [r4, #20]
 80082ec:	444e      	add	r6, r9
 80082ee:	eba5 0509 	sub.w	r5, r5, r9
 80082f2:	6026      	str	r6, [r4, #0]
 80082f4:	60a5      	str	r5, [r4, #8]
 80082f6:	463e      	mov	r6, r7
 80082f8:	42be      	cmp	r6, r7
 80082fa:	d900      	bls.n	80082fe <__ssputs_r+0x72>
 80082fc:	463e      	mov	r6, r7
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	4632      	mov	r2, r6
 8008302:	4641      	mov	r1, r8
 8008304:	f000 faa6 	bl	8008854 <memmove>
 8008308:	68a3      	ldr	r3, [r4, #8]
 800830a:	1b9b      	subs	r3, r3, r6
 800830c:	60a3      	str	r3, [r4, #8]
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	4433      	add	r3, r6
 8008312:	6023      	str	r3, [r4, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	462a      	mov	r2, r5
 800831c:	f000 fac4 	bl	80088a8 <_realloc_r>
 8008320:	4606      	mov	r6, r0
 8008322:	2800      	cmp	r0, #0
 8008324:	d1e0      	bne.n	80082e8 <__ssputs_r+0x5c>
 8008326:	6921      	ldr	r1, [r4, #16]
 8008328:	4650      	mov	r0, sl
 800832a:	f7ff feb7 	bl	800809c <_free_r>
 800832e:	230c      	movs	r3, #12
 8008330:	f8ca 3000 	str.w	r3, [sl]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e7e9      	b.n	8008316 <__ssputs_r+0x8a>
	...

08008344 <_svfiprintf_r>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4698      	mov	r8, r3
 800834a:	898b      	ldrh	r3, [r1, #12]
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	b09d      	sub	sp, #116	@ 0x74
 8008350:	4607      	mov	r7, r0
 8008352:	460d      	mov	r5, r1
 8008354:	4614      	mov	r4, r2
 8008356:	d510      	bpl.n	800837a <_svfiprintf_r+0x36>
 8008358:	690b      	ldr	r3, [r1, #16]
 800835a:	b973      	cbnz	r3, 800837a <_svfiprintf_r+0x36>
 800835c:	2140      	movs	r1, #64	@ 0x40
 800835e:	f7ff ff09 	bl	8008174 <_malloc_r>
 8008362:	6028      	str	r0, [r5, #0]
 8008364:	6128      	str	r0, [r5, #16]
 8008366:	b930      	cbnz	r0, 8008376 <_svfiprintf_r+0x32>
 8008368:	230c      	movs	r3, #12
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	b01d      	add	sp, #116	@ 0x74
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	2340      	movs	r3, #64	@ 0x40
 8008378:	616b      	str	r3, [r5, #20]
 800837a:	2300      	movs	r3, #0
 800837c:	9309      	str	r3, [sp, #36]	@ 0x24
 800837e:	2320      	movs	r3, #32
 8008380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008384:	f8cd 800c 	str.w	r8, [sp, #12]
 8008388:	2330      	movs	r3, #48	@ 0x30
 800838a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008528 <_svfiprintf_r+0x1e4>
 800838e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008392:	f04f 0901 	mov.w	r9, #1
 8008396:	4623      	mov	r3, r4
 8008398:	469a      	mov	sl, r3
 800839a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839e:	b10a      	cbz	r2, 80083a4 <_svfiprintf_r+0x60>
 80083a0:	2a25      	cmp	r2, #37	@ 0x25
 80083a2:	d1f9      	bne.n	8008398 <_svfiprintf_r+0x54>
 80083a4:	ebba 0b04 	subs.w	fp, sl, r4
 80083a8:	d00b      	beq.n	80083c2 <_svfiprintf_r+0x7e>
 80083aa:	465b      	mov	r3, fp
 80083ac:	4622      	mov	r2, r4
 80083ae:	4629      	mov	r1, r5
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ff6b 	bl	800828c <__ssputs_r>
 80083b6:	3001      	adds	r0, #1
 80083b8:	f000 80a7 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083be:	445a      	add	r2, fp
 80083c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c2:	f89a 3000 	ldrb.w	r3, [sl]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 809f 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d6:	f10a 0a01 	add.w	sl, sl, #1
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e4:	4654      	mov	r4, sl
 80083e6:	2205      	movs	r2, #5
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	484e      	ldr	r0, [pc, #312]	@ (8008528 <_svfiprintf_r+0x1e4>)
 80083ee:	f7f7 ff2f 	bl	8000250 <memchr>
 80083f2:	9a04      	ldr	r2, [sp, #16]
 80083f4:	b9d8      	cbnz	r0, 800842e <_svfiprintf_r+0xea>
 80083f6:	06d0      	lsls	r0, r2, #27
 80083f8:	bf44      	itt	mi
 80083fa:	2320      	movmi	r3, #32
 80083fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008400:	0711      	lsls	r1, r2, #28
 8008402:	bf44      	itt	mi
 8008404:	232b      	movmi	r3, #43	@ 0x2b
 8008406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800840a:	f89a 3000 	ldrb.w	r3, [sl]
 800840e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008410:	d015      	beq.n	800843e <_svfiprintf_r+0xfa>
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	4654      	mov	r4, sl
 8008416:	2000      	movs	r0, #0
 8008418:	f04f 0c0a 	mov.w	ip, #10
 800841c:	4621      	mov	r1, r4
 800841e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008422:	3b30      	subs	r3, #48	@ 0x30
 8008424:	2b09      	cmp	r3, #9
 8008426:	d94b      	bls.n	80084c0 <_svfiprintf_r+0x17c>
 8008428:	b1b0      	cbz	r0, 8008458 <_svfiprintf_r+0x114>
 800842a:	9207      	str	r2, [sp, #28]
 800842c:	e014      	b.n	8008458 <_svfiprintf_r+0x114>
 800842e:	eba0 0308 	sub.w	r3, r0, r8
 8008432:	fa09 f303 	lsl.w	r3, r9, r3
 8008436:	4313      	orrs	r3, r2
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	46a2      	mov	sl, r4
 800843c:	e7d2      	b.n	80083e4 <_svfiprintf_r+0xa0>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d19      	adds	r1, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9103      	str	r1, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfbb      	ittet	lt
 800844a:	425b      	neglt	r3, r3
 800844c:	f042 0202 	orrlt.w	r2, r2, #2
 8008450:	9307      	strge	r3, [sp, #28]
 8008452:	9307      	strlt	r3, [sp, #28]
 8008454:	bfb8      	it	lt
 8008456:	9204      	strlt	r2, [sp, #16]
 8008458:	7823      	ldrb	r3, [r4, #0]
 800845a:	2b2e      	cmp	r3, #46	@ 0x2e
 800845c:	d10a      	bne.n	8008474 <_svfiprintf_r+0x130>
 800845e:	7863      	ldrb	r3, [r4, #1]
 8008460:	2b2a      	cmp	r3, #42	@ 0x2a
 8008462:	d132      	bne.n	80084ca <_svfiprintf_r+0x186>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	1d1a      	adds	r2, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	9203      	str	r2, [sp, #12]
 800846c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008470:	3402      	adds	r4, #2
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008538 <_svfiprintf_r+0x1f4>
 8008478:	7821      	ldrb	r1, [r4, #0]
 800847a:	2203      	movs	r2, #3
 800847c:	4650      	mov	r0, sl
 800847e:	f7f7 fee7 	bl	8000250 <memchr>
 8008482:	b138      	cbz	r0, 8008494 <_svfiprintf_r+0x150>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	eba0 000a 	sub.w	r0, r0, sl
 800848a:	2240      	movs	r2, #64	@ 0x40
 800848c:	4082      	lsls	r2, r0
 800848e:	4313      	orrs	r3, r2
 8008490:	3401      	adds	r4, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	4824      	ldr	r0, [pc, #144]	@ (800852c <_svfiprintf_r+0x1e8>)
 800849a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800849e:	2206      	movs	r2, #6
 80084a0:	f7f7 fed6 	bl	8000250 <memchr>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d036      	beq.n	8008516 <_svfiprintf_r+0x1d2>
 80084a8:	4b21      	ldr	r3, [pc, #132]	@ (8008530 <_svfiprintf_r+0x1ec>)
 80084aa:	bb1b      	cbnz	r3, 80084f4 <_svfiprintf_r+0x1b0>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	3307      	adds	r3, #7
 80084b0:	f023 0307 	bic.w	r3, r3, #7
 80084b4:	3308      	adds	r3, #8
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	4433      	add	r3, r6
 80084bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084be:	e76a      	b.n	8008396 <_svfiprintf_r+0x52>
 80084c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c4:	460c      	mov	r4, r1
 80084c6:	2001      	movs	r0, #1
 80084c8:	e7a8      	b.n	800841c <_svfiprintf_r+0xd8>
 80084ca:	2300      	movs	r3, #0
 80084cc:	3401      	adds	r4, #1
 80084ce:	9305      	str	r3, [sp, #20]
 80084d0:	4619      	mov	r1, r3
 80084d2:	f04f 0c0a 	mov.w	ip, #10
 80084d6:	4620      	mov	r0, r4
 80084d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084dc:	3a30      	subs	r2, #48	@ 0x30
 80084de:	2a09      	cmp	r2, #9
 80084e0:	d903      	bls.n	80084ea <_svfiprintf_r+0x1a6>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0c6      	beq.n	8008474 <_svfiprintf_r+0x130>
 80084e6:	9105      	str	r1, [sp, #20]
 80084e8:	e7c4      	b.n	8008474 <_svfiprintf_r+0x130>
 80084ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ee:	4604      	mov	r4, r0
 80084f0:	2301      	movs	r3, #1
 80084f2:	e7f0      	b.n	80084d6 <_svfiprintf_r+0x192>
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <_svfiprintf_r+0x1f0>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4638      	mov	r0, r7
 8008500:	f3af 8000 	nop.w
 8008504:	1c42      	adds	r2, r0, #1
 8008506:	4606      	mov	r6, r0
 8008508:	d1d6      	bne.n	80084b8 <_svfiprintf_r+0x174>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	065b      	lsls	r3, r3, #25
 800850e:	f53f af2d 	bmi.w	800836c <_svfiprintf_r+0x28>
 8008512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008514:	e72c      	b.n	8008370 <_svfiprintf_r+0x2c>
 8008516:	ab03      	add	r3, sp, #12
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	462a      	mov	r2, r5
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <_svfiprintf_r+0x1f0>)
 800851e:	a904      	add	r1, sp, #16
 8008520:	4638      	mov	r0, r7
 8008522:	f000 f879 	bl	8008618 <_printf_i>
 8008526:	e7ed      	b.n	8008504 <_svfiprintf_r+0x1c0>
 8008528:	08008aa4 	.word	0x08008aa4
 800852c:	08008aae 	.word	0x08008aae
 8008530:	00000000 	.word	0x00000000
 8008534:	0800828d 	.word	0x0800828d
 8008538:	08008aaa 	.word	0x08008aaa

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4698      	mov	r8, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfb8      	it	lt
 8008550:	4613      	movlt	r3, r2
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008558:	4607      	mov	r7, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc26      	bgt.n	80085d2 <_printf_common+0x96>
 8008584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008588:	6822      	ldr	r2, [r4, #0]
 800858a:	3b00      	subs	r3, #0
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42b      	bmi.n	80085ec <_printf_common+0xb0>
 8008594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008598:	4641      	mov	r1, r8
 800859a:	4638      	mov	r0, r7
 800859c:	47c8      	blx	r9
 800859e:	3001      	adds	r0, #1
 80085a0:	d01e      	beq.n	80085e0 <_printf_common+0xa4>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	f003 0306 	and.w	r3, r3, #6
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	bf02      	ittt	eq
 80085ae:	68e5      	ldreq	r5, [r4, #12]
 80085b0:	6833      	ldreq	r3, [r6, #0]
 80085b2:	1aed      	subeq	r5, r5, r3
 80085b4:	68a3      	ldr	r3, [r4, #8]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	2600      	movs	r6, #0
 80085c8:	341a      	adds	r4, #26
 80085ca:	42b5      	cmp	r5, r6
 80085cc:	d11a      	bne.n	8008604 <_printf_common+0xc8>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e008      	b.n	80085e4 <_printf_common+0xa8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4652      	mov	r2, sl
 80085d6:	4641      	mov	r1, r8
 80085d8:	4638      	mov	r0, r7
 80085da:	47c8      	blx	r9
 80085dc:	3001      	adds	r0, #1
 80085de:	d103      	bne.n	80085e8 <_printf_common+0xac>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c6      	b.n	800857a <_printf_common+0x3e>
 80085ec:	18e1      	adds	r1, r4, r3
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	2030      	movs	r0, #48	@ 0x30
 80085f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085f6:	4422      	add	r2, r4
 80085f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008600:	3302      	adds	r3, #2
 8008602:	e7c7      	b.n	8008594 <_printf_common+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	4622      	mov	r2, r4
 8008608:	4641      	mov	r1, r8
 800860a:	4638      	mov	r0, r7
 800860c:	47c8      	blx	r9
 800860e:	3001      	adds	r0, #1
 8008610:	d0e6      	beq.n	80085e0 <_printf_common+0xa4>
 8008612:	3601      	adds	r6, #1
 8008614:	e7d9      	b.n	80085ca <_printf_common+0x8e>
	...

08008618 <_printf_i>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	7e0f      	ldrb	r7, [r1, #24]
 800861e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008620:	2f78      	cmp	r7, #120	@ 0x78
 8008622:	4691      	mov	r9, r2
 8008624:	4680      	mov	r8, r0
 8008626:	460c      	mov	r4, r1
 8008628:	469a      	mov	sl, r3
 800862a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800862e:	d807      	bhi.n	8008640 <_printf_i+0x28>
 8008630:	2f62      	cmp	r7, #98	@ 0x62
 8008632:	d80a      	bhi.n	800864a <_printf_i+0x32>
 8008634:	2f00      	cmp	r7, #0
 8008636:	f000 80d1 	beq.w	80087dc <_printf_i+0x1c4>
 800863a:	2f58      	cmp	r7, #88	@ 0x58
 800863c:	f000 80b8 	beq.w	80087b0 <_printf_i+0x198>
 8008640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008648:	e03a      	b.n	80086c0 <_printf_i+0xa8>
 800864a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800864e:	2b15      	cmp	r3, #21
 8008650:	d8f6      	bhi.n	8008640 <_printf_i+0x28>
 8008652:	a101      	add	r1, pc, #4	@ (adr r1, 8008658 <_printf_i+0x40>)
 8008654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086c5 	.word	0x080086c5
 8008660:	08008641 	.word	0x08008641
 8008664:	08008641 	.word	0x08008641
 8008668:	08008641 	.word	0x08008641
 800866c:	08008641 	.word	0x08008641
 8008670:	080086c5 	.word	0x080086c5
 8008674:	08008641 	.word	0x08008641
 8008678:	08008641 	.word	0x08008641
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	080087c3 	.word	0x080087c3
 8008688:	080086ef 	.word	0x080086ef
 800868c:	0800877d 	.word	0x0800877d
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087e5 	.word	0x080087e5
 800869c:	08008641 	.word	0x08008641
 80086a0:	080086ef 	.word	0x080086ef
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	08008785 	.word	0x08008785
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6032      	str	r2, [r6, #0]
 80086b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e09c      	b.n	80087fe <_printf_i+0x1e6>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	6820      	ldr	r0, [r4, #0]
 80086c8:	1d19      	adds	r1, r3, #4
 80086ca:	6031      	str	r1, [r6, #0]
 80086cc:	0606      	lsls	r6, r0, #24
 80086ce:	d501      	bpl.n	80086d4 <_printf_i+0xbc>
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	e003      	b.n	80086dc <_printf_i+0xc4>
 80086d4:	0645      	lsls	r5, r0, #25
 80086d6:	d5fb      	bpl.n	80086d0 <_printf_i+0xb8>
 80086d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	da03      	bge.n	80086e8 <_printf_i+0xd0>
 80086e0:	232d      	movs	r3, #45	@ 0x2d
 80086e2:	426d      	negs	r5, r5
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e8:	4858      	ldr	r0, [pc, #352]	@ (800884c <_printf_i+0x234>)
 80086ea:	230a      	movs	r3, #10
 80086ec:	e011      	b.n	8008712 <_printf_i+0xfa>
 80086ee:	6821      	ldr	r1, [r4, #0]
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	0608      	lsls	r0, r1, #24
 80086f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80086f8:	d402      	bmi.n	8008700 <_printf_i+0xe8>
 80086fa:	0649      	lsls	r1, r1, #25
 80086fc:	bf48      	it	mi
 80086fe:	b2ad      	uxthmi	r5, r5
 8008700:	2f6f      	cmp	r7, #111	@ 0x6f
 8008702:	4852      	ldr	r0, [pc, #328]	@ (800884c <_printf_i+0x234>)
 8008704:	6033      	str	r3, [r6, #0]
 8008706:	bf14      	ite	ne
 8008708:	230a      	movne	r3, #10
 800870a:	2308      	moveq	r3, #8
 800870c:	2100      	movs	r1, #0
 800870e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008712:	6866      	ldr	r6, [r4, #4]
 8008714:	60a6      	str	r6, [r4, #8]
 8008716:	2e00      	cmp	r6, #0
 8008718:	db05      	blt.n	8008726 <_printf_i+0x10e>
 800871a:	6821      	ldr	r1, [r4, #0]
 800871c:	432e      	orrs	r6, r5
 800871e:	f021 0104 	bic.w	r1, r1, #4
 8008722:	6021      	str	r1, [r4, #0]
 8008724:	d04b      	beq.n	80087be <_printf_i+0x1a6>
 8008726:	4616      	mov	r6, r2
 8008728:	fbb5 f1f3 	udiv	r1, r5, r3
 800872c:	fb03 5711 	mls	r7, r3, r1, r5
 8008730:	5dc7      	ldrb	r7, [r0, r7]
 8008732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008736:	462f      	mov	r7, r5
 8008738:	42bb      	cmp	r3, r7
 800873a:	460d      	mov	r5, r1
 800873c:	d9f4      	bls.n	8008728 <_printf_i+0x110>
 800873e:	2b08      	cmp	r3, #8
 8008740:	d10b      	bne.n	800875a <_printf_i+0x142>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	07df      	lsls	r7, r3, #31
 8008746:	d508      	bpl.n	800875a <_printf_i+0x142>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6861      	ldr	r1, [r4, #4]
 800874c:	4299      	cmp	r1, r3
 800874e:	bfde      	ittt	le
 8008750:	2330      	movle	r3, #48	@ 0x30
 8008752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800875a:	1b92      	subs	r2, r2, r6
 800875c:	6122      	str	r2, [r4, #16]
 800875e:	f8cd a000 	str.w	sl, [sp]
 8008762:	464b      	mov	r3, r9
 8008764:	aa03      	add	r2, sp, #12
 8008766:	4621      	mov	r1, r4
 8008768:	4640      	mov	r0, r8
 800876a:	f7ff fee7 	bl	800853c <_printf_common>
 800876e:	3001      	adds	r0, #1
 8008770:	d14a      	bne.n	8008808 <_printf_i+0x1f0>
 8008772:	f04f 30ff 	mov.w	r0, #4294967295
 8008776:	b004      	add	sp, #16
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	f043 0320 	orr.w	r3, r3, #32
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	4832      	ldr	r0, [pc, #200]	@ (8008850 <_printf_i+0x238>)
 8008786:	2778      	movs	r7, #120	@ 0x78
 8008788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	6831      	ldr	r1, [r6, #0]
 8008790:	061f      	lsls	r7, r3, #24
 8008792:	f851 5b04 	ldr.w	r5, [r1], #4
 8008796:	d402      	bmi.n	800879e <_printf_i+0x186>
 8008798:	065f      	lsls	r7, r3, #25
 800879a:	bf48      	it	mi
 800879c:	b2ad      	uxthmi	r5, r5
 800879e:	6031      	str	r1, [r6, #0]
 80087a0:	07d9      	lsls	r1, r3, #31
 80087a2:	bf44      	itt	mi
 80087a4:	f043 0320 	orrmi.w	r3, r3, #32
 80087a8:	6023      	strmi	r3, [r4, #0]
 80087aa:	b11d      	cbz	r5, 80087b4 <_printf_i+0x19c>
 80087ac:	2310      	movs	r3, #16
 80087ae:	e7ad      	b.n	800870c <_printf_i+0xf4>
 80087b0:	4826      	ldr	r0, [pc, #152]	@ (800884c <_printf_i+0x234>)
 80087b2:	e7e9      	b.n	8008788 <_printf_i+0x170>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	e7f6      	b.n	80087ac <_printf_i+0x194>
 80087be:	4616      	mov	r6, r2
 80087c0:	e7bd      	b.n	800873e <_printf_i+0x126>
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	6825      	ldr	r5, [r4, #0]
 80087c6:	6961      	ldr	r1, [r4, #20]
 80087c8:	1d18      	adds	r0, r3, #4
 80087ca:	6030      	str	r0, [r6, #0]
 80087cc:	062e      	lsls	r6, r5, #24
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	d501      	bpl.n	80087d6 <_printf_i+0x1be>
 80087d2:	6019      	str	r1, [r3, #0]
 80087d4:	e002      	b.n	80087dc <_printf_i+0x1c4>
 80087d6:	0668      	lsls	r0, r5, #25
 80087d8:	d5fb      	bpl.n	80087d2 <_printf_i+0x1ba>
 80087da:	8019      	strh	r1, [r3, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	4616      	mov	r6, r2
 80087e2:	e7bc      	b.n	800875e <_printf_i+0x146>
 80087e4:	6833      	ldr	r3, [r6, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	6032      	str	r2, [r6, #0]
 80087ea:	681e      	ldr	r6, [r3, #0]
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	2100      	movs	r1, #0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7f7 fd2d 	bl	8000250 <memchr>
 80087f6:	b108      	cbz	r0, 80087fc <_printf_i+0x1e4>
 80087f8:	1b80      	subs	r0, r0, r6
 80087fa:	6060      	str	r0, [r4, #4]
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	2300      	movs	r3, #0
 8008802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008806:	e7aa      	b.n	800875e <_printf_i+0x146>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	4632      	mov	r2, r6
 800880c:	4649      	mov	r1, r9
 800880e:	4640      	mov	r0, r8
 8008810:	47d0      	blx	sl
 8008812:	3001      	adds	r0, #1
 8008814:	d0ad      	beq.n	8008772 <_printf_i+0x15a>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	079b      	lsls	r3, r3, #30
 800881a:	d413      	bmi.n	8008844 <_printf_i+0x22c>
 800881c:	68e0      	ldr	r0, [r4, #12]
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	4298      	cmp	r0, r3
 8008822:	bfb8      	it	lt
 8008824:	4618      	movlt	r0, r3
 8008826:	e7a6      	b.n	8008776 <_printf_i+0x15e>
 8008828:	2301      	movs	r3, #1
 800882a:	4632      	mov	r2, r6
 800882c:	4649      	mov	r1, r9
 800882e:	4640      	mov	r0, r8
 8008830:	47d0      	blx	sl
 8008832:	3001      	adds	r0, #1
 8008834:	d09d      	beq.n	8008772 <_printf_i+0x15a>
 8008836:	3501      	adds	r5, #1
 8008838:	68e3      	ldr	r3, [r4, #12]
 800883a:	9903      	ldr	r1, [sp, #12]
 800883c:	1a5b      	subs	r3, r3, r1
 800883e:	42ab      	cmp	r3, r5
 8008840:	dcf2      	bgt.n	8008828 <_printf_i+0x210>
 8008842:	e7eb      	b.n	800881c <_printf_i+0x204>
 8008844:	2500      	movs	r5, #0
 8008846:	f104 0619 	add.w	r6, r4, #25
 800884a:	e7f5      	b.n	8008838 <_printf_i+0x220>
 800884c:	08008ab5 	.word	0x08008ab5
 8008850:	08008ac6 	.word	0x08008ac6

08008854 <memmove>:
 8008854:	4288      	cmp	r0, r1
 8008856:	b510      	push	{r4, lr}
 8008858:	eb01 0402 	add.w	r4, r1, r2
 800885c:	d902      	bls.n	8008864 <memmove+0x10>
 800885e:	4284      	cmp	r4, r0
 8008860:	4623      	mov	r3, r4
 8008862:	d807      	bhi.n	8008874 <memmove+0x20>
 8008864:	1e43      	subs	r3, r0, #1
 8008866:	42a1      	cmp	r1, r4
 8008868:	d008      	beq.n	800887c <memmove+0x28>
 800886a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800886e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008872:	e7f8      	b.n	8008866 <memmove+0x12>
 8008874:	4402      	add	r2, r0
 8008876:	4601      	mov	r1, r0
 8008878:	428a      	cmp	r2, r1
 800887a:	d100      	bne.n	800887e <memmove+0x2a>
 800887c:	bd10      	pop	{r4, pc}
 800887e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008886:	e7f7      	b.n	8008878 <memmove+0x24>

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d06      	ldr	r5, [pc, #24]	@ (80088a4 <_sbrk_r+0x1c>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	f7f8 fc38 	bl	8001108 <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	200052fc 	.word	0x200052fc

080088a8 <_realloc_r>:
 80088a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ac:	4607      	mov	r7, r0
 80088ae:	4614      	mov	r4, r2
 80088b0:	460d      	mov	r5, r1
 80088b2:	b921      	cbnz	r1, 80088be <_realloc_r+0x16>
 80088b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	4611      	mov	r1, r2
 80088ba:	f7ff bc5b 	b.w	8008174 <_malloc_r>
 80088be:	b92a      	cbnz	r2, 80088cc <_realloc_r+0x24>
 80088c0:	f7ff fbec 	bl	800809c <_free_r>
 80088c4:	4625      	mov	r5, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	f000 f81a 	bl	8008904 <_malloc_usable_size_r>
 80088d0:	4284      	cmp	r4, r0
 80088d2:	4606      	mov	r6, r0
 80088d4:	d802      	bhi.n	80088dc <_realloc_r+0x34>
 80088d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088da:	d8f4      	bhi.n	80088c6 <_realloc_r+0x1e>
 80088dc:	4621      	mov	r1, r4
 80088de:	4638      	mov	r0, r7
 80088e0:	f7ff fc48 	bl	8008174 <_malloc_r>
 80088e4:	4680      	mov	r8, r0
 80088e6:	b908      	cbnz	r0, 80088ec <_realloc_r+0x44>
 80088e8:	4645      	mov	r5, r8
 80088ea:	e7ec      	b.n	80088c6 <_realloc_r+0x1e>
 80088ec:	42b4      	cmp	r4, r6
 80088ee:	4622      	mov	r2, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	bf28      	it	cs
 80088f4:	4632      	movcs	r2, r6
 80088f6:	f7ff fbc3 	bl	8008080 <memcpy>
 80088fa:	4629      	mov	r1, r5
 80088fc:	4638      	mov	r0, r7
 80088fe:	f7ff fbcd 	bl	800809c <_free_r>
 8008902:	e7f1      	b.n	80088e8 <_realloc_r+0x40>

08008904 <_malloc_usable_size_r>:
 8008904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008908:	1f18      	subs	r0, r3, #4
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfbc      	itt	lt
 800890e:	580b      	ldrlt	r3, [r1, r0]
 8008910:	18c0      	addlt	r0, r0, r3
 8008912:	4770      	bx	lr

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
